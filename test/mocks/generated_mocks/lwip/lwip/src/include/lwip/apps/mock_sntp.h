#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_SNTP_H
#define _MOCK_SNTP_H

#include "unity.h"
#include "sntp.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_sntp_Init(void);
void mock_sntp_Destroy(void);
void mock_sntp_Verify(void);




#define sntp_setoperatingmode_Ignore() sntp_setoperatingmode_CMockIgnore()
void sntp_setoperatingmode_CMockIgnore(void);
#define sntp_setoperatingmode_StopIgnore() sntp_setoperatingmode_CMockStopIgnore()
void sntp_setoperatingmode_CMockStopIgnore(void);
#define sntp_setoperatingmode_Expect(operating_mode) sntp_setoperatingmode_CMockExpect(__LINE__, operating_mode)
void sntp_setoperatingmode_CMockExpect(UNITY_LINE_TYPE cmock_line, u8_t operating_mode);
typedef void (* CMOCK_sntp_setoperatingmode_CALLBACK)(u8_t operating_mode, int cmock_num_calls);
void sntp_setoperatingmode_AddCallback(CMOCK_sntp_setoperatingmode_CALLBACK Callback);
void sntp_setoperatingmode_Stub(CMOCK_sntp_setoperatingmode_CALLBACK Callback);
#define sntp_setoperatingmode_StubWithCallback sntp_setoperatingmode_Stub
#define sntp_setoperatingmode_IgnoreArg_operating_mode() sntp_setoperatingmode_CMockIgnoreArg_operating_mode(__LINE__)
void sntp_setoperatingmode_CMockIgnoreArg_operating_mode(UNITY_LINE_TYPE cmock_line);
#define sntp_getoperatingmode_IgnoreAndReturn(cmock_retval) sntp_getoperatingmode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void sntp_getoperatingmode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, u8_t cmock_to_return);
#define sntp_getoperatingmode_StopIgnore() sntp_getoperatingmode_CMockStopIgnore()
void sntp_getoperatingmode_CMockStopIgnore(void);
#define sntp_getoperatingmode_ExpectAndReturn(cmock_retval) sntp_getoperatingmode_CMockExpectAndReturn(__LINE__, cmock_retval)
void sntp_getoperatingmode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, u8_t cmock_to_return);
typedef u8_t (* CMOCK_sntp_getoperatingmode_CALLBACK)(int cmock_num_calls);
void sntp_getoperatingmode_AddCallback(CMOCK_sntp_getoperatingmode_CALLBACK Callback);
void sntp_getoperatingmode_Stub(CMOCK_sntp_getoperatingmode_CALLBACK Callback);
#define sntp_getoperatingmode_StubWithCallback sntp_getoperatingmode_Stub
#define sntp_init_Ignore() sntp_init_CMockIgnore()
void sntp_init_CMockIgnore(void);
#define sntp_init_StopIgnore() sntp_init_CMockStopIgnore()
void sntp_init_CMockStopIgnore(void);
#define sntp_init_Expect() sntp_init_CMockExpect(__LINE__)
void sntp_init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_sntp_init_CALLBACK)(int cmock_num_calls);
void sntp_init_AddCallback(CMOCK_sntp_init_CALLBACK Callback);
void sntp_init_Stub(CMOCK_sntp_init_CALLBACK Callback);
#define sntp_init_StubWithCallback sntp_init_Stub
#define sntp_stop_Ignore() sntp_stop_CMockIgnore()
void sntp_stop_CMockIgnore(void);
#define sntp_stop_StopIgnore() sntp_stop_CMockStopIgnore()
void sntp_stop_CMockStopIgnore(void);
#define sntp_stop_Expect() sntp_stop_CMockExpect(__LINE__)
void sntp_stop_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_sntp_stop_CALLBACK)(int cmock_num_calls);
void sntp_stop_AddCallback(CMOCK_sntp_stop_CALLBACK Callback);
void sntp_stop_Stub(CMOCK_sntp_stop_CALLBACK Callback);
#define sntp_stop_StubWithCallback sntp_stop_Stub
#define sntp_enabled_IgnoreAndReturn(cmock_retval) sntp_enabled_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void sntp_enabled_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, u8_t cmock_to_return);
#define sntp_enabled_StopIgnore() sntp_enabled_CMockStopIgnore()
void sntp_enabled_CMockStopIgnore(void);
#define sntp_enabled_ExpectAndReturn(cmock_retval) sntp_enabled_CMockExpectAndReturn(__LINE__, cmock_retval)
void sntp_enabled_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, u8_t cmock_to_return);
typedef u8_t (* CMOCK_sntp_enabled_CALLBACK)(int cmock_num_calls);
void sntp_enabled_AddCallback(CMOCK_sntp_enabled_CALLBACK Callback);
void sntp_enabled_Stub(CMOCK_sntp_enabled_CALLBACK Callback);
#define sntp_enabled_StubWithCallback sntp_enabled_Stub
#define sntp_setserver_Ignore() sntp_setserver_CMockIgnore()
void sntp_setserver_CMockIgnore(void);
#define sntp_setserver_StopIgnore() sntp_setserver_CMockStopIgnore()
void sntp_setserver_CMockStopIgnore(void);
#define sntp_setserver_Expect(idx, addr) sntp_setserver_CMockExpect(__LINE__, idx, addr)
void sntp_setserver_CMockExpect(UNITY_LINE_TYPE cmock_line, u8_t idx, const ip_addr_t* addr);
typedef void (* CMOCK_sntp_setserver_CALLBACK)(u8_t idx, const ip_addr_t* addr, int cmock_num_calls);
void sntp_setserver_AddCallback(CMOCK_sntp_setserver_CALLBACK Callback);
void sntp_setserver_Stub(CMOCK_sntp_setserver_CALLBACK Callback);
#define sntp_setserver_StubWithCallback sntp_setserver_Stub
#define sntp_setserver_ExpectWithArray(idx, addr, addr_Depth) sntp_setserver_CMockExpectWithArray(__LINE__, idx, addr, addr_Depth)
void sntp_setserver_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, u8_t idx, const ip_addr_t* addr, int addr_Depth);
#define sntp_setserver_IgnoreArg_idx() sntp_setserver_CMockIgnoreArg_idx(__LINE__)
void sntp_setserver_CMockIgnoreArg_idx(UNITY_LINE_TYPE cmock_line);
#define sntp_setserver_IgnoreArg_addr() sntp_setserver_CMockIgnoreArg_addr(__LINE__)
void sntp_setserver_CMockIgnoreArg_addr(UNITY_LINE_TYPE cmock_line);
#define sntp_getserver_IgnoreAndReturn(cmock_retval) sntp_getserver_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void sntp_getserver_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const ip_addr_t* cmock_to_return);
#define sntp_getserver_StopIgnore() sntp_getserver_CMockStopIgnore()
void sntp_getserver_CMockStopIgnore(void);
#define sntp_getserver_ExpectAndReturn(idx, cmock_retval) sntp_getserver_CMockExpectAndReturn(__LINE__, idx, cmock_retval)
void sntp_getserver_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, u8_t idx, const ip_addr_t* cmock_to_return);
typedef const ip_addr_t* (* CMOCK_sntp_getserver_CALLBACK)(u8_t idx, int cmock_num_calls);
void sntp_getserver_AddCallback(CMOCK_sntp_getserver_CALLBACK Callback);
void sntp_getserver_Stub(CMOCK_sntp_getserver_CALLBACK Callback);
#define sntp_getserver_StubWithCallback sntp_getserver_Stub
#define sntp_getserver_IgnoreArg_idx() sntp_getserver_CMockIgnoreArg_idx(__LINE__)
void sntp_getserver_CMockIgnoreArg_idx(UNITY_LINE_TYPE cmock_line);
#define sntp_getreachability_IgnoreAndReturn(cmock_retval) sntp_getreachability_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void sntp_getreachability_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, u8_t cmock_to_return);
#define sntp_getreachability_StopIgnore() sntp_getreachability_CMockStopIgnore()
void sntp_getreachability_CMockStopIgnore(void);
#define sntp_getreachability_ExpectAndReturn(idx, cmock_retval) sntp_getreachability_CMockExpectAndReturn(__LINE__, idx, cmock_retval)
void sntp_getreachability_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, u8_t idx, u8_t cmock_to_return);
typedef u8_t (* CMOCK_sntp_getreachability_CALLBACK)(u8_t idx, int cmock_num_calls);
void sntp_getreachability_AddCallback(CMOCK_sntp_getreachability_CALLBACK Callback);
void sntp_getreachability_Stub(CMOCK_sntp_getreachability_CALLBACK Callback);
#define sntp_getreachability_StubWithCallback sntp_getreachability_Stub
#define sntp_getreachability_IgnoreArg_idx() sntp_getreachability_CMockIgnoreArg_idx(__LINE__)
void sntp_getreachability_CMockIgnoreArg_idx(UNITY_LINE_TYPE cmock_line);
#define sntp_setservername_Ignore() sntp_setservername_CMockIgnore()
void sntp_setservername_CMockIgnore(void);
#define sntp_setservername_StopIgnore() sntp_setservername_CMockStopIgnore()
void sntp_setservername_CMockStopIgnore(void);
#define sntp_setservername_Expect(idx, server) sntp_setservername_CMockExpect(__LINE__, idx, server)
void sntp_setservername_CMockExpect(UNITY_LINE_TYPE cmock_line, u8_t idx, const char* server);
typedef void (* CMOCK_sntp_setservername_CALLBACK)(u8_t idx, const char* server, int cmock_num_calls);
void sntp_setservername_AddCallback(CMOCK_sntp_setservername_CALLBACK Callback);
void sntp_setservername_Stub(CMOCK_sntp_setservername_CALLBACK Callback);
#define sntp_setservername_StubWithCallback sntp_setservername_Stub
#define sntp_setservername_IgnoreArg_idx() sntp_setservername_CMockIgnoreArg_idx(__LINE__)
void sntp_setservername_CMockIgnoreArg_idx(UNITY_LINE_TYPE cmock_line);
#define sntp_setservername_IgnoreArg_server() sntp_setservername_CMockIgnoreArg_server(__LINE__)
void sntp_setservername_CMockIgnoreArg_server(UNITY_LINE_TYPE cmock_line);
#define sntp_getservername_IgnoreAndReturn(cmock_retval) sntp_getservername_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void sntp_getservername_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define sntp_getservername_StopIgnore() sntp_getservername_CMockStopIgnore()
void sntp_getservername_CMockStopIgnore(void);
#define sntp_getservername_ExpectAndReturn(idx, cmock_retval) sntp_getservername_CMockExpectAndReturn(__LINE__, idx, cmock_retval)
void sntp_getservername_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, u8_t idx, const char* cmock_to_return);
typedef const char* (* CMOCK_sntp_getservername_CALLBACK)(u8_t idx, int cmock_num_calls);
void sntp_getservername_AddCallback(CMOCK_sntp_getservername_CALLBACK Callback);
void sntp_getservername_Stub(CMOCK_sntp_getservername_CALLBACK Callback);
#define sntp_getservername_StubWithCallback sntp_getservername_Stub
#define sntp_getservername_IgnoreArg_idx() sntp_getservername_CMockIgnoreArg_idx(__LINE__)
void sntp_getservername_CMockIgnoreArg_idx(UNITY_LINE_TYPE cmock_line);
#define sntp_servermode_dhcp_Ignore() sntp_servermode_dhcp_CMockIgnore()
void sntp_servermode_dhcp_CMockIgnore(void);
#define sntp_servermode_dhcp_StopIgnore() sntp_servermode_dhcp_CMockStopIgnore()
void sntp_servermode_dhcp_CMockStopIgnore(void);
#define sntp_servermode_dhcp_Expect(set_servers_from_dhcp) sntp_servermode_dhcp_CMockExpect(__LINE__, set_servers_from_dhcp)
void sntp_servermode_dhcp_CMockExpect(UNITY_LINE_TYPE cmock_line, int set_servers_from_dhcp);
typedef void (* CMOCK_sntp_servermode_dhcp_CALLBACK)(int set_servers_from_dhcp, int cmock_num_calls);
void sntp_servermode_dhcp_AddCallback(CMOCK_sntp_servermode_dhcp_CALLBACK Callback);
void sntp_servermode_dhcp_Stub(CMOCK_sntp_servermode_dhcp_CALLBACK Callback);
#define sntp_servermode_dhcp_StubWithCallback sntp_servermode_dhcp_Stub
#define sntp_servermode_dhcp_IgnoreArg_set_servers_from_dhcp() sntp_servermode_dhcp_CMockIgnoreArg_set_servers_from_dhcp(__LINE__)
void sntp_servermode_dhcp_CMockIgnoreArg_set_servers_from_dhcp(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
