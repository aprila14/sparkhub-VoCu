#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_TIMERS_H
#define _MOCK_TIMERS_H

#include "freertos/FreeRTOS.h"
#include "unity.h"
#include "timers.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_timers_Init(void);
void mock_timers_Destroy(void);
void mock_timers_Verify(void);




#define xTimerCreate_IgnoreAndReturn(cmock_retval) xTimerCreate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTimerCreate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t cmock_to_return);
#define xTimerCreate_StopIgnore() xTimerCreate_CMockStopIgnore()
void xTimerCreate_CMockStopIgnore(void);
#define xTimerCreate_ExpectAndReturn(pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, cmock_retval) xTimerCreate_CMockExpectAndReturn(__LINE__, pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, cmock_retval)
void xTimerCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void* const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, TimerHandle_t cmock_to_return);
typedef TimerHandle_t (* CMOCK_xTimerCreate_CALLBACK)(const char* const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void* const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, int cmock_num_calls);
void xTimerCreate_AddCallback(CMOCK_xTimerCreate_CALLBACK Callback);
void xTimerCreate_Stub(CMOCK_xTimerCreate_CALLBACK Callback);
#define xTimerCreate_StubWithCallback xTimerCreate_Stub
#define xTimerCreate_ExpectWithArrayAndReturn(pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pvTimerID_Depth, pxCallbackFunction, cmock_retval) xTimerCreate_CMockExpectWithArrayAndReturn(__LINE__, pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pvTimerID_Depth, pxCallbackFunction, cmock_retval)
void xTimerCreate_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const char* const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void* const pvTimerID, int pvTimerID_Depth, TimerCallbackFunction_t pxCallbackFunction, TimerHandle_t cmock_to_return);
#define xTimerCreate_ReturnThruPtr_pvTimerID(pvTimerID) xTimerCreate_CMockReturnMemThruPtr_pvTimerID(__LINE__, pvTimerID, sizeof(void))
#define xTimerCreate_ReturnArrayThruPtr_pvTimerID(pvTimerID, cmock_len) xTimerCreate_CMockReturnMemThruPtr_pvTimerID(__LINE__, pvTimerID, cmock_len * sizeof(*pvTimerID))
#define xTimerCreate_ReturnMemThruPtr_pvTimerID(pvTimerID, cmock_size) xTimerCreate_CMockReturnMemThruPtr_pvTimerID(__LINE__, pvTimerID, cmock_size)
void xTimerCreate_CMockReturnMemThruPtr_pvTimerID(UNITY_LINE_TYPE cmock_line, void* pvTimerID, size_t cmock_size);
#define xTimerCreate_IgnoreArg_pcTimerName() xTimerCreate_CMockIgnoreArg_pcTimerName(__LINE__)
void xTimerCreate_CMockIgnoreArg_pcTimerName(UNITY_LINE_TYPE cmock_line);
#define xTimerCreate_IgnoreArg_xTimerPeriodInTicks() xTimerCreate_CMockIgnoreArg_xTimerPeriodInTicks(__LINE__)
void xTimerCreate_CMockIgnoreArg_xTimerPeriodInTicks(UNITY_LINE_TYPE cmock_line);
#define xTimerCreate_IgnoreArg_uxAutoReload() xTimerCreate_CMockIgnoreArg_uxAutoReload(__LINE__)
void xTimerCreate_CMockIgnoreArg_uxAutoReload(UNITY_LINE_TYPE cmock_line);
#define xTimerCreate_IgnoreArg_pvTimerID() xTimerCreate_CMockIgnoreArg_pvTimerID(__LINE__)
void xTimerCreate_CMockIgnoreArg_pvTimerID(UNITY_LINE_TYPE cmock_line);
#define xTimerCreate_IgnoreArg_pxCallbackFunction() xTimerCreate_CMockIgnoreArg_pxCallbackFunction(__LINE__)
void xTimerCreate_CMockIgnoreArg_pxCallbackFunction(UNITY_LINE_TYPE cmock_line);
#define xTimerCreateStatic_IgnoreAndReturn(cmock_retval) xTimerCreateStatic_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTimerCreateStatic_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t cmock_to_return);
#define xTimerCreateStatic_StopIgnore() xTimerCreateStatic_CMockStopIgnore()
void xTimerCreateStatic_CMockStopIgnore(void);
#define xTimerCreateStatic_ExpectAndReturn(pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer, cmock_retval) xTimerCreateStatic_CMockExpectAndReturn(__LINE__, pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxTimerBuffer, cmock_retval)
void xTimerCreateStatic_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void* const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, StaticTimer_t* pxTimerBuffer, TimerHandle_t cmock_to_return);
typedef TimerHandle_t (* CMOCK_xTimerCreateStatic_CALLBACK)(const char* const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void* const pvTimerID, TimerCallbackFunction_t pxCallbackFunction, StaticTimer_t* pxTimerBuffer, int cmock_num_calls);
void xTimerCreateStatic_AddCallback(CMOCK_xTimerCreateStatic_CALLBACK Callback);
void xTimerCreateStatic_Stub(CMOCK_xTimerCreateStatic_CALLBACK Callback);
#define xTimerCreateStatic_StubWithCallback xTimerCreateStatic_Stub
#define xTimerCreateStatic_ExpectWithArrayAndReturn(pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pvTimerID_Depth, pxCallbackFunction, pxTimerBuffer, pxTimerBuffer_Depth, cmock_retval) xTimerCreateStatic_CMockExpectWithArrayAndReturn(__LINE__, pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pvTimerID_Depth, pxCallbackFunction, pxTimerBuffer, pxTimerBuffer_Depth, cmock_retval)
void xTimerCreateStatic_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const char* const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void* const pvTimerID, int pvTimerID_Depth, TimerCallbackFunction_t pxCallbackFunction, StaticTimer_t* pxTimerBuffer, int pxTimerBuffer_Depth, TimerHandle_t cmock_to_return);
#define xTimerCreateStatic_ReturnThruPtr_pvTimerID(pvTimerID) xTimerCreateStatic_CMockReturnMemThruPtr_pvTimerID(__LINE__, pvTimerID, sizeof(void))
#define xTimerCreateStatic_ReturnArrayThruPtr_pvTimerID(pvTimerID, cmock_len) xTimerCreateStatic_CMockReturnMemThruPtr_pvTimerID(__LINE__, pvTimerID, cmock_len * sizeof(*pvTimerID))
#define xTimerCreateStatic_ReturnMemThruPtr_pvTimerID(pvTimerID, cmock_size) xTimerCreateStatic_CMockReturnMemThruPtr_pvTimerID(__LINE__, pvTimerID, cmock_size)
void xTimerCreateStatic_CMockReturnMemThruPtr_pvTimerID(UNITY_LINE_TYPE cmock_line, void* pvTimerID, size_t cmock_size);
#define xTimerCreateStatic_ReturnThruPtr_pxTimerBuffer(pxTimerBuffer) xTimerCreateStatic_CMockReturnMemThruPtr_pxTimerBuffer(__LINE__, pxTimerBuffer, sizeof(StaticTimer_t))
#define xTimerCreateStatic_ReturnArrayThruPtr_pxTimerBuffer(pxTimerBuffer, cmock_len) xTimerCreateStatic_CMockReturnMemThruPtr_pxTimerBuffer(__LINE__, pxTimerBuffer, cmock_len * sizeof(*pxTimerBuffer))
#define xTimerCreateStatic_ReturnMemThruPtr_pxTimerBuffer(pxTimerBuffer, cmock_size) xTimerCreateStatic_CMockReturnMemThruPtr_pxTimerBuffer(__LINE__, pxTimerBuffer, cmock_size)
void xTimerCreateStatic_CMockReturnMemThruPtr_pxTimerBuffer(UNITY_LINE_TYPE cmock_line, StaticTimer_t* pxTimerBuffer, size_t cmock_size);
#define xTimerCreateStatic_IgnoreArg_pcTimerName() xTimerCreateStatic_CMockIgnoreArg_pcTimerName(__LINE__)
void xTimerCreateStatic_CMockIgnoreArg_pcTimerName(UNITY_LINE_TYPE cmock_line);
#define xTimerCreateStatic_IgnoreArg_xTimerPeriodInTicks() xTimerCreateStatic_CMockIgnoreArg_xTimerPeriodInTicks(__LINE__)
void xTimerCreateStatic_CMockIgnoreArg_xTimerPeriodInTicks(UNITY_LINE_TYPE cmock_line);
#define xTimerCreateStatic_IgnoreArg_uxAutoReload() xTimerCreateStatic_CMockIgnoreArg_uxAutoReload(__LINE__)
void xTimerCreateStatic_CMockIgnoreArg_uxAutoReload(UNITY_LINE_TYPE cmock_line);
#define xTimerCreateStatic_IgnoreArg_pvTimerID() xTimerCreateStatic_CMockIgnoreArg_pvTimerID(__LINE__)
void xTimerCreateStatic_CMockIgnoreArg_pvTimerID(UNITY_LINE_TYPE cmock_line);
#define xTimerCreateStatic_IgnoreArg_pxCallbackFunction() xTimerCreateStatic_CMockIgnoreArg_pxCallbackFunction(__LINE__)
void xTimerCreateStatic_CMockIgnoreArg_pxCallbackFunction(UNITY_LINE_TYPE cmock_line);
#define xTimerCreateStatic_IgnoreArg_pxTimerBuffer() xTimerCreateStatic_CMockIgnoreArg_pxTimerBuffer(__LINE__)
void xTimerCreateStatic_CMockIgnoreArg_pxTimerBuffer(UNITY_LINE_TYPE cmock_line);
#define pvTimerGetTimerID_IgnoreAndReturn(cmock_retval) pvTimerGetTimerID_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pvTimerGetTimerID_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define pvTimerGetTimerID_StopIgnore() pvTimerGetTimerID_CMockStopIgnore()
void pvTimerGetTimerID_CMockStopIgnore(void);
#define pvTimerGetTimerID_ExpectAndReturn(xTimer, cmock_retval) pvTimerGetTimerID_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void pvTimerGetTimerID_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const TimerHandle_t xTimer, void* cmock_to_return);
typedef void* (* CMOCK_pvTimerGetTimerID_CALLBACK)(const TimerHandle_t xTimer, int cmock_num_calls);
void pvTimerGetTimerID_AddCallback(CMOCK_pvTimerGetTimerID_CALLBACK Callback);
void pvTimerGetTimerID_Stub(CMOCK_pvTimerGetTimerID_CALLBACK Callback);
#define pvTimerGetTimerID_StubWithCallback pvTimerGetTimerID_Stub
#define pvTimerGetTimerID_IgnoreArg_xTimer() pvTimerGetTimerID_CMockIgnoreArg_xTimer(__LINE__)
void pvTimerGetTimerID_CMockIgnoreArg_xTimer(UNITY_LINE_TYPE cmock_line);
#define vTimerSetTimerID_Ignore() vTimerSetTimerID_CMockIgnore()
void vTimerSetTimerID_CMockIgnore(void);
#define vTimerSetTimerID_StopIgnore() vTimerSetTimerID_CMockStopIgnore()
void vTimerSetTimerID_CMockStopIgnore(void);
#define vTimerSetTimerID_Expect(xTimer, pvNewID) vTimerSetTimerID_CMockExpect(__LINE__, xTimer, pvNewID)
void vTimerSetTimerID_CMockExpect(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, void* pvNewID);
typedef void (* CMOCK_vTimerSetTimerID_CALLBACK)(TimerHandle_t xTimer, void* pvNewID, int cmock_num_calls);
void vTimerSetTimerID_AddCallback(CMOCK_vTimerSetTimerID_CALLBACK Callback);
void vTimerSetTimerID_Stub(CMOCK_vTimerSetTimerID_CALLBACK Callback);
#define vTimerSetTimerID_StubWithCallback vTimerSetTimerID_Stub
#define vTimerSetTimerID_ExpectWithArray(xTimer, pvNewID, pvNewID_Depth) vTimerSetTimerID_CMockExpectWithArray(__LINE__, xTimer, pvNewID, pvNewID_Depth)
void vTimerSetTimerID_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, void* pvNewID, int pvNewID_Depth);
#define vTimerSetTimerID_ReturnThruPtr_pvNewID(pvNewID) vTimerSetTimerID_CMockReturnMemThruPtr_pvNewID(__LINE__, pvNewID, sizeof(void))
#define vTimerSetTimerID_ReturnArrayThruPtr_pvNewID(pvNewID, cmock_len) vTimerSetTimerID_CMockReturnMemThruPtr_pvNewID(__LINE__, pvNewID, cmock_len * sizeof(*pvNewID))
#define vTimerSetTimerID_ReturnMemThruPtr_pvNewID(pvNewID, cmock_size) vTimerSetTimerID_CMockReturnMemThruPtr_pvNewID(__LINE__, pvNewID, cmock_size)
void vTimerSetTimerID_CMockReturnMemThruPtr_pvNewID(UNITY_LINE_TYPE cmock_line, void* pvNewID, size_t cmock_size);
#define vTimerSetTimerID_IgnoreArg_xTimer() vTimerSetTimerID_CMockIgnoreArg_xTimer(__LINE__)
void vTimerSetTimerID_CMockIgnoreArg_xTimer(UNITY_LINE_TYPE cmock_line);
#define vTimerSetTimerID_IgnoreArg_pvNewID() vTimerSetTimerID_CMockIgnoreArg_pvNewID(__LINE__)
void vTimerSetTimerID_CMockIgnoreArg_pvNewID(UNITY_LINE_TYPE cmock_line);
#define xTimerIsTimerActive_IgnoreAndReturn(cmock_retval) xTimerIsTimerActive_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTimerIsTimerActive_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTimerIsTimerActive_StopIgnore() xTimerIsTimerActive_CMockStopIgnore()
void xTimerIsTimerActive_CMockStopIgnore(void);
#define xTimerIsTimerActive_ExpectAndReturn(xTimer, cmock_retval) xTimerIsTimerActive_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void xTimerIsTimerActive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTimerIsTimerActive_CALLBACK)(TimerHandle_t xTimer, int cmock_num_calls);
void xTimerIsTimerActive_AddCallback(CMOCK_xTimerIsTimerActive_CALLBACK Callback);
void xTimerIsTimerActive_Stub(CMOCK_xTimerIsTimerActive_CALLBACK Callback);
#define xTimerIsTimerActive_StubWithCallback xTimerIsTimerActive_Stub
#define xTimerIsTimerActive_IgnoreArg_xTimer() xTimerIsTimerActive_CMockIgnoreArg_xTimer(__LINE__)
void xTimerIsTimerActive_CMockIgnoreArg_xTimer(UNITY_LINE_TYPE cmock_line);
#define xTimerGetTimerDaemonTaskHandle_IgnoreAndReturn(cmock_retval) xTimerGetTimerDaemonTaskHandle_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTimerGetTimerDaemonTaskHandle_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
#define xTimerGetTimerDaemonTaskHandle_StopIgnore() xTimerGetTimerDaemonTaskHandle_CMockStopIgnore()
void xTimerGetTimerDaemonTaskHandle_CMockStopIgnore(void);
#define xTimerGetTimerDaemonTaskHandle_ExpectAndReturn(cmock_retval) xTimerGetTimerDaemonTaskHandle_CMockExpectAndReturn(__LINE__, cmock_retval)
void xTimerGetTimerDaemonTaskHandle_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TaskHandle_t cmock_to_return);
typedef TaskHandle_t (* CMOCK_xTimerGetTimerDaemonTaskHandle_CALLBACK)(int cmock_num_calls);
void xTimerGetTimerDaemonTaskHandle_AddCallback(CMOCK_xTimerGetTimerDaemonTaskHandle_CALLBACK Callback);
void xTimerGetTimerDaemonTaskHandle_Stub(CMOCK_xTimerGetTimerDaemonTaskHandle_CALLBACK Callback);
#define xTimerGetTimerDaemonTaskHandle_StubWithCallback xTimerGetTimerDaemonTaskHandle_Stub
#define xTimerPendFunctionCallFromISR_IgnoreAndReturn(cmock_retval) xTimerPendFunctionCallFromISR_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTimerPendFunctionCallFromISR_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTimerPendFunctionCallFromISR_StopIgnore() xTimerPendFunctionCallFromISR_CMockStopIgnore()
void xTimerPendFunctionCallFromISR_CMockStopIgnore(void);
#define xTimerPendFunctionCallFromISR_ExpectAndReturn(xFunctionToPend, pvParameter1, ulParameter2, pxHigherPriorityTaskWoken, cmock_retval) xTimerPendFunctionCallFromISR_CMockExpectAndReturn(__LINE__, xFunctionToPend, pvParameter1, ulParameter2, pxHigherPriorityTaskWoken, cmock_retval)
void xTimerPendFunctionCallFromISR_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, PendedFunction_t xFunctionToPend, void* pvParameter1, uint32_t ulParameter2, BaseType_t* pxHigherPriorityTaskWoken, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTimerPendFunctionCallFromISR_CALLBACK)(PendedFunction_t xFunctionToPend, void* pvParameter1, uint32_t ulParameter2, BaseType_t* pxHigherPriorityTaskWoken, int cmock_num_calls);
void xTimerPendFunctionCallFromISR_AddCallback(CMOCK_xTimerPendFunctionCallFromISR_CALLBACK Callback);
void xTimerPendFunctionCallFromISR_Stub(CMOCK_xTimerPendFunctionCallFromISR_CALLBACK Callback);
#define xTimerPendFunctionCallFromISR_StubWithCallback xTimerPendFunctionCallFromISR_Stub
#define xTimerPendFunctionCallFromISR_ExpectWithArrayAndReturn(xFunctionToPend, pvParameter1, pvParameter1_Depth, ulParameter2, pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken_Depth, cmock_retval) xTimerPendFunctionCallFromISR_CMockExpectWithArrayAndReturn(__LINE__, xFunctionToPend, pvParameter1, pvParameter1_Depth, ulParameter2, pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken_Depth, cmock_retval)
void xTimerPendFunctionCallFromISR_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, PendedFunction_t xFunctionToPend, void* pvParameter1, int pvParameter1_Depth, uint32_t ulParameter2, BaseType_t* pxHigherPriorityTaskWoken, int pxHigherPriorityTaskWoken_Depth, BaseType_t cmock_to_return);
#define xTimerPendFunctionCallFromISR_ReturnThruPtr_pvParameter1(pvParameter1) xTimerPendFunctionCallFromISR_CMockReturnMemThruPtr_pvParameter1(__LINE__, pvParameter1, sizeof(void))
#define xTimerPendFunctionCallFromISR_ReturnArrayThruPtr_pvParameter1(pvParameter1, cmock_len) xTimerPendFunctionCallFromISR_CMockReturnMemThruPtr_pvParameter1(__LINE__, pvParameter1, cmock_len * sizeof(*pvParameter1))
#define xTimerPendFunctionCallFromISR_ReturnMemThruPtr_pvParameter1(pvParameter1, cmock_size) xTimerPendFunctionCallFromISR_CMockReturnMemThruPtr_pvParameter1(__LINE__, pvParameter1, cmock_size)
void xTimerPendFunctionCallFromISR_CMockReturnMemThruPtr_pvParameter1(UNITY_LINE_TYPE cmock_line, void* pvParameter1, size_t cmock_size);
#define xTimerPendFunctionCallFromISR_ReturnThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken) xTimerPendFunctionCallFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, sizeof(BaseType_t))
#define xTimerPendFunctionCallFromISR_ReturnArrayThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken, cmock_len) xTimerPendFunctionCallFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, cmock_len * sizeof(*pxHigherPriorityTaskWoken))
#define xTimerPendFunctionCallFromISR_ReturnMemThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken, cmock_size) xTimerPendFunctionCallFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, cmock_size)
void xTimerPendFunctionCallFromISR_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(UNITY_LINE_TYPE cmock_line, BaseType_t* pxHigherPriorityTaskWoken, size_t cmock_size);
#define xTimerPendFunctionCallFromISR_IgnoreArg_xFunctionToPend() xTimerPendFunctionCallFromISR_CMockIgnoreArg_xFunctionToPend(__LINE__)
void xTimerPendFunctionCallFromISR_CMockIgnoreArg_xFunctionToPend(UNITY_LINE_TYPE cmock_line);
#define xTimerPendFunctionCallFromISR_IgnoreArg_pvParameter1() xTimerPendFunctionCallFromISR_CMockIgnoreArg_pvParameter1(__LINE__)
void xTimerPendFunctionCallFromISR_CMockIgnoreArg_pvParameter1(UNITY_LINE_TYPE cmock_line);
#define xTimerPendFunctionCallFromISR_IgnoreArg_ulParameter2() xTimerPendFunctionCallFromISR_CMockIgnoreArg_ulParameter2(__LINE__)
void xTimerPendFunctionCallFromISR_CMockIgnoreArg_ulParameter2(UNITY_LINE_TYPE cmock_line);
#define xTimerPendFunctionCallFromISR_IgnoreArg_pxHigherPriorityTaskWoken() xTimerPendFunctionCallFromISR_CMockIgnoreArg_pxHigherPriorityTaskWoken(__LINE__)
void xTimerPendFunctionCallFromISR_CMockIgnoreArg_pxHigherPriorityTaskWoken(UNITY_LINE_TYPE cmock_line);
#define xTimerPendFunctionCall_IgnoreAndReturn(cmock_retval) xTimerPendFunctionCall_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTimerPendFunctionCall_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTimerPendFunctionCall_StopIgnore() xTimerPendFunctionCall_CMockStopIgnore()
void xTimerPendFunctionCall_CMockStopIgnore(void);
#define xTimerPendFunctionCall_ExpectAndReturn(xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait, cmock_retval) xTimerPendFunctionCall_CMockExpectAndReturn(__LINE__, xFunctionToPend, pvParameter1, ulParameter2, xTicksToWait, cmock_retval)
void xTimerPendFunctionCall_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, PendedFunction_t xFunctionToPend, void* pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTimerPendFunctionCall_CALLBACK)(PendedFunction_t xFunctionToPend, void* pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait, int cmock_num_calls);
void xTimerPendFunctionCall_AddCallback(CMOCK_xTimerPendFunctionCall_CALLBACK Callback);
void xTimerPendFunctionCall_Stub(CMOCK_xTimerPendFunctionCall_CALLBACK Callback);
#define xTimerPendFunctionCall_StubWithCallback xTimerPendFunctionCall_Stub
#define xTimerPendFunctionCall_ExpectWithArrayAndReturn(xFunctionToPend, pvParameter1, pvParameter1_Depth, ulParameter2, xTicksToWait, cmock_retval) xTimerPendFunctionCall_CMockExpectWithArrayAndReturn(__LINE__, xFunctionToPend, pvParameter1, pvParameter1_Depth, ulParameter2, xTicksToWait, cmock_retval)
void xTimerPendFunctionCall_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, PendedFunction_t xFunctionToPend, void* pvParameter1, int pvParameter1_Depth, uint32_t ulParameter2, TickType_t xTicksToWait, BaseType_t cmock_to_return);
#define xTimerPendFunctionCall_ReturnThruPtr_pvParameter1(pvParameter1) xTimerPendFunctionCall_CMockReturnMemThruPtr_pvParameter1(__LINE__, pvParameter1, sizeof(void))
#define xTimerPendFunctionCall_ReturnArrayThruPtr_pvParameter1(pvParameter1, cmock_len) xTimerPendFunctionCall_CMockReturnMemThruPtr_pvParameter1(__LINE__, pvParameter1, cmock_len * sizeof(*pvParameter1))
#define xTimerPendFunctionCall_ReturnMemThruPtr_pvParameter1(pvParameter1, cmock_size) xTimerPendFunctionCall_CMockReturnMemThruPtr_pvParameter1(__LINE__, pvParameter1, cmock_size)
void xTimerPendFunctionCall_CMockReturnMemThruPtr_pvParameter1(UNITY_LINE_TYPE cmock_line, void* pvParameter1, size_t cmock_size);
#define xTimerPendFunctionCall_IgnoreArg_xFunctionToPend() xTimerPendFunctionCall_CMockIgnoreArg_xFunctionToPend(__LINE__)
void xTimerPendFunctionCall_CMockIgnoreArg_xFunctionToPend(UNITY_LINE_TYPE cmock_line);
#define xTimerPendFunctionCall_IgnoreArg_pvParameter1() xTimerPendFunctionCall_CMockIgnoreArg_pvParameter1(__LINE__)
void xTimerPendFunctionCall_CMockIgnoreArg_pvParameter1(UNITY_LINE_TYPE cmock_line);
#define xTimerPendFunctionCall_IgnoreArg_ulParameter2() xTimerPendFunctionCall_CMockIgnoreArg_ulParameter2(__LINE__)
void xTimerPendFunctionCall_CMockIgnoreArg_ulParameter2(UNITY_LINE_TYPE cmock_line);
#define xTimerPendFunctionCall_IgnoreArg_xTicksToWait() xTimerPendFunctionCall_CMockIgnoreArg_xTicksToWait(__LINE__)
void xTimerPendFunctionCall_CMockIgnoreArg_xTicksToWait(UNITY_LINE_TYPE cmock_line);
#define pcTimerGetName_IgnoreAndReturn(cmock_retval) pcTimerGetName_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void pcTimerGetName_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define pcTimerGetName_StopIgnore() pcTimerGetName_CMockStopIgnore()
void pcTimerGetName_CMockStopIgnore(void);
#define pcTimerGetName_ExpectAndReturn(xTimer, cmock_retval) pcTimerGetName_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void pcTimerGetName_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, const char* cmock_to_return);
typedef const char* (* CMOCK_pcTimerGetName_CALLBACK)(TimerHandle_t xTimer, int cmock_num_calls);
void pcTimerGetName_AddCallback(CMOCK_pcTimerGetName_CALLBACK Callback);
void pcTimerGetName_Stub(CMOCK_pcTimerGetName_CALLBACK Callback);
#define pcTimerGetName_StubWithCallback pcTimerGetName_Stub
#define pcTimerGetName_IgnoreArg_xTimer() pcTimerGetName_CMockIgnoreArg_xTimer(__LINE__)
void pcTimerGetName_CMockIgnoreArg_xTimer(UNITY_LINE_TYPE cmock_line);
#define vTimerSetReloadMode_Ignore() vTimerSetReloadMode_CMockIgnore()
void vTimerSetReloadMode_CMockIgnore(void);
#define vTimerSetReloadMode_StopIgnore() vTimerSetReloadMode_CMockStopIgnore()
void vTimerSetReloadMode_CMockStopIgnore(void);
#define vTimerSetReloadMode_Expect(xTimer, uxAutoReload) vTimerSetReloadMode_CMockExpect(__LINE__, xTimer, uxAutoReload)
void vTimerSetReloadMode_CMockExpect(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, const UBaseType_t uxAutoReload);
typedef void (* CMOCK_vTimerSetReloadMode_CALLBACK)(TimerHandle_t xTimer, const UBaseType_t uxAutoReload, int cmock_num_calls);
void vTimerSetReloadMode_AddCallback(CMOCK_vTimerSetReloadMode_CALLBACK Callback);
void vTimerSetReloadMode_Stub(CMOCK_vTimerSetReloadMode_CALLBACK Callback);
#define vTimerSetReloadMode_StubWithCallback vTimerSetReloadMode_Stub
#define vTimerSetReloadMode_IgnoreArg_xTimer() vTimerSetReloadMode_CMockIgnoreArg_xTimer(__LINE__)
void vTimerSetReloadMode_CMockIgnoreArg_xTimer(UNITY_LINE_TYPE cmock_line);
#define vTimerSetReloadMode_IgnoreArg_uxAutoReload() vTimerSetReloadMode_CMockIgnoreArg_uxAutoReload(__LINE__)
void vTimerSetReloadMode_CMockIgnoreArg_uxAutoReload(UNITY_LINE_TYPE cmock_line);
#define uxTimerGetReloadMode_IgnoreAndReturn(cmock_retval) uxTimerGetReloadMode_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxTimerGetReloadMode_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTimerGetReloadMode_StopIgnore() uxTimerGetReloadMode_CMockStopIgnore()
void uxTimerGetReloadMode_CMockStopIgnore(void);
#define uxTimerGetReloadMode_ExpectAndReturn(xTimer, cmock_retval) uxTimerGetReloadMode_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void uxTimerGetReloadMode_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, UBaseType_t cmock_to_return);
typedef UBaseType_t (* CMOCK_uxTimerGetReloadMode_CALLBACK)(TimerHandle_t xTimer, int cmock_num_calls);
void uxTimerGetReloadMode_AddCallback(CMOCK_uxTimerGetReloadMode_CALLBACK Callback);
void uxTimerGetReloadMode_Stub(CMOCK_uxTimerGetReloadMode_CALLBACK Callback);
#define uxTimerGetReloadMode_StubWithCallback uxTimerGetReloadMode_Stub
#define uxTimerGetReloadMode_IgnoreArg_xTimer() uxTimerGetReloadMode_CMockIgnoreArg_xTimer(__LINE__)
void uxTimerGetReloadMode_CMockIgnoreArg_xTimer(UNITY_LINE_TYPE cmock_line);
#define xTimerGetPeriod_IgnoreAndReturn(cmock_retval) xTimerGetPeriod_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTimerGetPeriod_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define xTimerGetPeriod_StopIgnore() xTimerGetPeriod_CMockStopIgnore()
void xTimerGetPeriod_CMockStopIgnore(void);
#define xTimerGetPeriod_ExpectAndReturn(xTimer, cmock_retval) xTimerGetPeriod_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void xTimerGetPeriod_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, TickType_t cmock_to_return);
typedef TickType_t (* CMOCK_xTimerGetPeriod_CALLBACK)(TimerHandle_t xTimer, int cmock_num_calls);
void xTimerGetPeriod_AddCallback(CMOCK_xTimerGetPeriod_CALLBACK Callback);
void xTimerGetPeriod_Stub(CMOCK_xTimerGetPeriod_CALLBACK Callback);
#define xTimerGetPeriod_StubWithCallback xTimerGetPeriod_Stub
#define xTimerGetPeriod_IgnoreArg_xTimer() xTimerGetPeriod_CMockIgnoreArg_xTimer(__LINE__)
void xTimerGetPeriod_CMockIgnoreArg_xTimer(UNITY_LINE_TYPE cmock_line);
#define xTimerGetExpiryTime_IgnoreAndReturn(cmock_retval) xTimerGetExpiryTime_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTimerGetExpiryTime_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TickType_t cmock_to_return);
#define xTimerGetExpiryTime_StopIgnore() xTimerGetExpiryTime_CMockStopIgnore()
void xTimerGetExpiryTime_CMockStopIgnore(void);
#define xTimerGetExpiryTime_ExpectAndReturn(xTimer, cmock_retval) xTimerGetExpiryTime_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void xTimerGetExpiryTime_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, TickType_t cmock_to_return);
typedef TickType_t (* CMOCK_xTimerGetExpiryTime_CALLBACK)(TimerHandle_t xTimer, int cmock_num_calls);
void xTimerGetExpiryTime_AddCallback(CMOCK_xTimerGetExpiryTime_CALLBACK Callback);
void xTimerGetExpiryTime_Stub(CMOCK_xTimerGetExpiryTime_CALLBACK Callback);
#define xTimerGetExpiryTime_StubWithCallback xTimerGetExpiryTime_Stub
#define xTimerGetExpiryTime_IgnoreArg_xTimer() xTimerGetExpiryTime_CMockIgnoreArg_xTimer(__LINE__)
void xTimerGetExpiryTime_CMockIgnoreArg_xTimer(UNITY_LINE_TYPE cmock_line);
#define xTimerCreateTimerTask_IgnoreAndReturn(cmock_retval) xTimerCreateTimerTask_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTimerCreateTimerTask_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTimerCreateTimerTask_StopIgnore() xTimerCreateTimerTask_CMockStopIgnore()
void xTimerCreateTimerTask_CMockStopIgnore(void);
#define xTimerCreateTimerTask_ExpectAndReturn(cmock_retval) xTimerCreateTimerTask_CMockExpectAndReturn(__LINE__, cmock_retval)
void xTimerCreateTimerTask_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTimerCreateTimerTask_CALLBACK)(int cmock_num_calls);
void xTimerCreateTimerTask_AddCallback(CMOCK_xTimerCreateTimerTask_CALLBACK Callback);
void xTimerCreateTimerTask_Stub(CMOCK_xTimerCreateTimerTask_CALLBACK Callback);
#define xTimerCreateTimerTask_StubWithCallback xTimerCreateTimerTask_Stub
#define xTimerGenericCommand_IgnoreAndReturn(cmock_retval) xTimerGenericCommand_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void xTimerGenericCommand_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define xTimerGenericCommand_StopIgnore() xTimerGenericCommand_CMockStopIgnore()
void xTimerGenericCommand_CMockStopIgnore(void);
#define xTimerGenericCommand_ExpectAndReturn(xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait, cmock_retval) xTimerGenericCommand_CMockExpectAndReturn(__LINE__, xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait, cmock_retval)
void xTimerGenericCommand_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t* const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_xTimerGenericCommand_CALLBACK)(TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t* const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait, int cmock_num_calls);
void xTimerGenericCommand_AddCallback(CMOCK_xTimerGenericCommand_CALLBACK Callback);
void xTimerGenericCommand_Stub(CMOCK_xTimerGenericCommand_CALLBACK Callback);
#define xTimerGenericCommand_StubWithCallback xTimerGenericCommand_Stub
#define xTimerGenericCommand_ExpectWithArrayAndReturn(xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken_Depth, xTicksToWait, cmock_retval) xTimerGenericCommand_CMockExpectWithArrayAndReturn(__LINE__, xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken_Depth, xTicksToWait, cmock_retval)
void xTimerGenericCommand_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t* const pxHigherPriorityTaskWoken, int pxHigherPriorityTaskWoken_Depth, const TickType_t xTicksToWait, BaseType_t cmock_to_return);
#define xTimerGenericCommand_ReturnThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken) xTimerGenericCommand_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, sizeof(BaseType_t))
#define xTimerGenericCommand_ReturnArrayThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken, cmock_len) xTimerGenericCommand_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, cmock_len * sizeof(*pxHigherPriorityTaskWoken))
#define xTimerGenericCommand_ReturnMemThruPtr_pxHigherPriorityTaskWoken(pxHigherPriorityTaskWoken, cmock_size) xTimerGenericCommand_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(__LINE__, pxHigherPriorityTaskWoken, cmock_size)
void xTimerGenericCommand_CMockReturnMemThruPtr_pxHigherPriorityTaskWoken(UNITY_LINE_TYPE cmock_line, BaseType_t* pxHigherPriorityTaskWoken, size_t cmock_size);
#define xTimerGenericCommand_IgnoreArg_xTimer() xTimerGenericCommand_CMockIgnoreArg_xTimer(__LINE__)
void xTimerGenericCommand_CMockIgnoreArg_xTimer(UNITY_LINE_TYPE cmock_line);
#define xTimerGenericCommand_IgnoreArg_xCommandID() xTimerGenericCommand_CMockIgnoreArg_xCommandID(__LINE__)
void xTimerGenericCommand_CMockIgnoreArg_xCommandID(UNITY_LINE_TYPE cmock_line);
#define xTimerGenericCommand_IgnoreArg_xOptionalValue() xTimerGenericCommand_CMockIgnoreArg_xOptionalValue(__LINE__)
void xTimerGenericCommand_CMockIgnoreArg_xOptionalValue(UNITY_LINE_TYPE cmock_line);
#define xTimerGenericCommand_IgnoreArg_pxHigherPriorityTaskWoken() xTimerGenericCommand_CMockIgnoreArg_pxHigherPriorityTaskWoken(__LINE__)
void xTimerGenericCommand_CMockIgnoreArg_pxHigherPriorityTaskWoken(UNITY_LINE_TYPE cmock_line);
#define xTimerGenericCommand_IgnoreArg_xTicksToWait() xTimerGenericCommand_CMockIgnoreArg_xTicksToWait(__LINE__)
void xTimerGenericCommand_CMockIgnoreArg_xTicksToWait(UNITY_LINE_TYPE cmock_line);
#define vTimerSetTimerNumber_Ignore() vTimerSetTimerNumber_CMockIgnore()
void vTimerSetTimerNumber_CMockIgnore(void);
#define vTimerSetTimerNumber_StopIgnore() vTimerSetTimerNumber_CMockStopIgnore()
void vTimerSetTimerNumber_CMockStopIgnore(void);
#define vTimerSetTimerNumber_Expect(xTimer, uxTimerNumber) vTimerSetTimerNumber_CMockExpect(__LINE__, xTimer, uxTimerNumber)
void vTimerSetTimerNumber_CMockExpect(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, UBaseType_t uxTimerNumber);
typedef void (* CMOCK_vTimerSetTimerNumber_CALLBACK)(TimerHandle_t xTimer, UBaseType_t uxTimerNumber, int cmock_num_calls);
void vTimerSetTimerNumber_AddCallback(CMOCK_vTimerSetTimerNumber_CALLBACK Callback);
void vTimerSetTimerNumber_Stub(CMOCK_vTimerSetTimerNumber_CALLBACK Callback);
#define vTimerSetTimerNumber_StubWithCallback vTimerSetTimerNumber_Stub
#define vTimerSetTimerNumber_IgnoreArg_xTimer() vTimerSetTimerNumber_CMockIgnoreArg_xTimer(__LINE__)
void vTimerSetTimerNumber_CMockIgnoreArg_xTimer(UNITY_LINE_TYPE cmock_line);
#define vTimerSetTimerNumber_IgnoreArg_uxTimerNumber() vTimerSetTimerNumber_CMockIgnoreArg_uxTimerNumber(__LINE__)
void vTimerSetTimerNumber_CMockIgnoreArg_uxTimerNumber(UNITY_LINE_TYPE cmock_line);
#define uxTimerGetTimerNumber_IgnoreAndReturn(cmock_retval) uxTimerGetTimerNumber_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uxTimerGetTimerNumber_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, UBaseType_t cmock_to_return);
#define uxTimerGetTimerNumber_StopIgnore() uxTimerGetTimerNumber_CMockStopIgnore()
void uxTimerGetTimerNumber_CMockStopIgnore(void);
#define uxTimerGetTimerNumber_ExpectAndReturn(xTimer, cmock_retval) uxTimerGetTimerNumber_CMockExpectAndReturn(__LINE__, xTimer, cmock_retval)
void uxTimerGetTimerNumber_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, TimerHandle_t xTimer, UBaseType_t cmock_to_return);
typedef UBaseType_t (* CMOCK_uxTimerGetTimerNumber_CALLBACK)(TimerHandle_t xTimer, int cmock_num_calls);
void uxTimerGetTimerNumber_AddCallback(CMOCK_uxTimerGetTimerNumber_CALLBACK Callback);
void uxTimerGetTimerNumber_Stub(CMOCK_uxTimerGetTimerNumber_CALLBACK Callback);
#define uxTimerGetTimerNumber_StubWithCallback uxTimerGetTimerNumber_Stub
#define uxTimerGetTimerNumber_IgnoreArg_xTimer() uxTimerGetTimerNumber_CMockIgnoreArg_xTimer(__LINE__)
void uxTimerGetTimerNumber_CMockIgnoreArg_xTimer(UNITY_LINE_TYPE cmock_line);
#define vApplicationGetTimerTaskMemory_Ignore() vApplicationGetTimerTaskMemory_CMockIgnore()
void vApplicationGetTimerTaskMemory_CMockIgnore(void);
#define vApplicationGetTimerTaskMemory_StopIgnore() vApplicationGetTimerTaskMemory_CMockStopIgnore()
void vApplicationGetTimerTaskMemory_CMockStopIgnore(void);
#define vApplicationGetTimerTaskMemory_Expect(ppxTimerTaskTCBBuffer, ppxTimerTaskStackBuffer, pulTimerTaskStackSize) vApplicationGetTimerTaskMemory_CMockExpect(__LINE__, ppxTimerTaskTCBBuffer, ppxTimerTaskStackBuffer, pulTimerTaskStackSize)
void vApplicationGetTimerTaskMemory_CMockExpect(UNITY_LINE_TYPE cmock_line, StaticTask_t** ppxTimerTaskTCBBuffer, StackType_t** ppxTimerTaskStackBuffer, uint32_t* pulTimerTaskStackSize);
typedef void (* CMOCK_vApplicationGetTimerTaskMemory_CALLBACK)(StaticTask_t** ppxTimerTaskTCBBuffer, StackType_t** ppxTimerTaskStackBuffer, uint32_t* pulTimerTaskStackSize, int cmock_num_calls);
void vApplicationGetTimerTaskMemory_AddCallback(CMOCK_vApplicationGetTimerTaskMemory_CALLBACK Callback);
void vApplicationGetTimerTaskMemory_Stub(CMOCK_vApplicationGetTimerTaskMemory_CALLBACK Callback);
#define vApplicationGetTimerTaskMemory_StubWithCallback vApplicationGetTimerTaskMemory_Stub
#define vApplicationGetTimerTaskMemory_ExpectWithArray(ppxTimerTaskTCBBuffer, ppxTimerTaskTCBBuffer_Depth, ppxTimerTaskStackBuffer, ppxTimerTaskStackBuffer_Depth, pulTimerTaskStackSize, pulTimerTaskStackSize_Depth) vApplicationGetTimerTaskMemory_CMockExpectWithArray(__LINE__, ppxTimerTaskTCBBuffer, ppxTimerTaskTCBBuffer_Depth, ppxTimerTaskStackBuffer, ppxTimerTaskStackBuffer_Depth, pulTimerTaskStackSize, pulTimerTaskStackSize_Depth)
void vApplicationGetTimerTaskMemory_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, StaticTask_t** ppxTimerTaskTCBBuffer, int ppxTimerTaskTCBBuffer_Depth, StackType_t** ppxTimerTaskStackBuffer, int ppxTimerTaskStackBuffer_Depth, uint32_t* pulTimerTaskStackSize, int pulTimerTaskStackSize_Depth);
#define vApplicationGetTimerTaskMemory_ReturnThruPtr_ppxTimerTaskTCBBuffer(ppxTimerTaskTCBBuffer) vApplicationGetTimerTaskMemory_CMockReturnMemThruPtr_ppxTimerTaskTCBBuffer(__LINE__, ppxTimerTaskTCBBuffer, sizeof(StaticTask_t*))
#define vApplicationGetTimerTaskMemory_ReturnArrayThruPtr_ppxTimerTaskTCBBuffer(ppxTimerTaskTCBBuffer, cmock_len) vApplicationGetTimerTaskMemory_CMockReturnMemThruPtr_ppxTimerTaskTCBBuffer(__LINE__, ppxTimerTaskTCBBuffer, cmock_len * sizeof(*ppxTimerTaskTCBBuffer))
#define vApplicationGetTimerTaskMemory_ReturnMemThruPtr_ppxTimerTaskTCBBuffer(ppxTimerTaskTCBBuffer, cmock_size) vApplicationGetTimerTaskMemory_CMockReturnMemThruPtr_ppxTimerTaskTCBBuffer(__LINE__, ppxTimerTaskTCBBuffer, cmock_size)
void vApplicationGetTimerTaskMemory_CMockReturnMemThruPtr_ppxTimerTaskTCBBuffer(UNITY_LINE_TYPE cmock_line, StaticTask_t** ppxTimerTaskTCBBuffer, size_t cmock_size);
#define vApplicationGetTimerTaskMemory_ReturnThruPtr_ppxTimerTaskStackBuffer(ppxTimerTaskStackBuffer) vApplicationGetTimerTaskMemory_CMockReturnMemThruPtr_ppxTimerTaskStackBuffer(__LINE__, ppxTimerTaskStackBuffer, sizeof(StackType_t*))
#define vApplicationGetTimerTaskMemory_ReturnArrayThruPtr_ppxTimerTaskStackBuffer(ppxTimerTaskStackBuffer, cmock_len) vApplicationGetTimerTaskMemory_CMockReturnMemThruPtr_ppxTimerTaskStackBuffer(__LINE__, ppxTimerTaskStackBuffer, cmock_len * sizeof(*ppxTimerTaskStackBuffer))
#define vApplicationGetTimerTaskMemory_ReturnMemThruPtr_ppxTimerTaskStackBuffer(ppxTimerTaskStackBuffer, cmock_size) vApplicationGetTimerTaskMemory_CMockReturnMemThruPtr_ppxTimerTaskStackBuffer(__LINE__, ppxTimerTaskStackBuffer, cmock_size)
void vApplicationGetTimerTaskMemory_CMockReturnMemThruPtr_ppxTimerTaskStackBuffer(UNITY_LINE_TYPE cmock_line, StackType_t** ppxTimerTaskStackBuffer, size_t cmock_size);
#define vApplicationGetTimerTaskMemory_ReturnThruPtr_pulTimerTaskStackSize(pulTimerTaskStackSize) vApplicationGetTimerTaskMemory_CMockReturnMemThruPtr_pulTimerTaskStackSize(__LINE__, pulTimerTaskStackSize, sizeof(uint32_t))
#define vApplicationGetTimerTaskMemory_ReturnArrayThruPtr_pulTimerTaskStackSize(pulTimerTaskStackSize, cmock_len) vApplicationGetTimerTaskMemory_CMockReturnMemThruPtr_pulTimerTaskStackSize(__LINE__, pulTimerTaskStackSize, cmock_len * sizeof(*pulTimerTaskStackSize))
#define vApplicationGetTimerTaskMemory_ReturnMemThruPtr_pulTimerTaskStackSize(pulTimerTaskStackSize, cmock_size) vApplicationGetTimerTaskMemory_CMockReturnMemThruPtr_pulTimerTaskStackSize(__LINE__, pulTimerTaskStackSize, cmock_size)
void vApplicationGetTimerTaskMemory_CMockReturnMemThruPtr_pulTimerTaskStackSize(UNITY_LINE_TYPE cmock_line, uint32_t* pulTimerTaskStackSize, size_t cmock_size);
#define vApplicationGetTimerTaskMemory_IgnoreArg_ppxTimerTaskTCBBuffer() vApplicationGetTimerTaskMemory_CMockIgnoreArg_ppxTimerTaskTCBBuffer(__LINE__)
void vApplicationGetTimerTaskMemory_CMockIgnoreArg_ppxTimerTaskTCBBuffer(UNITY_LINE_TYPE cmock_line);
#define vApplicationGetTimerTaskMemory_IgnoreArg_ppxTimerTaskStackBuffer() vApplicationGetTimerTaskMemory_CMockIgnoreArg_ppxTimerTaskStackBuffer(__LINE__)
void vApplicationGetTimerTaskMemory_CMockIgnoreArg_ppxTimerTaskStackBuffer(UNITY_LINE_TYPE cmock_line);
#define vApplicationGetTimerTaskMemory_IgnoreArg_pulTimerTaskStackSize() vApplicationGetTimerTaskMemory_CMockIgnoreArg_pulTimerTaskStackSize(__LINE__)
void vApplicationGetTimerTaskMemory_CMockIgnoreArg_pulTimerTaskStackSize(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
