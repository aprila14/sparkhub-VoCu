#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_SEMAPHORE_H
#define _MOCK_SEMAPHORE_H

#include "unity.h"
#include "semaphore.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_semaphore_Init(void);
void mock_semaphore_Destroy(void);
void mock_semaphore_Verify(void);




#define osi_sem_new_IgnoreAndReturn(cmock_retval) osi_sem_new_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osi_sem_new_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define osi_sem_new_StopIgnore() osi_sem_new_CMockStopIgnore()
void osi_sem_new_CMockStopIgnore(void);
#define osi_sem_new_ExpectAndReturn(sem, max_count, init_count, cmock_retval) osi_sem_new_CMockExpectAndReturn(__LINE__, sem, max_count, init_count, cmock_retval)
void osi_sem_new_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osi_sem_t* sem, uint32_t max_count, uint32_t init_count, int cmock_to_return);
typedef int (* CMOCK_osi_sem_new_CALLBACK)(osi_sem_t* sem, uint32_t max_count, uint32_t init_count, int cmock_num_calls);
void osi_sem_new_AddCallback(CMOCK_osi_sem_new_CALLBACK Callback);
void osi_sem_new_Stub(CMOCK_osi_sem_new_CALLBACK Callback);
#define osi_sem_new_StubWithCallback osi_sem_new_Stub
#define osi_sem_new_ExpectWithArrayAndReturn(sem, sem_Depth, max_count, init_count, cmock_retval) osi_sem_new_CMockExpectWithArrayAndReturn(__LINE__, sem, sem_Depth, max_count, init_count, cmock_retval)
void osi_sem_new_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, osi_sem_t* sem, int sem_Depth, uint32_t max_count, uint32_t init_count, int cmock_to_return);
#define osi_sem_new_ReturnThruPtr_sem(sem) osi_sem_new_CMockReturnMemThruPtr_sem(__LINE__, sem, sizeof(osi_sem_t))
#define osi_sem_new_ReturnArrayThruPtr_sem(sem, cmock_len) osi_sem_new_CMockReturnMemThruPtr_sem(__LINE__, sem, cmock_len * sizeof(*sem))
#define osi_sem_new_ReturnMemThruPtr_sem(sem, cmock_size) osi_sem_new_CMockReturnMemThruPtr_sem(__LINE__, sem, cmock_size)
void osi_sem_new_CMockReturnMemThruPtr_sem(UNITY_LINE_TYPE cmock_line, osi_sem_t* sem, size_t cmock_size);
#define osi_sem_new_IgnoreArg_sem() osi_sem_new_CMockIgnoreArg_sem(__LINE__)
void osi_sem_new_CMockIgnoreArg_sem(UNITY_LINE_TYPE cmock_line);
#define osi_sem_new_IgnoreArg_max_count() osi_sem_new_CMockIgnoreArg_max_count(__LINE__)
void osi_sem_new_CMockIgnoreArg_max_count(UNITY_LINE_TYPE cmock_line);
#define osi_sem_new_IgnoreArg_init_count() osi_sem_new_CMockIgnoreArg_init_count(__LINE__)
void osi_sem_new_CMockIgnoreArg_init_count(UNITY_LINE_TYPE cmock_line);
#define osi_sem_free_IgnoreAndReturn(cmock_retval) osi_sem_free_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osi_sem_free_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define osi_sem_free_StopIgnore() osi_sem_free_CMockStopIgnore()
void osi_sem_free_CMockStopIgnore(void);
#define osi_sem_free_ExpectAndReturn(sem, cmock_retval) osi_sem_free_CMockExpectAndReturn(__LINE__, sem, cmock_retval)
void osi_sem_free_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osi_sem_t* sem, int cmock_to_return);
typedef int (* CMOCK_osi_sem_free_CALLBACK)(osi_sem_t* sem, int cmock_num_calls);
void osi_sem_free_AddCallback(CMOCK_osi_sem_free_CALLBACK Callback);
void osi_sem_free_Stub(CMOCK_osi_sem_free_CALLBACK Callback);
#define osi_sem_free_StubWithCallback osi_sem_free_Stub
#define osi_sem_free_ExpectWithArrayAndReturn(sem, sem_Depth, cmock_retval) osi_sem_free_CMockExpectWithArrayAndReturn(__LINE__, sem, sem_Depth, cmock_retval)
void osi_sem_free_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, osi_sem_t* sem, int sem_Depth, int cmock_to_return);
#define osi_sem_free_ReturnThruPtr_sem(sem) osi_sem_free_CMockReturnMemThruPtr_sem(__LINE__, sem, sizeof(osi_sem_t))
#define osi_sem_free_ReturnArrayThruPtr_sem(sem, cmock_len) osi_sem_free_CMockReturnMemThruPtr_sem(__LINE__, sem, cmock_len * sizeof(*sem))
#define osi_sem_free_ReturnMemThruPtr_sem(sem, cmock_size) osi_sem_free_CMockReturnMemThruPtr_sem(__LINE__, sem, cmock_size)
void osi_sem_free_CMockReturnMemThruPtr_sem(UNITY_LINE_TYPE cmock_line, osi_sem_t* sem, size_t cmock_size);
#define osi_sem_free_IgnoreArg_sem() osi_sem_free_CMockIgnoreArg_sem(__LINE__)
void osi_sem_free_CMockIgnoreArg_sem(UNITY_LINE_TYPE cmock_line);
#define osi_sem_take_IgnoreAndReturn(cmock_retval) osi_sem_take_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void osi_sem_take_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define osi_sem_take_StopIgnore() osi_sem_take_CMockStopIgnore()
void osi_sem_take_CMockStopIgnore(void);
#define osi_sem_take_ExpectAndReturn(sem, timeout, cmock_retval) osi_sem_take_CMockExpectAndReturn(__LINE__, sem, timeout, cmock_retval)
void osi_sem_take_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, osi_sem_t* sem, uint32_t timeout, int cmock_to_return);
typedef int (* CMOCK_osi_sem_take_CALLBACK)(osi_sem_t* sem, uint32_t timeout, int cmock_num_calls);
void osi_sem_take_AddCallback(CMOCK_osi_sem_take_CALLBACK Callback);
void osi_sem_take_Stub(CMOCK_osi_sem_take_CALLBACK Callback);
#define osi_sem_take_StubWithCallback osi_sem_take_Stub
#define osi_sem_take_ExpectWithArrayAndReturn(sem, sem_Depth, timeout, cmock_retval) osi_sem_take_CMockExpectWithArrayAndReturn(__LINE__, sem, sem_Depth, timeout, cmock_retval)
void osi_sem_take_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, osi_sem_t* sem, int sem_Depth, uint32_t timeout, int cmock_to_return);
#define osi_sem_take_ReturnThruPtr_sem(sem) osi_sem_take_CMockReturnMemThruPtr_sem(__LINE__, sem, sizeof(osi_sem_t))
#define osi_sem_take_ReturnArrayThruPtr_sem(sem, cmock_len) osi_sem_take_CMockReturnMemThruPtr_sem(__LINE__, sem, cmock_len * sizeof(*sem))
#define osi_sem_take_ReturnMemThruPtr_sem(sem, cmock_size) osi_sem_take_CMockReturnMemThruPtr_sem(__LINE__, sem, cmock_size)
void osi_sem_take_CMockReturnMemThruPtr_sem(UNITY_LINE_TYPE cmock_line, osi_sem_t* sem, size_t cmock_size);
#define osi_sem_take_IgnoreArg_sem() osi_sem_take_CMockIgnoreArg_sem(__LINE__)
void osi_sem_take_CMockIgnoreArg_sem(UNITY_LINE_TYPE cmock_line);
#define osi_sem_take_IgnoreArg_timeout() osi_sem_take_CMockIgnoreArg_timeout(__LINE__)
void osi_sem_take_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define osi_sem_give_Ignore() osi_sem_give_CMockIgnore()
void osi_sem_give_CMockIgnore(void);
#define osi_sem_give_StopIgnore() osi_sem_give_CMockStopIgnore()
void osi_sem_give_CMockStopIgnore(void);
#define osi_sem_give_Expect(sem) osi_sem_give_CMockExpect(__LINE__, sem)
void osi_sem_give_CMockExpect(UNITY_LINE_TYPE cmock_line, osi_sem_t* sem);
typedef void (* CMOCK_osi_sem_give_CALLBACK)(osi_sem_t* sem, int cmock_num_calls);
void osi_sem_give_AddCallback(CMOCK_osi_sem_give_CALLBACK Callback);
void osi_sem_give_Stub(CMOCK_osi_sem_give_CALLBACK Callback);
#define osi_sem_give_StubWithCallback osi_sem_give_Stub
#define osi_sem_give_ExpectWithArray(sem, sem_Depth) osi_sem_give_CMockExpectWithArray(__LINE__, sem, sem_Depth)
void osi_sem_give_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, osi_sem_t* sem, int sem_Depth);
#define osi_sem_give_ReturnThruPtr_sem(sem) osi_sem_give_CMockReturnMemThruPtr_sem(__LINE__, sem, sizeof(osi_sem_t))
#define osi_sem_give_ReturnArrayThruPtr_sem(sem, cmock_len) osi_sem_give_CMockReturnMemThruPtr_sem(__LINE__, sem, cmock_len * sizeof(*sem))
#define osi_sem_give_ReturnMemThruPtr_sem(sem, cmock_size) osi_sem_give_CMockReturnMemThruPtr_sem(__LINE__, sem, cmock_size)
void osi_sem_give_CMockReturnMemThruPtr_sem(UNITY_LINE_TYPE cmock_line, osi_sem_t* sem, size_t cmock_size);
#define osi_sem_give_IgnoreArg_sem() osi_sem_give_CMockIgnoreArg_sem(__LINE__)
void osi_sem_give_CMockIgnoreArg_sem(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
