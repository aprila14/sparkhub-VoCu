#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_ESP_EVENT_H
#define _MOCK_ESP_EVENT_H

#include "unity.h"
#include "esp_event.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_esp_event_Init(void);
void mock_esp_event_Destroy(void);
void mock_esp_event_Verify(void);




#define esp_event_loop_create_IgnoreAndReturn(cmock_retval) esp_event_loop_create_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_loop_create_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_loop_create_StopIgnore() esp_event_loop_create_CMockStopIgnore()
void esp_event_loop_create_CMockStopIgnore(void);
#define esp_event_loop_create_ExpectAndReturn(event_loop_args, event_loop, cmock_retval) esp_event_loop_create_CMockExpectAndReturn(__LINE__, event_loop_args, event_loop, cmock_retval)
void esp_event_loop_create_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const esp_event_loop_args_t* event_loop_args, esp_event_loop_handle_t* event_loop, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_loop_create_CALLBACK)(const esp_event_loop_args_t* event_loop_args, esp_event_loop_handle_t* event_loop, int cmock_num_calls);
void esp_event_loop_create_AddCallback(CMOCK_esp_event_loop_create_CALLBACK Callback);
void esp_event_loop_create_Stub(CMOCK_esp_event_loop_create_CALLBACK Callback);
#define esp_event_loop_create_StubWithCallback esp_event_loop_create_Stub
#define esp_event_loop_create_ExpectWithArrayAndReturn(event_loop_args, event_loop_args_Depth, event_loop, event_loop_Depth, cmock_retval) esp_event_loop_create_CMockExpectWithArrayAndReturn(__LINE__, event_loop_args, event_loop_args_Depth, event_loop, event_loop_Depth, cmock_retval)
void esp_event_loop_create_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const esp_event_loop_args_t* event_loop_args, int event_loop_args_Depth, esp_event_loop_handle_t* event_loop, int event_loop_Depth, esp_err_t cmock_to_return);
#define esp_event_loop_create_ReturnThruPtr_event_loop(event_loop) esp_event_loop_create_CMockReturnMemThruPtr_event_loop(__LINE__, event_loop, sizeof(esp_event_loop_handle_t))
#define esp_event_loop_create_ReturnArrayThruPtr_event_loop(event_loop, cmock_len) esp_event_loop_create_CMockReturnMemThruPtr_event_loop(__LINE__, event_loop, cmock_len * sizeof(*event_loop))
#define esp_event_loop_create_ReturnMemThruPtr_event_loop(event_loop, cmock_size) esp_event_loop_create_CMockReturnMemThruPtr_event_loop(__LINE__, event_loop, cmock_size)
void esp_event_loop_create_CMockReturnMemThruPtr_event_loop(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t* event_loop, size_t cmock_size);
#define esp_event_loop_create_IgnoreArg_event_loop_args() esp_event_loop_create_CMockIgnoreArg_event_loop_args(__LINE__)
void esp_event_loop_create_CMockIgnoreArg_event_loop_args(UNITY_LINE_TYPE cmock_line);
#define esp_event_loop_create_IgnoreArg_event_loop() esp_event_loop_create_CMockIgnoreArg_event_loop(__LINE__)
void esp_event_loop_create_CMockIgnoreArg_event_loop(UNITY_LINE_TYPE cmock_line);
#define esp_event_loop_delete_IgnoreAndReturn(cmock_retval) esp_event_loop_delete_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_loop_delete_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_loop_delete_StopIgnore() esp_event_loop_delete_CMockStopIgnore()
void esp_event_loop_delete_CMockStopIgnore(void);
#define esp_event_loop_delete_ExpectAndReturn(event_loop, cmock_retval) esp_event_loop_delete_CMockExpectAndReturn(__LINE__, event_loop, cmock_retval)
void esp_event_loop_delete_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t event_loop, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_loop_delete_CALLBACK)(esp_event_loop_handle_t event_loop, int cmock_num_calls);
void esp_event_loop_delete_AddCallback(CMOCK_esp_event_loop_delete_CALLBACK Callback);
void esp_event_loop_delete_Stub(CMOCK_esp_event_loop_delete_CALLBACK Callback);
#define esp_event_loop_delete_StubWithCallback esp_event_loop_delete_Stub
#define esp_event_loop_delete_IgnoreArg_event_loop() esp_event_loop_delete_CMockIgnoreArg_event_loop(__LINE__)
void esp_event_loop_delete_CMockIgnoreArg_event_loop(UNITY_LINE_TYPE cmock_line);
#define esp_event_loop_create_default_IgnoreAndReturn(cmock_retval) esp_event_loop_create_default_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_loop_create_default_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_loop_create_default_StopIgnore() esp_event_loop_create_default_CMockStopIgnore()
void esp_event_loop_create_default_CMockStopIgnore(void);
#define esp_event_loop_create_default_ExpectAndReturn(cmock_retval) esp_event_loop_create_default_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_event_loop_create_default_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_loop_create_default_CALLBACK)(int cmock_num_calls);
void esp_event_loop_create_default_AddCallback(CMOCK_esp_event_loop_create_default_CALLBACK Callback);
void esp_event_loop_create_default_Stub(CMOCK_esp_event_loop_create_default_CALLBACK Callback);
#define esp_event_loop_create_default_StubWithCallback esp_event_loop_create_default_Stub
#define esp_event_loop_delete_default_IgnoreAndReturn(cmock_retval) esp_event_loop_delete_default_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_loop_delete_default_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_loop_delete_default_StopIgnore() esp_event_loop_delete_default_CMockStopIgnore()
void esp_event_loop_delete_default_CMockStopIgnore(void);
#define esp_event_loop_delete_default_ExpectAndReturn(cmock_retval) esp_event_loop_delete_default_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_event_loop_delete_default_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_loop_delete_default_CALLBACK)(int cmock_num_calls);
void esp_event_loop_delete_default_AddCallback(CMOCK_esp_event_loop_delete_default_CALLBACK Callback);
void esp_event_loop_delete_default_Stub(CMOCK_esp_event_loop_delete_default_CALLBACK Callback);
#define esp_event_loop_delete_default_StubWithCallback esp_event_loop_delete_default_Stub
#define esp_event_loop_run_IgnoreAndReturn(cmock_retval) esp_event_loop_run_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_loop_run_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_loop_run_StopIgnore() esp_event_loop_run_CMockStopIgnore()
void esp_event_loop_run_CMockStopIgnore(void);
#define esp_event_loop_run_ExpectAndReturn(event_loop, ticks_to_run, cmock_retval) esp_event_loop_run_CMockExpectAndReturn(__LINE__, event_loop, ticks_to_run, cmock_retval)
void esp_event_loop_run_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t event_loop, TickType_t ticks_to_run, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_loop_run_CALLBACK)(esp_event_loop_handle_t event_loop, TickType_t ticks_to_run, int cmock_num_calls);
void esp_event_loop_run_AddCallback(CMOCK_esp_event_loop_run_CALLBACK Callback);
void esp_event_loop_run_Stub(CMOCK_esp_event_loop_run_CALLBACK Callback);
#define esp_event_loop_run_StubWithCallback esp_event_loop_run_Stub
#define esp_event_loop_run_IgnoreArg_event_loop() esp_event_loop_run_CMockIgnoreArg_event_loop(__LINE__)
void esp_event_loop_run_CMockIgnoreArg_event_loop(UNITY_LINE_TYPE cmock_line);
#define esp_event_loop_run_IgnoreArg_ticks_to_run() esp_event_loop_run_CMockIgnoreArg_ticks_to_run(__LINE__)
void esp_event_loop_run_CMockIgnoreArg_ticks_to_run(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_register_IgnoreAndReturn(cmock_retval) esp_event_handler_register_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_handler_register_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_handler_register_StopIgnore() esp_event_handler_register_CMockStopIgnore()
void esp_event_handler_register_CMockStopIgnore(void);
#define esp_event_handler_register_ExpectAndReturn(event_base, event_id, event_handler, event_handler_arg, cmock_retval) esp_event_handler_register_CMockExpectAndReturn(__LINE__, event_base, event_id, event_handler, event_handler_arg, cmock_retval)
void esp_event_handler_register_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, void* event_handler_arg, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_handler_register_CALLBACK)(esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, void* event_handler_arg, int cmock_num_calls);
void esp_event_handler_register_AddCallback(CMOCK_esp_event_handler_register_CALLBACK Callback);
void esp_event_handler_register_Stub(CMOCK_esp_event_handler_register_CALLBACK Callback);
#define esp_event_handler_register_StubWithCallback esp_event_handler_register_Stub
#define esp_event_handler_register_ExpectWithArrayAndReturn(event_base, event_id, event_handler, event_handler_arg, event_handler_arg_Depth, cmock_retval) esp_event_handler_register_CMockExpectWithArrayAndReturn(__LINE__, event_base, event_id, event_handler, event_handler_arg, event_handler_arg_Depth, cmock_retval)
void esp_event_handler_register_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, void* event_handler_arg, int event_handler_arg_Depth, esp_err_t cmock_to_return);
#define esp_event_handler_register_ReturnThruPtr_event_handler_arg(event_handler_arg) esp_event_handler_register_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, sizeof(void))
#define esp_event_handler_register_ReturnArrayThruPtr_event_handler_arg(event_handler_arg, cmock_len) esp_event_handler_register_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, cmock_len * sizeof(*event_handler_arg))
#define esp_event_handler_register_ReturnMemThruPtr_event_handler_arg(event_handler_arg, cmock_size) esp_event_handler_register_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, cmock_size)
void esp_event_handler_register_CMockReturnMemThruPtr_event_handler_arg(UNITY_LINE_TYPE cmock_line, void* event_handler_arg, size_t cmock_size);
#define esp_event_handler_register_IgnoreArg_event_base() esp_event_handler_register_CMockIgnoreArg_event_base(__LINE__)
void esp_event_handler_register_CMockIgnoreArg_event_base(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_register_IgnoreArg_event_id() esp_event_handler_register_CMockIgnoreArg_event_id(__LINE__)
void esp_event_handler_register_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_register_IgnoreArg_event_handler() esp_event_handler_register_CMockIgnoreArg_event_handler(__LINE__)
void esp_event_handler_register_CMockIgnoreArg_event_handler(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_register_IgnoreArg_event_handler_arg() esp_event_handler_register_CMockIgnoreArg_event_handler_arg(__LINE__)
void esp_event_handler_register_CMockIgnoreArg_event_handler_arg(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_register_with_IgnoreAndReturn(cmock_retval) esp_event_handler_register_with_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_handler_register_with_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_handler_register_with_StopIgnore() esp_event_handler_register_with_CMockStopIgnore()
void esp_event_handler_register_with_CMockStopIgnore(void);
#define esp_event_handler_register_with_ExpectAndReturn(event_loop, event_base, event_id, event_handler, event_handler_arg, cmock_retval) esp_event_handler_register_with_CMockExpectAndReturn(__LINE__, event_loop, event_base, event_id, event_handler, event_handler_arg, cmock_retval)
void esp_event_handler_register_with_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, void* event_handler_arg, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_handler_register_with_CALLBACK)(esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, void* event_handler_arg, int cmock_num_calls);
void esp_event_handler_register_with_AddCallback(CMOCK_esp_event_handler_register_with_CALLBACK Callback);
void esp_event_handler_register_with_Stub(CMOCK_esp_event_handler_register_with_CALLBACK Callback);
#define esp_event_handler_register_with_StubWithCallback esp_event_handler_register_with_Stub
#define esp_event_handler_register_with_ExpectWithArrayAndReturn(event_loop, event_base, event_id, event_handler, event_handler_arg, event_handler_arg_Depth, cmock_retval) esp_event_handler_register_with_CMockExpectWithArrayAndReturn(__LINE__, event_loop, event_base, event_id, event_handler, event_handler_arg, event_handler_arg_Depth, cmock_retval)
void esp_event_handler_register_with_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, void* event_handler_arg, int event_handler_arg_Depth, esp_err_t cmock_to_return);
#define esp_event_handler_register_with_ReturnThruPtr_event_handler_arg(event_handler_arg) esp_event_handler_register_with_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, sizeof(void))
#define esp_event_handler_register_with_ReturnArrayThruPtr_event_handler_arg(event_handler_arg, cmock_len) esp_event_handler_register_with_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, cmock_len * sizeof(*event_handler_arg))
#define esp_event_handler_register_with_ReturnMemThruPtr_event_handler_arg(event_handler_arg, cmock_size) esp_event_handler_register_with_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, cmock_size)
void esp_event_handler_register_with_CMockReturnMemThruPtr_event_handler_arg(UNITY_LINE_TYPE cmock_line, void* event_handler_arg, size_t cmock_size);
#define esp_event_handler_register_with_IgnoreArg_event_loop() esp_event_handler_register_with_CMockIgnoreArg_event_loop(__LINE__)
void esp_event_handler_register_with_CMockIgnoreArg_event_loop(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_register_with_IgnoreArg_event_base() esp_event_handler_register_with_CMockIgnoreArg_event_base(__LINE__)
void esp_event_handler_register_with_CMockIgnoreArg_event_base(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_register_with_IgnoreArg_event_id() esp_event_handler_register_with_CMockIgnoreArg_event_id(__LINE__)
void esp_event_handler_register_with_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_register_with_IgnoreArg_event_handler() esp_event_handler_register_with_CMockIgnoreArg_event_handler(__LINE__)
void esp_event_handler_register_with_CMockIgnoreArg_event_handler(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_register_with_IgnoreArg_event_handler_arg() esp_event_handler_register_with_CMockIgnoreArg_event_handler_arg(__LINE__)
void esp_event_handler_register_with_CMockIgnoreArg_event_handler_arg(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_register_with_IgnoreAndReturn(cmock_retval) esp_event_handler_instance_register_with_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_handler_instance_register_with_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_handler_instance_register_with_StopIgnore() esp_event_handler_instance_register_with_CMockStopIgnore()
void esp_event_handler_instance_register_with_CMockStopIgnore(void);
#define esp_event_handler_instance_register_with_ExpectAndReturn(event_loop, event_base, event_id, event_handler, event_handler_arg, instance, cmock_retval) esp_event_handler_instance_register_with_CMockExpectAndReturn(__LINE__, event_loop, event_base, event_id, event_handler, event_handler_arg, instance, cmock_retval)
void esp_event_handler_instance_register_with_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, void* event_handler_arg, esp_event_handler_instance_t* instance, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_handler_instance_register_with_CALLBACK)(esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, void* event_handler_arg, esp_event_handler_instance_t* instance, int cmock_num_calls);
void esp_event_handler_instance_register_with_AddCallback(CMOCK_esp_event_handler_instance_register_with_CALLBACK Callback);
void esp_event_handler_instance_register_with_Stub(CMOCK_esp_event_handler_instance_register_with_CALLBACK Callback);
#define esp_event_handler_instance_register_with_StubWithCallback esp_event_handler_instance_register_with_Stub
#define esp_event_handler_instance_register_with_ExpectWithArrayAndReturn(event_loop, event_base, event_id, event_handler, event_handler_arg, event_handler_arg_Depth, instance, instance_Depth, cmock_retval) esp_event_handler_instance_register_with_CMockExpectWithArrayAndReturn(__LINE__, event_loop, event_base, event_id, event_handler, event_handler_arg, event_handler_arg_Depth, instance, instance_Depth, cmock_retval)
void esp_event_handler_instance_register_with_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, void* event_handler_arg, int event_handler_arg_Depth, esp_event_handler_instance_t* instance, int instance_Depth, esp_err_t cmock_to_return);
#define esp_event_handler_instance_register_with_ReturnThruPtr_event_handler_arg(event_handler_arg) esp_event_handler_instance_register_with_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, sizeof(void))
#define esp_event_handler_instance_register_with_ReturnArrayThruPtr_event_handler_arg(event_handler_arg, cmock_len) esp_event_handler_instance_register_with_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, cmock_len * sizeof(*event_handler_arg))
#define esp_event_handler_instance_register_with_ReturnMemThruPtr_event_handler_arg(event_handler_arg, cmock_size) esp_event_handler_instance_register_with_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, cmock_size)
void esp_event_handler_instance_register_with_CMockReturnMemThruPtr_event_handler_arg(UNITY_LINE_TYPE cmock_line, void* event_handler_arg, size_t cmock_size);
#define esp_event_handler_instance_register_with_ReturnThruPtr_instance(instance) esp_event_handler_instance_register_with_CMockReturnMemThruPtr_instance(__LINE__, instance, sizeof(esp_event_handler_instance_t))
#define esp_event_handler_instance_register_with_ReturnArrayThruPtr_instance(instance, cmock_len) esp_event_handler_instance_register_with_CMockReturnMemThruPtr_instance(__LINE__, instance, cmock_len * sizeof(*instance))
#define esp_event_handler_instance_register_with_ReturnMemThruPtr_instance(instance, cmock_size) esp_event_handler_instance_register_with_CMockReturnMemThruPtr_instance(__LINE__, instance, cmock_size)
void esp_event_handler_instance_register_with_CMockReturnMemThruPtr_instance(UNITY_LINE_TYPE cmock_line, esp_event_handler_instance_t* instance, size_t cmock_size);
#define esp_event_handler_instance_register_with_IgnoreArg_event_loop() esp_event_handler_instance_register_with_CMockIgnoreArg_event_loop(__LINE__)
void esp_event_handler_instance_register_with_CMockIgnoreArg_event_loop(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_register_with_IgnoreArg_event_base() esp_event_handler_instance_register_with_CMockIgnoreArg_event_base(__LINE__)
void esp_event_handler_instance_register_with_CMockIgnoreArg_event_base(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_register_with_IgnoreArg_event_id() esp_event_handler_instance_register_with_CMockIgnoreArg_event_id(__LINE__)
void esp_event_handler_instance_register_with_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_register_with_IgnoreArg_event_handler() esp_event_handler_instance_register_with_CMockIgnoreArg_event_handler(__LINE__)
void esp_event_handler_instance_register_with_CMockIgnoreArg_event_handler(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_register_with_IgnoreArg_event_handler_arg() esp_event_handler_instance_register_with_CMockIgnoreArg_event_handler_arg(__LINE__)
void esp_event_handler_instance_register_with_CMockIgnoreArg_event_handler_arg(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_register_with_IgnoreArg_instance() esp_event_handler_instance_register_with_CMockIgnoreArg_instance(__LINE__)
void esp_event_handler_instance_register_with_CMockIgnoreArg_instance(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_register_IgnoreAndReturn(cmock_retval) esp_event_handler_instance_register_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_handler_instance_register_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_handler_instance_register_StopIgnore() esp_event_handler_instance_register_CMockStopIgnore()
void esp_event_handler_instance_register_CMockStopIgnore(void);
#define esp_event_handler_instance_register_ExpectAndReturn(event_base, event_id, event_handler, event_handler_arg, instance, cmock_retval) esp_event_handler_instance_register_CMockExpectAndReturn(__LINE__, event_base, event_id, event_handler, event_handler_arg, instance, cmock_retval)
void esp_event_handler_instance_register_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, void* event_handler_arg, esp_event_handler_instance_t* instance, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_handler_instance_register_CALLBACK)(esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, void* event_handler_arg, esp_event_handler_instance_t* instance, int cmock_num_calls);
void esp_event_handler_instance_register_AddCallback(CMOCK_esp_event_handler_instance_register_CALLBACK Callback);
void esp_event_handler_instance_register_Stub(CMOCK_esp_event_handler_instance_register_CALLBACK Callback);
#define esp_event_handler_instance_register_StubWithCallback esp_event_handler_instance_register_Stub
#define esp_event_handler_instance_register_ExpectWithArrayAndReturn(event_base, event_id, event_handler, event_handler_arg, event_handler_arg_Depth, instance, instance_Depth, cmock_retval) esp_event_handler_instance_register_CMockExpectWithArrayAndReturn(__LINE__, event_base, event_id, event_handler, event_handler_arg, event_handler_arg_Depth, instance, instance_Depth, cmock_retval)
void esp_event_handler_instance_register_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, void* event_handler_arg, int event_handler_arg_Depth, esp_event_handler_instance_t* instance, int instance_Depth, esp_err_t cmock_to_return);
#define esp_event_handler_instance_register_ReturnThruPtr_event_handler_arg(event_handler_arg) esp_event_handler_instance_register_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, sizeof(void))
#define esp_event_handler_instance_register_ReturnArrayThruPtr_event_handler_arg(event_handler_arg, cmock_len) esp_event_handler_instance_register_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, cmock_len * sizeof(*event_handler_arg))
#define esp_event_handler_instance_register_ReturnMemThruPtr_event_handler_arg(event_handler_arg, cmock_size) esp_event_handler_instance_register_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, cmock_size)
void esp_event_handler_instance_register_CMockReturnMemThruPtr_event_handler_arg(UNITY_LINE_TYPE cmock_line, void* event_handler_arg, size_t cmock_size);
#define esp_event_handler_instance_register_ReturnThruPtr_instance(instance) esp_event_handler_instance_register_CMockReturnMemThruPtr_instance(__LINE__, instance, sizeof(esp_event_handler_instance_t))
#define esp_event_handler_instance_register_ReturnArrayThruPtr_instance(instance, cmock_len) esp_event_handler_instance_register_CMockReturnMemThruPtr_instance(__LINE__, instance, cmock_len * sizeof(*instance))
#define esp_event_handler_instance_register_ReturnMemThruPtr_instance(instance, cmock_size) esp_event_handler_instance_register_CMockReturnMemThruPtr_instance(__LINE__, instance, cmock_size)
void esp_event_handler_instance_register_CMockReturnMemThruPtr_instance(UNITY_LINE_TYPE cmock_line, esp_event_handler_instance_t* instance, size_t cmock_size);
#define esp_event_handler_instance_register_IgnoreArg_event_base() esp_event_handler_instance_register_CMockIgnoreArg_event_base(__LINE__)
void esp_event_handler_instance_register_CMockIgnoreArg_event_base(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_register_IgnoreArg_event_id() esp_event_handler_instance_register_CMockIgnoreArg_event_id(__LINE__)
void esp_event_handler_instance_register_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_register_IgnoreArg_event_handler() esp_event_handler_instance_register_CMockIgnoreArg_event_handler(__LINE__)
void esp_event_handler_instance_register_CMockIgnoreArg_event_handler(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_register_IgnoreArg_event_handler_arg() esp_event_handler_instance_register_CMockIgnoreArg_event_handler_arg(__LINE__)
void esp_event_handler_instance_register_CMockIgnoreArg_event_handler_arg(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_register_IgnoreArg_instance() esp_event_handler_instance_register_CMockIgnoreArg_instance(__LINE__)
void esp_event_handler_instance_register_CMockIgnoreArg_instance(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_unregister_IgnoreAndReturn(cmock_retval) esp_event_handler_unregister_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_handler_unregister_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_handler_unregister_StopIgnore() esp_event_handler_unregister_CMockStopIgnore()
void esp_event_handler_unregister_CMockStopIgnore(void);
#define esp_event_handler_unregister_ExpectAndReturn(event_base, event_id, event_handler, cmock_retval) esp_event_handler_unregister_CMockExpectAndReturn(__LINE__, event_base, event_id, event_handler, cmock_retval)
void esp_event_handler_unregister_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_handler_unregister_CALLBACK)(esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, int cmock_num_calls);
void esp_event_handler_unregister_AddCallback(CMOCK_esp_event_handler_unregister_CALLBACK Callback);
void esp_event_handler_unregister_Stub(CMOCK_esp_event_handler_unregister_CALLBACK Callback);
#define esp_event_handler_unregister_StubWithCallback esp_event_handler_unregister_Stub
#define esp_event_handler_unregister_IgnoreArg_event_base() esp_event_handler_unregister_CMockIgnoreArg_event_base(__LINE__)
void esp_event_handler_unregister_CMockIgnoreArg_event_base(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_unregister_IgnoreArg_event_id() esp_event_handler_unregister_CMockIgnoreArg_event_id(__LINE__)
void esp_event_handler_unregister_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_unregister_IgnoreArg_event_handler() esp_event_handler_unregister_CMockIgnoreArg_event_handler(__LINE__)
void esp_event_handler_unregister_CMockIgnoreArg_event_handler(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_unregister_with_IgnoreAndReturn(cmock_retval) esp_event_handler_unregister_with_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_handler_unregister_with_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_handler_unregister_with_StopIgnore() esp_event_handler_unregister_with_CMockStopIgnore()
void esp_event_handler_unregister_with_CMockStopIgnore(void);
#define esp_event_handler_unregister_with_ExpectAndReturn(event_loop, event_base, event_id, event_handler, cmock_retval) esp_event_handler_unregister_with_CMockExpectAndReturn(__LINE__, event_loop, event_base, event_id, event_handler, cmock_retval)
void esp_event_handler_unregister_with_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_handler_unregister_with_CALLBACK)(esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, esp_event_handler_t event_handler, int cmock_num_calls);
void esp_event_handler_unregister_with_AddCallback(CMOCK_esp_event_handler_unregister_with_CALLBACK Callback);
void esp_event_handler_unregister_with_Stub(CMOCK_esp_event_handler_unregister_with_CALLBACK Callback);
#define esp_event_handler_unregister_with_StubWithCallback esp_event_handler_unregister_with_Stub
#define esp_event_handler_unregister_with_IgnoreArg_event_loop() esp_event_handler_unregister_with_CMockIgnoreArg_event_loop(__LINE__)
void esp_event_handler_unregister_with_CMockIgnoreArg_event_loop(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_unregister_with_IgnoreArg_event_base() esp_event_handler_unregister_with_CMockIgnoreArg_event_base(__LINE__)
void esp_event_handler_unregister_with_CMockIgnoreArg_event_base(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_unregister_with_IgnoreArg_event_id() esp_event_handler_unregister_with_CMockIgnoreArg_event_id(__LINE__)
void esp_event_handler_unregister_with_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_unregister_with_IgnoreArg_event_handler() esp_event_handler_unregister_with_CMockIgnoreArg_event_handler(__LINE__)
void esp_event_handler_unregister_with_CMockIgnoreArg_event_handler(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_unregister_with_IgnoreAndReturn(cmock_retval) esp_event_handler_instance_unregister_with_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_handler_instance_unregister_with_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_handler_instance_unregister_with_StopIgnore() esp_event_handler_instance_unregister_with_CMockStopIgnore()
void esp_event_handler_instance_unregister_with_CMockStopIgnore(void);
#define esp_event_handler_instance_unregister_with_ExpectAndReturn(event_loop, event_base, event_id, instance, cmock_retval) esp_event_handler_instance_unregister_with_CMockExpectAndReturn(__LINE__, event_loop, event_base, event_id, instance, cmock_retval)
void esp_event_handler_instance_unregister_with_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, esp_event_handler_instance_t instance, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_handler_instance_unregister_with_CALLBACK)(esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, esp_event_handler_instance_t instance, int cmock_num_calls);
void esp_event_handler_instance_unregister_with_AddCallback(CMOCK_esp_event_handler_instance_unregister_with_CALLBACK Callback);
void esp_event_handler_instance_unregister_with_Stub(CMOCK_esp_event_handler_instance_unregister_with_CALLBACK Callback);
#define esp_event_handler_instance_unregister_with_StubWithCallback esp_event_handler_instance_unregister_with_Stub
#define esp_event_handler_instance_unregister_with_IgnoreArg_event_loop() esp_event_handler_instance_unregister_with_CMockIgnoreArg_event_loop(__LINE__)
void esp_event_handler_instance_unregister_with_CMockIgnoreArg_event_loop(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_unregister_with_IgnoreArg_event_base() esp_event_handler_instance_unregister_with_CMockIgnoreArg_event_base(__LINE__)
void esp_event_handler_instance_unregister_with_CMockIgnoreArg_event_base(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_unregister_with_IgnoreArg_event_id() esp_event_handler_instance_unregister_with_CMockIgnoreArg_event_id(__LINE__)
void esp_event_handler_instance_unregister_with_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_unregister_with_IgnoreArg_instance() esp_event_handler_instance_unregister_with_CMockIgnoreArg_instance(__LINE__)
void esp_event_handler_instance_unregister_with_CMockIgnoreArg_instance(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_unregister_IgnoreAndReturn(cmock_retval) esp_event_handler_instance_unregister_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_handler_instance_unregister_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_handler_instance_unregister_StopIgnore() esp_event_handler_instance_unregister_CMockStopIgnore()
void esp_event_handler_instance_unregister_CMockStopIgnore(void);
#define esp_event_handler_instance_unregister_ExpectAndReturn(event_base, event_id, instance, cmock_retval) esp_event_handler_instance_unregister_CMockExpectAndReturn(__LINE__, event_base, event_id, instance, cmock_retval)
void esp_event_handler_instance_unregister_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_base_t event_base, int32_t event_id, esp_event_handler_instance_t instance, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_handler_instance_unregister_CALLBACK)(esp_event_base_t event_base, int32_t event_id, esp_event_handler_instance_t instance, int cmock_num_calls);
void esp_event_handler_instance_unregister_AddCallback(CMOCK_esp_event_handler_instance_unregister_CALLBACK Callback);
void esp_event_handler_instance_unregister_Stub(CMOCK_esp_event_handler_instance_unregister_CALLBACK Callback);
#define esp_event_handler_instance_unregister_StubWithCallback esp_event_handler_instance_unregister_Stub
#define esp_event_handler_instance_unregister_IgnoreArg_event_base() esp_event_handler_instance_unregister_CMockIgnoreArg_event_base(__LINE__)
void esp_event_handler_instance_unregister_CMockIgnoreArg_event_base(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_unregister_IgnoreArg_event_id() esp_event_handler_instance_unregister_CMockIgnoreArg_event_id(__LINE__)
void esp_event_handler_instance_unregister_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_event_handler_instance_unregister_IgnoreArg_instance() esp_event_handler_instance_unregister_CMockIgnoreArg_instance(__LINE__)
void esp_event_handler_instance_unregister_CMockIgnoreArg_instance(UNITY_LINE_TYPE cmock_line);
#define esp_event_post_IgnoreAndReturn(cmock_retval) esp_event_post_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_post_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_post_StopIgnore() esp_event_post_CMockStopIgnore()
void esp_event_post_CMockStopIgnore(void);
#define esp_event_post_ExpectAndReturn(event_base, event_id, event_data, event_data_size, ticks_to_wait, cmock_retval) esp_event_post_CMockExpectAndReturn(__LINE__, event_base, event_id, event_data, event_data_size, ticks_to_wait, cmock_retval)
void esp_event_post_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_base_t event_base, int32_t event_id, void* event_data, size_t event_data_size, TickType_t ticks_to_wait, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_post_CALLBACK)(esp_event_base_t event_base, int32_t event_id, void* event_data, size_t event_data_size, TickType_t ticks_to_wait, int cmock_num_calls);
void esp_event_post_AddCallback(CMOCK_esp_event_post_CALLBACK Callback);
void esp_event_post_Stub(CMOCK_esp_event_post_CALLBACK Callback);
#define esp_event_post_StubWithCallback esp_event_post_Stub
#define esp_event_post_ExpectWithArrayAndReturn(event_base, event_id, event_data, event_data_Depth, event_data_size, ticks_to_wait, cmock_retval) esp_event_post_CMockExpectWithArrayAndReturn(__LINE__, event_base, event_id, event_data, event_data_Depth, event_data_size, ticks_to_wait, cmock_retval)
void esp_event_post_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_base_t event_base, int32_t event_id, void* event_data, int event_data_Depth, size_t event_data_size, TickType_t ticks_to_wait, esp_err_t cmock_to_return);
#define esp_event_post_ReturnThruPtr_event_data(event_data) esp_event_post_CMockReturnMemThruPtr_event_data(__LINE__, event_data, sizeof(void))
#define esp_event_post_ReturnArrayThruPtr_event_data(event_data, cmock_len) esp_event_post_CMockReturnMemThruPtr_event_data(__LINE__, event_data, cmock_len * sizeof(*event_data))
#define esp_event_post_ReturnMemThruPtr_event_data(event_data, cmock_size) esp_event_post_CMockReturnMemThruPtr_event_data(__LINE__, event_data, cmock_size)
void esp_event_post_CMockReturnMemThruPtr_event_data(UNITY_LINE_TYPE cmock_line, void* event_data, size_t cmock_size);
#define esp_event_post_IgnoreArg_event_base() esp_event_post_CMockIgnoreArg_event_base(__LINE__)
void esp_event_post_CMockIgnoreArg_event_base(UNITY_LINE_TYPE cmock_line);
#define esp_event_post_IgnoreArg_event_id() esp_event_post_CMockIgnoreArg_event_id(__LINE__)
void esp_event_post_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_event_post_IgnoreArg_event_data() esp_event_post_CMockIgnoreArg_event_data(__LINE__)
void esp_event_post_CMockIgnoreArg_event_data(UNITY_LINE_TYPE cmock_line);
#define esp_event_post_IgnoreArg_event_data_size() esp_event_post_CMockIgnoreArg_event_data_size(__LINE__)
void esp_event_post_CMockIgnoreArg_event_data_size(UNITY_LINE_TYPE cmock_line);
#define esp_event_post_IgnoreArg_ticks_to_wait() esp_event_post_CMockIgnoreArg_ticks_to_wait(__LINE__)
void esp_event_post_CMockIgnoreArg_ticks_to_wait(UNITY_LINE_TYPE cmock_line);
#define esp_event_post_to_IgnoreAndReturn(cmock_retval) esp_event_post_to_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_post_to_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_post_to_StopIgnore() esp_event_post_to_CMockStopIgnore()
void esp_event_post_to_CMockStopIgnore(void);
#define esp_event_post_to_ExpectAndReturn(event_loop, event_base, event_id, event_data, event_data_size, ticks_to_wait, cmock_retval) esp_event_post_to_CMockExpectAndReturn(__LINE__, event_loop, event_base, event_id, event_data, event_data_size, ticks_to_wait, cmock_retval)
void esp_event_post_to_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, void* event_data, size_t event_data_size, TickType_t ticks_to_wait, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_post_to_CALLBACK)(esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, void* event_data, size_t event_data_size, TickType_t ticks_to_wait, int cmock_num_calls);
void esp_event_post_to_AddCallback(CMOCK_esp_event_post_to_CALLBACK Callback);
void esp_event_post_to_Stub(CMOCK_esp_event_post_to_CALLBACK Callback);
#define esp_event_post_to_StubWithCallback esp_event_post_to_Stub
#define esp_event_post_to_ExpectWithArrayAndReturn(event_loop, event_base, event_id, event_data, event_data_Depth, event_data_size, ticks_to_wait, cmock_retval) esp_event_post_to_CMockExpectWithArrayAndReturn(__LINE__, event_loop, event_base, event_id, event_data, event_data_Depth, event_data_size, ticks_to_wait, cmock_retval)
void esp_event_post_to_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, void* event_data, int event_data_Depth, size_t event_data_size, TickType_t ticks_to_wait, esp_err_t cmock_to_return);
#define esp_event_post_to_ReturnThruPtr_event_data(event_data) esp_event_post_to_CMockReturnMemThruPtr_event_data(__LINE__, event_data, sizeof(void))
#define esp_event_post_to_ReturnArrayThruPtr_event_data(event_data, cmock_len) esp_event_post_to_CMockReturnMemThruPtr_event_data(__LINE__, event_data, cmock_len * sizeof(*event_data))
#define esp_event_post_to_ReturnMemThruPtr_event_data(event_data, cmock_size) esp_event_post_to_CMockReturnMemThruPtr_event_data(__LINE__, event_data, cmock_size)
void esp_event_post_to_CMockReturnMemThruPtr_event_data(UNITY_LINE_TYPE cmock_line, void* event_data, size_t cmock_size);
#define esp_event_post_to_IgnoreArg_event_loop() esp_event_post_to_CMockIgnoreArg_event_loop(__LINE__)
void esp_event_post_to_CMockIgnoreArg_event_loop(UNITY_LINE_TYPE cmock_line);
#define esp_event_post_to_IgnoreArg_event_base() esp_event_post_to_CMockIgnoreArg_event_base(__LINE__)
void esp_event_post_to_CMockIgnoreArg_event_base(UNITY_LINE_TYPE cmock_line);
#define esp_event_post_to_IgnoreArg_event_id() esp_event_post_to_CMockIgnoreArg_event_id(__LINE__)
void esp_event_post_to_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_event_post_to_IgnoreArg_event_data() esp_event_post_to_CMockIgnoreArg_event_data(__LINE__)
void esp_event_post_to_CMockIgnoreArg_event_data(UNITY_LINE_TYPE cmock_line);
#define esp_event_post_to_IgnoreArg_event_data_size() esp_event_post_to_CMockIgnoreArg_event_data_size(__LINE__)
void esp_event_post_to_CMockIgnoreArg_event_data_size(UNITY_LINE_TYPE cmock_line);
#define esp_event_post_to_IgnoreArg_ticks_to_wait() esp_event_post_to_CMockIgnoreArg_ticks_to_wait(__LINE__)
void esp_event_post_to_CMockIgnoreArg_ticks_to_wait(UNITY_LINE_TYPE cmock_line);
#define esp_event_isr_post_IgnoreAndReturn(cmock_retval) esp_event_isr_post_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_isr_post_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_isr_post_StopIgnore() esp_event_isr_post_CMockStopIgnore()
void esp_event_isr_post_CMockStopIgnore(void);
#define esp_event_isr_post_ExpectAndReturn(event_base, event_id, event_data, event_data_size, task_unblocked, cmock_retval) esp_event_isr_post_CMockExpectAndReturn(__LINE__, event_base, event_id, event_data, event_data_size, task_unblocked, cmock_retval)
void esp_event_isr_post_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_base_t event_base, int32_t event_id, void* event_data, size_t event_data_size, BaseType_t* task_unblocked, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_isr_post_CALLBACK)(esp_event_base_t event_base, int32_t event_id, void* event_data, size_t event_data_size, BaseType_t* task_unblocked, int cmock_num_calls);
void esp_event_isr_post_AddCallback(CMOCK_esp_event_isr_post_CALLBACK Callback);
void esp_event_isr_post_Stub(CMOCK_esp_event_isr_post_CALLBACK Callback);
#define esp_event_isr_post_StubWithCallback esp_event_isr_post_Stub
#define esp_event_isr_post_ExpectWithArrayAndReturn(event_base, event_id, event_data, event_data_Depth, event_data_size, task_unblocked, task_unblocked_Depth, cmock_retval) esp_event_isr_post_CMockExpectWithArrayAndReturn(__LINE__, event_base, event_id, event_data, event_data_Depth, event_data_size, task_unblocked, task_unblocked_Depth, cmock_retval)
void esp_event_isr_post_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_base_t event_base, int32_t event_id, void* event_data, int event_data_Depth, size_t event_data_size, BaseType_t* task_unblocked, int task_unblocked_Depth, esp_err_t cmock_to_return);
#define esp_event_isr_post_ReturnThruPtr_event_data(event_data) esp_event_isr_post_CMockReturnMemThruPtr_event_data(__LINE__, event_data, sizeof(void))
#define esp_event_isr_post_ReturnArrayThruPtr_event_data(event_data, cmock_len) esp_event_isr_post_CMockReturnMemThruPtr_event_data(__LINE__, event_data, cmock_len * sizeof(*event_data))
#define esp_event_isr_post_ReturnMemThruPtr_event_data(event_data, cmock_size) esp_event_isr_post_CMockReturnMemThruPtr_event_data(__LINE__, event_data, cmock_size)
void esp_event_isr_post_CMockReturnMemThruPtr_event_data(UNITY_LINE_TYPE cmock_line, void* event_data, size_t cmock_size);
#define esp_event_isr_post_ReturnThruPtr_task_unblocked(task_unblocked) esp_event_isr_post_CMockReturnMemThruPtr_task_unblocked(__LINE__, task_unblocked, sizeof(BaseType_t))
#define esp_event_isr_post_ReturnArrayThruPtr_task_unblocked(task_unblocked, cmock_len) esp_event_isr_post_CMockReturnMemThruPtr_task_unblocked(__LINE__, task_unblocked, cmock_len * sizeof(*task_unblocked))
#define esp_event_isr_post_ReturnMemThruPtr_task_unblocked(task_unblocked, cmock_size) esp_event_isr_post_CMockReturnMemThruPtr_task_unblocked(__LINE__, task_unblocked, cmock_size)
void esp_event_isr_post_CMockReturnMemThruPtr_task_unblocked(UNITY_LINE_TYPE cmock_line, BaseType_t* task_unblocked, size_t cmock_size);
#define esp_event_isr_post_IgnoreArg_event_base() esp_event_isr_post_CMockIgnoreArg_event_base(__LINE__)
void esp_event_isr_post_CMockIgnoreArg_event_base(UNITY_LINE_TYPE cmock_line);
#define esp_event_isr_post_IgnoreArg_event_id() esp_event_isr_post_CMockIgnoreArg_event_id(__LINE__)
void esp_event_isr_post_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_event_isr_post_IgnoreArg_event_data() esp_event_isr_post_CMockIgnoreArg_event_data(__LINE__)
void esp_event_isr_post_CMockIgnoreArg_event_data(UNITY_LINE_TYPE cmock_line);
#define esp_event_isr_post_IgnoreArg_event_data_size() esp_event_isr_post_CMockIgnoreArg_event_data_size(__LINE__)
void esp_event_isr_post_CMockIgnoreArg_event_data_size(UNITY_LINE_TYPE cmock_line);
#define esp_event_isr_post_IgnoreArg_task_unblocked() esp_event_isr_post_CMockIgnoreArg_task_unblocked(__LINE__)
void esp_event_isr_post_CMockIgnoreArg_task_unblocked(UNITY_LINE_TYPE cmock_line);
#define esp_event_isr_post_to_IgnoreAndReturn(cmock_retval) esp_event_isr_post_to_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_isr_post_to_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_isr_post_to_StopIgnore() esp_event_isr_post_to_CMockStopIgnore()
void esp_event_isr_post_to_CMockStopIgnore(void);
#define esp_event_isr_post_to_ExpectAndReturn(event_loop, event_base, event_id, event_data, event_data_size, task_unblocked, cmock_retval) esp_event_isr_post_to_CMockExpectAndReturn(__LINE__, event_loop, event_base, event_id, event_data, event_data_size, task_unblocked, cmock_retval)
void esp_event_isr_post_to_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, void* event_data, size_t event_data_size, BaseType_t* task_unblocked, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_isr_post_to_CALLBACK)(esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, void* event_data, size_t event_data_size, BaseType_t* task_unblocked, int cmock_num_calls);
void esp_event_isr_post_to_AddCallback(CMOCK_esp_event_isr_post_to_CALLBACK Callback);
void esp_event_isr_post_to_Stub(CMOCK_esp_event_isr_post_to_CALLBACK Callback);
#define esp_event_isr_post_to_StubWithCallback esp_event_isr_post_to_Stub
#define esp_event_isr_post_to_ExpectWithArrayAndReturn(event_loop, event_base, event_id, event_data, event_data_Depth, event_data_size, task_unblocked, task_unblocked_Depth, cmock_retval) esp_event_isr_post_to_CMockExpectWithArrayAndReturn(__LINE__, event_loop, event_base, event_id, event_data, event_data_Depth, event_data_size, task_unblocked, task_unblocked_Depth, cmock_retval)
void esp_event_isr_post_to_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_event_loop_handle_t event_loop, esp_event_base_t event_base, int32_t event_id, void* event_data, int event_data_Depth, size_t event_data_size, BaseType_t* task_unblocked, int task_unblocked_Depth, esp_err_t cmock_to_return);
#define esp_event_isr_post_to_ReturnThruPtr_event_data(event_data) esp_event_isr_post_to_CMockReturnMemThruPtr_event_data(__LINE__, event_data, sizeof(void))
#define esp_event_isr_post_to_ReturnArrayThruPtr_event_data(event_data, cmock_len) esp_event_isr_post_to_CMockReturnMemThruPtr_event_data(__LINE__, event_data, cmock_len * sizeof(*event_data))
#define esp_event_isr_post_to_ReturnMemThruPtr_event_data(event_data, cmock_size) esp_event_isr_post_to_CMockReturnMemThruPtr_event_data(__LINE__, event_data, cmock_size)
void esp_event_isr_post_to_CMockReturnMemThruPtr_event_data(UNITY_LINE_TYPE cmock_line, void* event_data, size_t cmock_size);
#define esp_event_isr_post_to_ReturnThruPtr_task_unblocked(task_unblocked) esp_event_isr_post_to_CMockReturnMemThruPtr_task_unblocked(__LINE__, task_unblocked, sizeof(BaseType_t))
#define esp_event_isr_post_to_ReturnArrayThruPtr_task_unblocked(task_unblocked, cmock_len) esp_event_isr_post_to_CMockReturnMemThruPtr_task_unblocked(__LINE__, task_unblocked, cmock_len * sizeof(*task_unblocked))
#define esp_event_isr_post_to_ReturnMemThruPtr_task_unblocked(task_unblocked, cmock_size) esp_event_isr_post_to_CMockReturnMemThruPtr_task_unblocked(__LINE__, task_unblocked, cmock_size)
void esp_event_isr_post_to_CMockReturnMemThruPtr_task_unblocked(UNITY_LINE_TYPE cmock_line, BaseType_t* task_unblocked, size_t cmock_size);
#define esp_event_isr_post_to_IgnoreArg_event_loop() esp_event_isr_post_to_CMockIgnoreArg_event_loop(__LINE__)
void esp_event_isr_post_to_CMockIgnoreArg_event_loop(UNITY_LINE_TYPE cmock_line);
#define esp_event_isr_post_to_IgnoreArg_event_base() esp_event_isr_post_to_CMockIgnoreArg_event_base(__LINE__)
void esp_event_isr_post_to_CMockIgnoreArg_event_base(UNITY_LINE_TYPE cmock_line);
#define esp_event_isr_post_to_IgnoreArg_event_id() esp_event_isr_post_to_CMockIgnoreArg_event_id(__LINE__)
void esp_event_isr_post_to_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_event_isr_post_to_IgnoreArg_event_data() esp_event_isr_post_to_CMockIgnoreArg_event_data(__LINE__)
void esp_event_isr_post_to_CMockIgnoreArg_event_data(UNITY_LINE_TYPE cmock_line);
#define esp_event_isr_post_to_IgnoreArg_event_data_size() esp_event_isr_post_to_CMockIgnoreArg_event_data_size(__LINE__)
void esp_event_isr_post_to_CMockIgnoreArg_event_data_size(UNITY_LINE_TYPE cmock_line);
#define esp_event_isr_post_to_IgnoreArg_task_unblocked() esp_event_isr_post_to_CMockIgnoreArg_task_unblocked(__LINE__)
void esp_event_isr_post_to_CMockIgnoreArg_task_unblocked(UNITY_LINE_TYPE cmock_line);
#define esp_event_dump_IgnoreAndReturn(cmock_retval) esp_event_dump_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_event_dump_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_event_dump_StopIgnore() esp_event_dump_CMockStopIgnore()
void esp_event_dump_CMockStopIgnore(void);
#define esp_event_dump_ExpectAndReturn(file, cmock_retval) esp_event_dump_CMockExpectAndReturn(__LINE__, file, cmock_retval)
void esp_event_dump_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, FILE* file, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_event_dump_CALLBACK)(FILE* file, int cmock_num_calls);
void esp_event_dump_AddCallback(CMOCK_esp_event_dump_CALLBACK Callback);
void esp_event_dump_Stub(CMOCK_esp_event_dump_CALLBACK Callback);
#define esp_event_dump_StubWithCallback esp_event_dump_Stub
#define esp_event_dump_ExpectWithArrayAndReturn(file, file_Depth, cmock_retval) esp_event_dump_CMockExpectWithArrayAndReturn(__LINE__, file, file_Depth, cmock_retval)
void esp_event_dump_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, FILE* file, int file_Depth, esp_err_t cmock_to_return);
#define esp_event_dump_ReturnThruPtr_file(file) esp_event_dump_CMockReturnMemThruPtr_file(__LINE__, file, sizeof(FILE))
#define esp_event_dump_ReturnArrayThruPtr_file(file, cmock_len) esp_event_dump_CMockReturnMemThruPtr_file(__LINE__, file, cmock_len * sizeof(*file))
#define esp_event_dump_ReturnMemThruPtr_file(file, cmock_size) esp_event_dump_CMockReturnMemThruPtr_file(__LINE__, file, cmock_size)
void esp_event_dump_CMockReturnMemThruPtr_file(UNITY_LINE_TYPE cmock_line, FILE* file, size_t cmock_size);
#define esp_event_dump_IgnoreArg_file() esp_event_dump_CMockIgnoreArg_file(__LINE__)
void esp_event_dump_CMockIgnoreArg_file(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
