#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_ESP_LOG_H
#define _MOCK_ESP_LOG_H

#include "unity.h"
#include "esp_log.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_esp_log_Init(void);
void mock_esp_log_Destroy(void);
void mock_esp_log_Verify(void);




#define esp_log_level_set_Ignore() esp_log_level_set_CMockIgnore()
void esp_log_level_set_CMockIgnore(void);
#define esp_log_level_set_StopIgnore() esp_log_level_set_CMockStopIgnore()
void esp_log_level_set_CMockStopIgnore(void);
#define esp_log_level_set_Expect(tag, level) esp_log_level_set_CMockExpect(__LINE__, tag, level)
void esp_log_level_set_CMockExpect(UNITY_LINE_TYPE cmock_line, const char* tag, esp_log_level_t level);
typedef void (* CMOCK_esp_log_level_set_CALLBACK)(const char* tag, esp_log_level_t level, int cmock_num_calls);
void esp_log_level_set_AddCallback(CMOCK_esp_log_level_set_CALLBACK Callback);
void esp_log_level_set_Stub(CMOCK_esp_log_level_set_CALLBACK Callback);
#define esp_log_level_set_StubWithCallback esp_log_level_set_Stub
#define esp_log_level_set_IgnoreArg_tag() esp_log_level_set_CMockIgnoreArg_tag(__LINE__)
void esp_log_level_set_CMockIgnoreArg_tag(UNITY_LINE_TYPE cmock_line);
#define esp_log_level_set_IgnoreArg_level() esp_log_level_set_CMockIgnoreArg_level(__LINE__)
void esp_log_level_set_CMockIgnoreArg_level(UNITY_LINE_TYPE cmock_line);
#define esp_log_level_get_IgnoreAndReturn(cmock_retval) esp_log_level_get_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_log_level_get_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_log_level_t cmock_to_return);
#define esp_log_level_get_StopIgnore() esp_log_level_get_CMockStopIgnore()
void esp_log_level_get_CMockStopIgnore(void);
#define esp_log_level_get_ExpectAndReturn(tag, cmock_retval) esp_log_level_get_CMockExpectAndReturn(__LINE__, tag, cmock_retval)
void esp_log_level_get_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* tag, esp_log_level_t cmock_to_return);
typedef esp_log_level_t (* CMOCK_esp_log_level_get_CALLBACK)(const char* tag, int cmock_num_calls);
void esp_log_level_get_AddCallback(CMOCK_esp_log_level_get_CALLBACK Callback);
void esp_log_level_get_Stub(CMOCK_esp_log_level_get_CALLBACK Callback);
#define esp_log_level_get_StubWithCallback esp_log_level_get_Stub
#define esp_log_level_get_IgnoreArg_tag() esp_log_level_get_CMockIgnoreArg_tag(__LINE__)
void esp_log_level_get_CMockIgnoreArg_tag(UNITY_LINE_TYPE cmock_line);
#define esp_log_set_vprintf_IgnoreAndReturn(cmock_retval) esp_log_set_vprintf_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_log_set_vprintf_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, vprintf_like_t cmock_to_return);
#define esp_log_set_vprintf_StopIgnore() esp_log_set_vprintf_CMockStopIgnore()
void esp_log_set_vprintf_CMockStopIgnore(void);
#define esp_log_set_vprintf_ExpectAndReturn(func, cmock_retval) esp_log_set_vprintf_CMockExpectAndReturn(__LINE__, func, cmock_retval)
void esp_log_set_vprintf_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, vprintf_like_t func, vprintf_like_t cmock_to_return);
typedef vprintf_like_t (* CMOCK_esp_log_set_vprintf_CALLBACK)(vprintf_like_t func, int cmock_num_calls);
void esp_log_set_vprintf_AddCallback(CMOCK_esp_log_set_vprintf_CALLBACK Callback);
void esp_log_set_vprintf_Stub(CMOCK_esp_log_set_vprintf_CALLBACK Callback);
#define esp_log_set_vprintf_StubWithCallback esp_log_set_vprintf_Stub
#define esp_log_set_vprintf_IgnoreArg_func() esp_log_set_vprintf_CMockIgnoreArg_func(__LINE__)
void esp_log_set_vprintf_CMockIgnoreArg_func(UNITY_LINE_TYPE cmock_line);
#define esp_log_timestamp_IgnoreAndReturn(cmock_retval) esp_log_timestamp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_log_timestamp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define esp_log_timestamp_StopIgnore() esp_log_timestamp_CMockStopIgnore()
void esp_log_timestamp_CMockStopIgnore(void);
#define esp_log_timestamp_ExpectAndReturn(cmock_retval) esp_log_timestamp_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_log_timestamp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_esp_log_timestamp_CALLBACK)(int cmock_num_calls);
void esp_log_timestamp_AddCallback(CMOCK_esp_log_timestamp_CALLBACK Callback);
void esp_log_timestamp_Stub(CMOCK_esp_log_timestamp_CALLBACK Callback);
#define esp_log_timestamp_StubWithCallback esp_log_timestamp_Stub
#define esp_log_system_timestamp_IgnoreAndReturn(cmock_retval) esp_log_system_timestamp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_log_system_timestamp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define esp_log_system_timestamp_StopIgnore() esp_log_system_timestamp_CMockStopIgnore()
void esp_log_system_timestamp_CMockStopIgnore(void);
#define esp_log_system_timestamp_ExpectAndReturn(cmock_retval) esp_log_system_timestamp_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_log_system_timestamp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
typedef char* (* CMOCK_esp_log_system_timestamp_CALLBACK)(int cmock_num_calls);
void esp_log_system_timestamp_AddCallback(CMOCK_esp_log_system_timestamp_CALLBACK Callback);
void esp_log_system_timestamp_Stub(CMOCK_esp_log_system_timestamp_CALLBACK Callback);
#define esp_log_system_timestamp_StubWithCallback esp_log_system_timestamp_Stub
#define esp_log_early_timestamp_IgnoreAndReturn(cmock_retval) esp_log_early_timestamp_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_log_early_timestamp_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define esp_log_early_timestamp_StopIgnore() esp_log_early_timestamp_CMockStopIgnore()
void esp_log_early_timestamp_CMockStopIgnore(void);
#define esp_log_early_timestamp_ExpectAndReturn(cmock_retval) esp_log_early_timestamp_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_log_early_timestamp_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_esp_log_early_timestamp_CALLBACK)(int cmock_num_calls);
void esp_log_early_timestamp_AddCallback(CMOCK_esp_log_early_timestamp_CALLBACK Callback);
void esp_log_early_timestamp_Stub(CMOCK_esp_log_early_timestamp_CALLBACK Callback);
#define esp_log_early_timestamp_StubWithCallback esp_log_early_timestamp_Stub
#define esp_log_write_Ignore() esp_log_write_CMockIgnore()
void esp_log_write_CMockIgnore(void);
#define esp_log_write_StopIgnore() esp_log_write_CMockStopIgnore()
void esp_log_write_CMockStopIgnore(void);
#define esp_log_write_Expect(level, tag, format) esp_log_write_CMockExpect(__LINE__, level, tag, format)
void esp_log_write_CMockExpect(UNITY_LINE_TYPE cmock_line, esp_log_level_t level, const char* tag, const char* format);
typedef void (* CMOCK_esp_log_write_CALLBACK)(esp_log_level_t level, const char* tag, const char* format, int cmock_num_calls);
void esp_log_write_AddCallback(CMOCK_esp_log_write_CALLBACK Callback);
void esp_log_write_Stub(CMOCK_esp_log_write_CALLBACK Callback);
#define esp_log_write_StubWithCallback esp_log_write_Stub
#define esp_log_write_IgnoreArg_level() esp_log_write_CMockIgnoreArg_level(__LINE__)
void esp_log_write_CMockIgnoreArg_level(UNITY_LINE_TYPE cmock_line);
#define esp_log_write_IgnoreArg_tag() esp_log_write_CMockIgnoreArg_tag(__LINE__)
void esp_log_write_CMockIgnoreArg_tag(UNITY_LINE_TYPE cmock_line);
#define esp_log_write_IgnoreArg_format() esp_log_write_CMockIgnoreArg_format(__LINE__)
void esp_log_write_CMockIgnoreArg_format(UNITY_LINE_TYPE cmock_line);
#define esp_log_writev_Ignore() esp_log_writev_CMockIgnore()
void esp_log_writev_CMockIgnore(void);
#define esp_log_writev_StopIgnore() esp_log_writev_CMockStopIgnore()
void esp_log_writev_CMockStopIgnore(void);
#define esp_log_writev_Expect(level, tag, format, args) esp_log_writev_CMockExpect(__LINE__, level, tag, format, args)
void esp_log_writev_CMockExpect(UNITY_LINE_TYPE cmock_line, esp_log_level_t level, const char* tag, const char* format, va_list args);
typedef void (* CMOCK_esp_log_writev_CALLBACK)(esp_log_level_t level, const char* tag, const char* format, va_list args, int cmock_num_calls);
void esp_log_writev_AddCallback(CMOCK_esp_log_writev_CALLBACK Callback);
void esp_log_writev_Stub(CMOCK_esp_log_writev_CALLBACK Callback);
#define esp_log_writev_StubWithCallback esp_log_writev_Stub
#define esp_log_writev_IgnoreArg_level() esp_log_writev_CMockIgnoreArg_level(__LINE__)
void esp_log_writev_CMockIgnoreArg_level(UNITY_LINE_TYPE cmock_line);
#define esp_log_writev_IgnoreArg_tag() esp_log_writev_CMockIgnoreArg_tag(__LINE__)
void esp_log_writev_CMockIgnoreArg_tag(UNITY_LINE_TYPE cmock_line);
#define esp_log_writev_IgnoreArg_format() esp_log_writev_CMockIgnoreArg_format(__LINE__)
void esp_log_writev_CMockIgnoreArg_format(UNITY_LINE_TYPE cmock_line);
#define esp_log_writev_IgnoreArg_args() esp_log_writev_CMockIgnoreArg_args(__LINE__)
void esp_log_writev_CMockIgnoreArg_args(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
