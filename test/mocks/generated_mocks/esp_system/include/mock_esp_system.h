#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_ESP_SYSTEM_H
#define _MOCK_ESP_SYSTEM_H

#include "unity.h"
#include "esp_system.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_esp_system_Init(void);
void mock_esp_system_Destroy(void);
void mock_esp_system_Verify(void);




#define esp_register_shutdown_handler_IgnoreAndReturn(cmock_retval) esp_register_shutdown_handler_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_register_shutdown_handler_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_register_shutdown_handler_StopIgnore() esp_register_shutdown_handler_CMockStopIgnore()
void esp_register_shutdown_handler_CMockStopIgnore(void);
#define esp_register_shutdown_handler_ExpectAndReturn(handle, cmock_retval) esp_register_shutdown_handler_CMockExpectAndReturn(__LINE__, handle, cmock_retval)
void esp_register_shutdown_handler_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, shutdown_handler_t handle, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_register_shutdown_handler_CALLBACK)(shutdown_handler_t handle, int cmock_num_calls);
void esp_register_shutdown_handler_AddCallback(CMOCK_esp_register_shutdown_handler_CALLBACK Callback);
void esp_register_shutdown_handler_Stub(CMOCK_esp_register_shutdown_handler_CALLBACK Callback);
#define esp_register_shutdown_handler_StubWithCallback esp_register_shutdown_handler_Stub
#define esp_register_shutdown_handler_IgnoreArg_handle() esp_register_shutdown_handler_CMockIgnoreArg_handle(__LINE__)
void esp_register_shutdown_handler_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define esp_unregister_shutdown_handler_IgnoreAndReturn(cmock_retval) esp_unregister_shutdown_handler_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_unregister_shutdown_handler_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_unregister_shutdown_handler_StopIgnore() esp_unregister_shutdown_handler_CMockStopIgnore()
void esp_unregister_shutdown_handler_CMockStopIgnore(void);
#define esp_unregister_shutdown_handler_ExpectAndReturn(handle, cmock_retval) esp_unregister_shutdown_handler_CMockExpectAndReturn(__LINE__, handle, cmock_retval)
void esp_unregister_shutdown_handler_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, shutdown_handler_t handle, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_unregister_shutdown_handler_CALLBACK)(shutdown_handler_t handle, int cmock_num_calls);
void esp_unregister_shutdown_handler_AddCallback(CMOCK_esp_unregister_shutdown_handler_CALLBACK Callback);
void esp_unregister_shutdown_handler_Stub(CMOCK_esp_unregister_shutdown_handler_CALLBACK Callback);
#define esp_unregister_shutdown_handler_StubWithCallback esp_unregister_shutdown_handler_Stub
#define esp_unregister_shutdown_handler_IgnoreArg_handle() esp_unregister_shutdown_handler_CMockIgnoreArg_handle(__LINE__)
void esp_unregister_shutdown_handler_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define esp_restart_Ignore() esp_restart_CMockIgnore()
void esp_restart_CMockIgnore(void);
#define esp_restart_StopIgnore() esp_restart_CMockStopIgnore()
void esp_restart_CMockStopIgnore(void);
#define esp_restart_Expect() esp_restart_CMockExpect(__LINE__)
void esp_restart_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_esp_restart_CALLBACK)(int cmock_num_calls);
void esp_restart_AddCallback(CMOCK_esp_restart_CALLBACK Callback);
void esp_restart_Stub(CMOCK_esp_restart_CALLBACK Callback);
#define esp_restart_StubWithCallback esp_restart_Stub
#define esp_reset_reason_IgnoreAndReturn(cmock_retval) esp_reset_reason_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_reset_reason_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_reset_reason_t cmock_to_return);
#define esp_reset_reason_StopIgnore() esp_reset_reason_CMockStopIgnore()
void esp_reset_reason_CMockStopIgnore(void);
#define esp_reset_reason_ExpectAndReturn(cmock_retval) esp_reset_reason_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_reset_reason_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_reset_reason_t cmock_to_return);
typedef esp_reset_reason_t (* CMOCK_esp_reset_reason_CALLBACK)(int cmock_num_calls);
void esp_reset_reason_AddCallback(CMOCK_esp_reset_reason_CALLBACK Callback);
void esp_reset_reason_Stub(CMOCK_esp_reset_reason_CALLBACK Callback);
#define esp_reset_reason_StubWithCallback esp_reset_reason_Stub
#define esp_get_free_heap_size_IgnoreAndReturn(cmock_retval) esp_get_free_heap_size_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_get_free_heap_size_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define esp_get_free_heap_size_StopIgnore() esp_get_free_heap_size_CMockStopIgnore()
void esp_get_free_heap_size_CMockStopIgnore(void);
#define esp_get_free_heap_size_ExpectAndReturn(cmock_retval) esp_get_free_heap_size_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_get_free_heap_size_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_esp_get_free_heap_size_CALLBACK)(int cmock_num_calls);
void esp_get_free_heap_size_AddCallback(CMOCK_esp_get_free_heap_size_CALLBACK Callback);
void esp_get_free_heap_size_Stub(CMOCK_esp_get_free_heap_size_CALLBACK Callback);
#define esp_get_free_heap_size_StubWithCallback esp_get_free_heap_size_Stub
#define esp_get_free_internal_heap_size_IgnoreAndReturn(cmock_retval) esp_get_free_internal_heap_size_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_get_free_internal_heap_size_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define esp_get_free_internal_heap_size_StopIgnore() esp_get_free_internal_heap_size_CMockStopIgnore()
void esp_get_free_internal_heap_size_CMockStopIgnore(void);
#define esp_get_free_internal_heap_size_ExpectAndReturn(cmock_retval) esp_get_free_internal_heap_size_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_get_free_internal_heap_size_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_esp_get_free_internal_heap_size_CALLBACK)(int cmock_num_calls);
void esp_get_free_internal_heap_size_AddCallback(CMOCK_esp_get_free_internal_heap_size_CALLBACK Callback);
void esp_get_free_internal_heap_size_Stub(CMOCK_esp_get_free_internal_heap_size_CALLBACK Callback);
#define esp_get_free_internal_heap_size_StubWithCallback esp_get_free_internal_heap_size_Stub
#define esp_get_minimum_free_heap_size_IgnoreAndReturn(cmock_retval) esp_get_minimum_free_heap_size_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_get_minimum_free_heap_size_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define esp_get_minimum_free_heap_size_StopIgnore() esp_get_minimum_free_heap_size_CMockStopIgnore()
void esp_get_minimum_free_heap_size_CMockStopIgnore(void);
#define esp_get_minimum_free_heap_size_ExpectAndReturn(cmock_retval) esp_get_minimum_free_heap_size_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_get_minimum_free_heap_size_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_esp_get_minimum_free_heap_size_CALLBACK)(int cmock_num_calls);
void esp_get_minimum_free_heap_size_AddCallback(CMOCK_esp_get_minimum_free_heap_size_CALLBACK Callback);
void esp_get_minimum_free_heap_size_Stub(CMOCK_esp_get_minimum_free_heap_size_CALLBACK Callback);
#define esp_get_minimum_free_heap_size_StubWithCallback esp_get_minimum_free_heap_size_Stub
#define esp_system_abort_Ignore() esp_system_abort_CMockIgnore()
void esp_system_abort_CMockIgnore(void);
#define esp_system_abort_StopIgnore() esp_system_abort_CMockStopIgnore()
void esp_system_abort_CMockStopIgnore(void);
#define esp_system_abort_Expect(details) esp_system_abort_CMockExpect(__LINE__, details)
void esp_system_abort_CMockExpect(UNITY_LINE_TYPE cmock_line, const char* details);
typedef void (* CMOCK_esp_system_abort_CALLBACK)(const char* details, int cmock_num_calls);
void esp_system_abort_AddCallback(CMOCK_esp_system_abort_CALLBACK Callback);
void esp_system_abort_Stub(CMOCK_esp_system_abort_CALLBACK Callback);
#define esp_system_abort_StubWithCallback esp_system_abort_Stub
#define esp_system_abort_IgnoreArg_details() esp_system_abort_CMockIgnoreArg_details(__LINE__)
void esp_system_abort_CMockIgnoreArg_details(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
