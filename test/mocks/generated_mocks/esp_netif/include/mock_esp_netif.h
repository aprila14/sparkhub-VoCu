#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_ESP_NETIF_H
#define _MOCK_ESP_NETIF_H

#include "unity.h"
#include "esp_netif.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_esp_netif_Init(void);
void mock_esp_netif_Destroy(void);
void mock_esp_netif_Verify(void);




#define esp_netif_init_IgnoreAndReturn(cmock_retval) esp_netif_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_init_StopIgnore() esp_netif_init_CMockStopIgnore()
void esp_netif_init_CMockStopIgnore(void);
#define esp_netif_init_ExpectAndReturn(cmock_retval) esp_netif_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_netif_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_init_CALLBACK)(int cmock_num_calls);
void esp_netif_init_AddCallback(CMOCK_esp_netif_init_CALLBACK Callback);
void esp_netif_init_Stub(CMOCK_esp_netif_init_CALLBACK Callback);
#define esp_netif_init_StubWithCallback esp_netif_init_Stub
#define esp_netif_deinit_IgnoreAndReturn(cmock_retval) esp_netif_deinit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_deinit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_deinit_StopIgnore() esp_netif_deinit_CMockStopIgnore()
void esp_netif_deinit_CMockStopIgnore(void);
#define esp_netif_deinit_ExpectAndReturn(cmock_retval) esp_netif_deinit_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_netif_deinit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_deinit_CALLBACK)(int cmock_num_calls);
void esp_netif_deinit_AddCallback(CMOCK_esp_netif_deinit_CALLBACK Callback);
void esp_netif_deinit_Stub(CMOCK_esp_netif_deinit_CALLBACK Callback);
#define esp_netif_deinit_StubWithCallback esp_netif_deinit_Stub
#define esp_netif_new_IgnoreAndReturn(cmock_retval) esp_netif_new_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_new_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* cmock_to_return);
#define esp_netif_new_StopIgnore() esp_netif_new_CMockStopIgnore()
void esp_netif_new_CMockStopIgnore(void);
#define esp_netif_new_ExpectAndReturn(esp_netif_config, cmock_retval) esp_netif_new_CMockExpectAndReturn(__LINE__, esp_netif_config, cmock_retval)
void esp_netif_new_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const esp_netif_config_t* esp_netif_config, esp_netif_t* cmock_to_return);
typedef esp_netif_t* (* CMOCK_esp_netif_new_CALLBACK)(const esp_netif_config_t* esp_netif_config, int cmock_num_calls);
void esp_netif_new_AddCallback(CMOCK_esp_netif_new_CALLBACK Callback);
void esp_netif_new_Stub(CMOCK_esp_netif_new_CALLBACK Callback);
#define esp_netif_new_StubWithCallback esp_netif_new_Stub
#define esp_netif_new_ExpectWithArrayAndReturn(esp_netif_config, esp_netif_config_Depth, cmock_retval) esp_netif_new_CMockExpectWithArrayAndReturn(__LINE__, esp_netif_config, esp_netif_config_Depth, cmock_retval)
void esp_netif_new_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const esp_netif_config_t* esp_netif_config, int esp_netif_config_Depth, esp_netif_t* cmock_to_return);
#define esp_netif_new_IgnoreArg_esp_netif_config() esp_netif_new_CMockIgnoreArg_esp_netif_config(__LINE__)
void esp_netif_new_CMockIgnoreArg_esp_netif_config(UNITY_LINE_TYPE cmock_line);
#define esp_netif_destroy_Ignore() esp_netif_destroy_CMockIgnore()
void esp_netif_destroy_CMockIgnore(void);
#define esp_netif_destroy_StopIgnore() esp_netif_destroy_CMockStopIgnore()
void esp_netif_destroy_CMockStopIgnore(void);
#define esp_netif_destroy_Expect(esp_netif) esp_netif_destroy_CMockExpect(__LINE__, esp_netif)
void esp_netif_destroy_CMockExpect(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif);
typedef void (* CMOCK_esp_netif_destroy_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_destroy_AddCallback(CMOCK_esp_netif_destroy_CALLBACK Callback);
void esp_netif_destroy_Stub(CMOCK_esp_netif_destroy_CALLBACK Callback);
#define esp_netif_destroy_StubWithCallback esp_netif_destroy_Stub
#define esp_netif_destroy_ExpectWithArray(esp_netif, esp_netif_Depth) esp_netif_destroy_CMockExpectWithArray(__LINE__, esp_netif, esp_netif_Depth)
void esp_netif_destroy_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth);
#define esp_netif_destroy_ReturnThruPtr_esp_netif(esp_netif) esp_netif_destroy_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_destroy_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_destroy_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_destroy_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_destroy_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_destroy_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_destroy_IgnoreArg_esp_netif() esp_netif_destroy_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_destroy_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_driver_config_IgnoreAndReturn(cmock_retval) esp_netif_set_driver_config_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_set_driver_config_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_set_driver_config_StopIgnore() esp_netif_set_driver_config_CMockStopIgnore()
void esp_netif_set_driver_config_CMockStopIgnore(void);
#define esp_netif_set_driver_config_ExpectAndReturn(esp_netif, driver_config, cmock_retval) esp_netif_set_driver_config_CMockExpectAndReturn(__LINE__, esp_netif, driver_config, cmock_retval)
void esp_netif_set_driver_config_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, const esp_netif_driver_ifconfig_t* driver_config, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_set_driver_config_CALLBACK)(esp_netif_t* esp_netif, const esp_netif_driver_ifconfig_t* driver_config, int cmock_num_calls);
void esp_netif_set_driver_config_AddCallback(CMOCK_esp_netif_set_driver_config_CALLBACK Callback);
void esp_netif_set_driver_config_Stub(CMOCK_esp_netif_set_driver_config_CALLBACK Callback);
#define esp_netif_set_driver_config_StubWithCallback esp_netif_set_driver_config_Stub
#define esp_netif_set_driver_config_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, driver_config, driver_config_Depth, cmock_retval) esp_netif_set_driver_config_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, driver_config, driver_config_Depth, cmock_retval)
void esp_netif_set_driver_config_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, const esp_netif_driver_ifconfig_t* driver_config, int driver_config_Depth, esp_err_t cmock_to_return);
#define esp_netif_set_driver_config_ReturnThruPtr_esp_netif(esp_netif) esp_netif_set_driver_config_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_set_driver_config_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_set_driver_config_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_set_driver_config_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_set_driver_config_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_set_driver_config_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_set_driver_config_IgnoreArg_esp_netif() esp_netif_set_driver_config_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_set_driver_config_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_driver_config_IgnoreArg_driver_config() esp_netif_set_driver_config_CMockIgnoreArg_driver_config(__LINE__)
void esp_netif_set_driver_config_CMockIgnoreArg_driver_config(UNITY_LINE_TYPE cmock_line);
#define esp_netif_attach_IgnoreAndReturn(cmock_retval) esp_netif_attach_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_attach_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_attach_StopIgnore() esp_netif_attach_CMockStopIgnore()
void esp_netif_attach_CMockStopIgnore(void);
#define esp_netif_attach_ExpectAndReturn(esp_netif, driver_handle, cmock_retval) esp_netif_attach_CMockExpectAndReturn(__LINE__, esp_netif, driver_handle, cmock_retval)
void esp_netif_attach_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_iodriver_handle driver_handle, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_attach_CALLBACK)(esp_netif_t* esp_netif, esp_netif_iodriver_handle driver_handle, int cmock_num_calls);
void esp_netif_attach_AddCallback(CMOCK_esp_netif_attach_CALLBACK Callback);
void esp_netif_attach_Stub(CMOCK_esp_netif_attach_CALLBACK Callback);
#define esp_netif_attach_StubWithCallback esp_netif_attach_Stub
#define esp_netif_attach_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, driver_handle, cmock_retval) esp_netif_attach_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, driver_handle, cmock_retval)
void esp_netif_attach_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_iodriver_handle driver_handle, esp_err_t cmock_to_return);
#define esp_netif_attach_ReturnThruPtr_esp_netif(esp_netif) esp_netif_attach_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_attach_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_attach_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_attach_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_attach_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_attach_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_attach_IgnoreArg_esp_netif() esp_netif_attach_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_attach_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_attach_IgnoreArg_driver_handle() esp_netif_attach_CMockIgnoreArg_driver_handle(__LINE__)
void esp_netif_attach_CMockIgnoreArg_driver_handle(UNITY_LINE_TYPE cmock_line);
#define esp_netif_receive_IgnoreAndReturn(cmock_retval) esp_netif_receive_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_receive_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_receive_StopIgnore() esp_netif_receive_CMockStopIgnore()
void esp_netif_receive_CMockStopIgnore(void);
#define esp_netif_receive_ExpectAndReturn(esp_netif, buffer, len, eb, cmock_retval) esp_netif_receive_CMockExpectAndReturn(__LINE__, esp_netif, buffer, len, eb, cmock_retval)
void esp_netif_receive_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, void* buffer, size_t len, void* eb, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_receive_CALLBACK)(esp_netif_t* esp_netif, void* buffer, size_t len, void* eb, int cmock_num_calls);
void esp_netif_receive_AddCallback(CMOCK_esp_netif_receive_CALLBACK Callback);
void esp_netif_receive_Stub(CMOCK_esp_netif_receive_CALLBACK Callback);
#define esp_netif_receive_StubWithCallback esp_netif_receive_Stub
#define esp_netif_receive_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, buffer, buffer_Depth, len, eb, eb_Depth, cmock_retval) esp_netif_receive_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, buffer, buffer_Depth, len, eb, eb_Depth, cmock_retval)
void esp_netif_receive_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, void* buffer, int buffer_Depth, size_t len, void* eb, int eb_Depth, esp_err_t cmock_to_return);
#define esp_netif_receive_ReturnThruPtr_esp_netif(esp_netif) esp_netif_receive_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_receive_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_receive_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_receive_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_receive_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_receive_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_receive_ReturnThruPtr_buffer(buffer) esp_netif_receive_CMockReturnMemThruPtr_buffer(__LINE__, buffer, sizeof(void))
#define esp_netif_receive_ReturnArrayThruPtr_buffer(buffer, cmock_len) esp_netif_receive_CMockReturnMemThruPtr_buffer(__LINE__, buffer, cmock_len * sizeof(*buffer))
#define esp_netif_receive_ReturnMemThruPtr_buffer(buffer, cmock_size) esp_netif_receive_CMockReturnMemThruPtr_buffer(__LINE__, buffer, cmock_size)
void esp_netif_receive_CMockReturnMemThruPtr_buffer(UNITY_LINE_TYPE cmock_line, void* buffer, size_t cmock_size);
#define esp_netif_receive_ReturnThruPtr_eb(eb) esp_netif_receive_CMockReturnMemThruPtr_eb(__LINE__, eb, sizeof(void))
#define esp_netif_receive_ReturnArrayThruPtr_eb(eb, cmock_len) esp_netif_receive_CMockReturnMemThruPtr_eb(__LINE__, eb, cmock_len * sizeof(*eb))
#define esp_netif_receive_ReturnMemThruPtr_eb(eb, cmock_size) esp_netif_receive_CMockReturnMemThruPtr_eb(__LINE__, eb, cmock_size)
void esp_netif_receive_CMockReturnMemThruPtr_eb(UNITY_LINE_TYPE cmock_line, void* eb, size_t cmock_size);
#define esp_netif_receive_IgnoreArg_esp_netif() esp_netif_receive_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_receive_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_receive_IgnoreArg_buffer() esp_netif_receive_CMockIgnoreArg_buffer(__LINE__)
void esp_netif_receive_CMockIgnoreArg_buffer(UNITY_LINE_TYPE cmock_line);
#define esp_netif_receive_IgnoreArg_len() esp_netif_receive_CMockIgnoreArg_len(__LINE__)
void esp_netif_receive_CMockIgnoreArg_len(UNITY_LINE_TYPE cmock_line);
#define esp_netif_receive_IgnoreArg_eb() esp_netif_receive_CMockIgnoreArg_eb(__LINE__)
void esp_netif_receive_CMockIgnoreArg_eb(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_start_Ignore() esp_netif_action_start_CMockIgnore()
void esp_netif_action_start_CMockIgnore(void);
#define esp_netif_action_start_StopIgnore() esp_netif_action_start_CMockStopIgnore()
void esp_netif_action_start_CMockStopIgnore(void);
#define esp_netif_action_start_Expect(esp_netif, base, event_id, data) esp_netif_action_start_CMockExpect(__LINE__, esp_netif, base, event_id, data)
void esp_netif_action_start_CMockExpect(UNITY_LINE_TYPE cmock_line, void* esp_netif, esp_event_base_t base, int32_t event_id, void* data);
typedef void (* CMOCK_esp_netif_action_start_CALLBACK)(void* esp_netif, esp_event_base_t base, int32_t event_id, void* data, int cmock_num_calls);
void esp_netif_action_start_AddCallback(CMOCK_esp_netif_action_start_CALLBACK Callback);
void esp_netif_action_start_Stub(CMOCK_esp_netif_action_start_CALLBACK Callback);
#define esp_netif_action_start_StubWithCallback esp_netif_action_start_Stub
#define esp_netif_action_start_ExpectWithArray(esp_netif, esp_netif_Depth, base, event_id, data, data_Depth) esp_netif_action_start_CMockExpectWithArray(__LINE__, esp_netif, esp_netif_Depth, base, event_id, data, data_Depth)
void esp_netif_action_start_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* esp_netif, int esp_netif_Depth, esp_event_base_t base, int32_t event_id, void* data, int data_Depth);
#define esp_netif_action_start_ReturnThruPtr_esp_netif(esp_netif) esp_netif_action_start_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(void))
#define esp_netif_action_start_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_action_start_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_action_start_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_action_start_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_action_start_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, void* esp_netif, size_t cmock_size);
#define esp_netif_action_start_ReturnThruPtr_data(data) esp_netif_action_start_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(void))
#define esp_netif_action_start_ReturnArrayThruPtr_data(data, cmock_len) esp_netif_action_start_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define esp_netif_action_start_ReturnMemThruPtr_data(data, cmock_size) esp_netif_action_start_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void esp_netif_action_start_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, void* data, size_t cmock_size);
#define esp_netif_action_start_IgnoreArg_esp_netif() esp_netif_action_start_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_action_start_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_start_IgnoreArg_base() esp_netif_action_start_CMockIgnoreArg_base(__LINE__)
void esp_netif_action_start_CMockIgnoreArg_base(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_start_IgnoreArg_event_id() esp_netif_action_start_CMockIgnoreArg_event_id(__LINE__)
void esp_netif_action_start_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_start_IgnoreArg_data() esp_netif_action_start_CMockIgnoreArg_data(__LINE__)
void esp_netif_action_start_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_stop_Ignore() esp_netif_action_stop_CMockIgnore()
void esp_netif_action_stop_CMockIgnore(void);
#define esp_netif_action_stop_StopIgnore() esp_netif_action_stop_CMockStopIgnore()
void esp_netif_action_stop_CMockStopIgnore(void);
#define esp_netif_action_stop_Expect(esp_netif, base, event_id, data) esp_netif_action_stop_CMockExpect(__LINE__, esp_netif, base, event_id, data)
void esp_netif_action_stop_CMockExpect(UNITY_LINE_TYPE cmock_line, void* esp_netif, esp_event_base_t base, int32_t event_id, void* data);
typedef void (* CMOCK_esp_netif_action_stop_CALLBACK)(void* esp_netif, esp_event_base_t base, int32_t event_id, void* data, int cmock_num_calls);
void esp_netif_action_stop_AddCallback(CMOCK_esp_netif_action_stop_CALLBACK Callback);
void esp_netif_action_stop_Stub(CMOCK_esp_netif_action_stop_CALLBACK Callback);
#define esp_netif_action_stop_StubWithCallback esp_netif_action_stop_Stub
#define esp_netif_action_stop_ExpectWithArray(esp_netif, esp_netif_Depth, base, event_id, data, data_Depth) esp_netif_action_stop_CMockExpectWithArray(__LINE__, esp_netif, esp_netif_Depth, base, event_id, data, data_Depth)
void esp_netif_action_stop_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* esp_netif, int esp_netif_Depth, esp_event_base_t base, int32_t event_id, void* data, int data_Depth);
#define esp_netif_action_stop_ReturnThruPtr_esp_netif(esp_netif) esp_netif_action_stop_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(void))
#define esp_netif_action_stop_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_action_stop_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_action_stop_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_action_stop_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_action_stop_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, void* esp_netif, size_t cmock_size);
#define esp_netif_action_stop_ReturnThruPtr_data(data) esp_netif_action_stop_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(void))
#define esp_netif_action_stop_ReturnArrayThruPtr_data(data, cmock_len) esp_netif_action_stop_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define esp_netif_action_stop_ReturnMemThruPtr_data(data, cmock_size) esp_netif_action_stop_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void esp_netif_action_stop_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, void* data, size_t cmock_size);
#define esp_netif_action_stop_IgnoreArg_esp_netif() esp_netif_action_stop_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_action_stop_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_stop_IgnoreArg_base() esp_netif_action_stop_CMockIgnoreArg_base(__LINE__)
void esp_netif_action_stop_CMockIgnoreArg_base(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_stop_IgnoreArg_event_id() esp_netif_action_stop_CMockIgnoreArg_event_id(__LINE__)
void esp_netif_action_stop_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_stop_IgnoreArg_data() esp_netif_action_stop_CMockIgnoreArg_data(__LINE__)
void esp_netif_action_stop_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_connected_Ignore() esp_netif_action_connected_CMockIgnore()
void esp_netif_action_connected_CMockIgnore(void);
#define esp_netif_action_connected_StopIgnore() esp_netif_action_connected_CMockStopIgnore()
void esp_netif_action_connected_CMockStopIgnore(void);
#define esp_netif_action_connected_Expect(esp_netif, base, event_id, data) esp_netif_action_connected_CMockExpect(__LINE__, esp_netif, base, event_id, data)
void esp_netif_action_connected_CMockExpect(UNITY_LINE_TYPE cmock_line, void* esp_netif, esp_event_base_t base, int32_t event_id, void* data);
typedef void (* CMOCK_esp_netif_action_connected_CALLBACK)(void* esp_netif, esp_event_base_t base, int32_t event_id, void* data, int cmock_num_calls);
void esp_netif_action_connected_AddCallback(CMOCK_esp_netif_action_connected_CALLBACK Callback);
void esp_netif_action_connected_Stub(CMOCK_esp_netif_action_connected_CALLBACK Callback);
#define esp_netif_action_connected_StubWithCallback esp_netif_action_connected_Stub
#define esp_netif_action_connected_ExpectWithArray(esp_netif, esp_netif_Depth, base, event_id, data, data_Depth) esp_netif_action_connected_CMockExpectWithArray(__LINE__, esp_netif, esp_netif_Depth, base, event_id, data, data_Depth)
void esp_netif_action_connected_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* esp_netif, int esp_netif_Depth, esp_event_base_t base, int32_t event_id, void* data, int data_Depth);
#define esp_netif_action_connected_ReturnThruPtr_esp_netif(esp_netif) esp_netif_action_connected_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(void))
#define esp_netif_action_connected_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_action_connected_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_action_connected_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_action_connected_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_action_connected_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, void* esp_netif, size_t cmock_size);
#define esp_netif_action_connected_ReturnThruPtr_data(data) esp_netif_action_connected_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(void))
#define esp_netif_action_connected_ReturnArrayThruPtr_data(data, cmock_len) esp_netif_action_connected_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define esp_netif_action_connected_ReturnMemThruPtr_data(data, cmock_size) esp_netif_action_connected_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void esp_netif_action_connected_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, void* data, size_t cmock_size);
#define esp_netif_action_connected_IgnoreArg_esp_netif() esp_netif_action_connected_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_action_connected_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_connected_IgnoreArg_base() esp_netif_action_connected_CMockIgnoreArg_base(__LINE__)
void esp_netif_action_connected_CMockIgnoreArg_base(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_connected_IgnoreArg_event_id() esp_netif_action_connected_CMockIgnoreArg_event_id(__LINE__)
void esp_netif_action_connected_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_connected_IgnoreArg_data() esp_netif_action_connected_CMockIgnoreArg_data(__LINE__)
void esp_netif_action_connected_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_disconnected_Ignore() esp_netif_action_disconnected_CMockIgnore()
void esp_netif_action_disconnected_CMockIgnore(void);
#define esp_netif_action_disconnected_StopIgnore() esp_netif_action_disconnected_CMockStopIgnore()
void esp_netif_action_disconnected_CMockStopIgnore(void);
#define esp_netif_action_disconnected_Expect(esp_netif, base, event_id, data) esp_netif_action_disconnected_CMockExpect(__LINE__, esp_netif, base, event_id, data)
void esp_netif_action_disconnected_CMockExpect(UNITY_LINE_TYPE cmock_line, void* esp_netif, esp_event_base_t base, int32_t event_id, void* data);
typedef void (* CMOCK_esp_netif_action_disconnected_CALLBACK)(void* esp_netif, esp_event_base_t base, int32_t event_id, void* data, int cmock_num_calls);
void esp_netif_action_disconnected_AddCallback(CMOCK_esp_netif_action_disconnected_CALLBACK Callback);
void esp_netif_action_disconnected_Stub(CMOCK_esp_netif_action_disconnected_CALLBACK Callback);
#define esp_netif_action_disconnected_StubWithCallback esp_netif_action_disconnected_Stub
#define esp_netif_action_disconnected_ExpectWithArray(esp_netif, esp_netif_Depth, base, event_id, data, data_Depth) esp_netif_action_disconnected_CMockExpectWithArray(__LINE__, esp_netif, esp_netif_Depth, base, event_id, data, data_Depth)
void esp_netif_action_disconnected_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* esp_netif, int esp_netif_Depth, esp_event_base_t base, int32_t event_id, void* data, int data_Depth);
#define esp_netif_action_disconnected_ReturnThruPtr_esp_netif(esp_netif) esp_netif_action_disconnected_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(void))
#define esp_netif_action_disconnected_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_action_disconnected_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_action_disconnected_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_action_disconnected_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_action_disconnected_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, void* esp_netif, size_t cmock_size);
#define esp_netif_action_disconnected_ReturnThruPtr_data(data) esp_netif_action_disconnected_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(void))
#define esp_netif_action_disconnected_ReturnArrayThruPtr_data(data, cmock_len) esp_netif_action_disconnected_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define esp_netif_action_disconnected_ReturnMemThruPtr_data(data, cmock_size) esp_netif_action_disconnected_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void esp_netif_action_disconnected_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, void* data, size_t cmock_size);
#define esp_netif_action_disconnected_IgnoreArg_esp_netif() esp_netif_action_disconnected_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_action_disconnected_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_disconnected_IgnoreArg_base() esp_netif_action_disconnected_CMockIgnoreArg_base(__LINE__)
void esp_netif_action_disconnected_CMockIgnoreArg_base(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_disconnected_IgnoreArg_event_id() esp_netif_action_disconnected_CMockIgnoreArg_event_id(__LINE__)
void esp_netif_action_disconnected_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_disconnected_IgnoreArg_data() esp_netif_action_disconnected_CMockIgnoreArg_data(__LINE__)
void esp_netif_action_disconnected_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_got_ip_Ignore() esp_netif_action_got_ip_CMockIgnore()
void esp_netif_action_got_ip_CMockIgnore(void);
#define esp_netif_action_got_ip_StopIgnore() esp_netif_action_got_ip_CMockStopIgnore()
void esp_netif_action_got_ip_CMockStopIgnore(void);
#define esp_netif_action_got_ip_Expect(esp_netif, base, event_id, data) esp_netif_action_got_ip_CMockExpect(__LINE__, esp_netif, base, event_id, data)
void esp_netif_action_got_ip_CMockExpect(UNITY_LINE_TYPE cmock_line, void* esp_netif, esp_event_base_t base, int32_t event_id, void* data);
typedef void (* CMOCK_esp_netif_action_got_ip_CALLBACK)(void* esp_netif, esp_event_base_t base, int32_t event_id, void* data, int cmock_num_calls);
void esp_netif_action_got_ip_AddCallback(CMOCK_esp_netif_action_got_ip_CALLBACK Callback);
void esp_netif_action_got_ip_Stub(CMOCK_esp_netif_action_got_ip_CALLBACK Callback);
#define esp_netif_action_got_ip_StubWithCallback esp_netif_action_got_ip_Stub
#define esp_netif_action_got_ip_ExpectWithArray(esp_netif, esp_netif_Depth, base, event_id, data, data_Depth) esp_netif_action_got_ip_CMockExpectWithArray(__LINE__, esp_netif, esp_netif_Depth, base, event_id, data, data_Depth)
void esp_netif_action_got_ip_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* esp_netif, int esp_netif_Depth, esp_event_base_t base, int32_t event_id, void* data, int data_Depth);
#define esp_netif_action_got_ip_ReturnThruPtr_esp_netif(esp_netif) esp_netif_action_got_ip_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(void))
#define esp_netif_action_got_ip_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_action_got_ip_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_action_got_ip_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_action_got_ip_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_action_got_ip_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, void* esp_netif, size_t cmock_size);
#define esp_netif_action_got_ip_ReturnThruPtr_data(data) esp_netif_action_got_ip_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(void))
#define esp_netif_action_got_ip_ReturnArrayThruPtr_data(data, cmock_len) esp_netif_action_got_ip_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define esp_netif_action_got_ip_ReturnMemThruPtr_data(data, cmock_size) esp_netif_action_got_ip_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void esp_netif_action_got_ip_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, void* data, size_t cmock_size);
#define esp_netif_action_got_ip_IgnoreArg_esp_netif() esp_netif_action_got_ip_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_action_got_ip_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_got_ip_IgnoreArg_base() esp_netif_action_got_ip_CMockIgnoreArg_base(__LINE__)
void esp_netif_action_got_ip_CMockIgnoreArg_base(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_got_ip_IgnoreArg_event_id() esp_netif_action_got_ip_CMockIgnoreArg_event_id(__LINE__)
void esp_netif_action_got_ip_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_got_ip_IgnoreArg_data() esp_netif_action_got_ip_CMockIgnoreArg_data(__LINE__)
void esp_netif_action_got_ip_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_join_ip6_multicast_group_Ignore() esp_netif_action_join_ip6_multicast_group_CMockIgnore()
void esp_netif_action_join_ip6_multicast_group_CMockIgnore(void);
#define esp_netif_action_join_ip6_multicast_group_StopIgnore() esp_netif_action_join_ip6_multicast_group_CMockStopIgnore()
void esp_netif_action_join_ip6_multicast_group_CMockStopIgnore(void);
#define esp_netif_action_join_ip6_multicast_group_Expect(esp_netif, base, event_id, data) esp_netif_action_join_ip6_multicast_group_CMockExpect(__LINE__, esp_netif, base, event_id, data)
void esp_netif_action_join_ip6_multicast_group_CMockExpect(UNITY_LINE_TYPE cmock_line, void* esp_netif, esp_event_base_t base, int32_t event_id, void* data);
typedef void (* CMOCK_esp_netif_action_join_ip6_multicast_group_CALLBACK)(void* esp_netif, esp_event_base_t base, int32_t event_id, void* data, int cmock_num_calls);
void esp_netif_action_join_ip6_multicast_group_AddCallback(CMOCK_esp_netif_action_join_ip6_multicast_group_CALLBACK Callback);
void esp_netif_action_join_ip6_multicast_group_Stub(CMOCK_esp_netif_action_join_ip6_multicast_group_CALLBACK Callback);
#define esp_netif_action_join_ip6_multicast_group_StubWithCallback esp_netif_action_join_ip6_multicast_group_Stub
#define esp_netif_action_join_ip6_multicast_group_ExpectWithArray(esp_netif, esp_netif_Depth, base, event_id, data, data_Depth) esp_netif_action_join_ip6_multicast_group_CMockExpectWithArray(__LINE__, esp_netif, esp_netif_Depth, base, event_id, data, data_Depth)
void esp_netif_action_join_ip6_multicast_group_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* esp_netif, int esp_netif_Depth, esp_event_base_t base, int32_t event_id, void* data, int data_Depth);
#define esp_netif_action_join_ip6_multicast_group_ReturnThruPtr_esp_netif(esp_netif) esp_netif_action_join_ip6_multicast_group_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(void))
#define esp_netif_action_join_ip6_multicast_group_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_action_join_ip6_multicast_group_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_action_join_ip6_multicast_group_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_action_join_ip6_multicast_group_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_action_join_ip6_multicast_group_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, void* esp_netif, size_t cmock_size);
#define esp_netif_action_join_ip6_multicast_group_ReturnThruPtr_data(data) esp_netif_action_join_ip6_multicast_group_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(void))
#define esp_netif_action_join_ip6_multicast_group_ReturnArrayThruPtr_data(data, cmock_len) esp_netif_action_join_ip6_multicast_group_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define esp_netif_action_join_ip6_multicast_group_ReturnMemThruPtr_data(data, cmock_size) esp_netif_action_join_ip6_multicast_group_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void esp_netif_action_join_ip6_multicast_group_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, void* data, size_t cmock_size);
#define esp_netif_action_join_ip6_multicast_group_IgnoreArg_esp_netif() esp_netif_action_join_ip6_multicast_group_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_action_join_ip6_multicast_group_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_join_ip6_multicast_group_IgnoreArg_base() esp_netif_action_join_ip6_multicast_group_CMockIgnoreArg_base(__LINE__)
void esp_netif_action_join_ip6_multicast_group_CMockIgnoreArg_base(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_join_ip6_multicast_group_IgnoreArg_event_id() esp_netif_action_join_ip6_multicast_group_CMockIgnoreArg_event_id(__LINE__)
void esp_netif_action_join_ip6_multicast_group_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_join_ip6_multicast_group_IgnoreArg_data() esp_netif_action_join_ip6_multicast_group_CMockIgnoreArg_data(__LINE__)
void esp_netif_action_join_ip6_multicast_group_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_leave_ip6_multicast_group_Ignore() esp_netif_action_leave_ip6_multicast_group_CMockIgnore()
void esp_netif_action_leave_ip6_multicast_group_CMockIgnore(void);
#define esp_netif_action_leave_ip6_multicast_group_StopIgnore() esp_netif_action_leave_ip6_multicast_group_CMockStopIgnore()
void esp_netif_action_leave_ip6_multicast_group_CMockStopIgnore(void);
#define esp_netif_action_leave_ip6_multicast_group_Expect(esp_netif, base, event_id, data) esp_netif_action_leave_ip6_multicast_group_CMockExpect(__LINE__, esp_netif, base, event_id, data)
void esp_netif_action_leave_ip6_multicast_group_CMockExpect(UNITY_LINE_TYPE cmock_line, void* esp_netif, esp_event_base_t base, int32_t event_id, void* data);
typedef void (* CMOCK_esp_netif_action_leave_ip6_multicast_group_CALLBACK)(void* esp_netif, esp_event_base_t base, int32_t event_id, void* data, int cmock_num_calls);
void esp_netif_action_leave_ip6_multicast_group_AddCallback(CMOCK_esp_netif_action_leave_ip6_multicast_group_CALLBACK Callback);
void esp_netif_action_leave_ip6_multicast_group_Stub(CMOCK_esp_netif_action_leave_ip6_multicast_group_CALLBACK Callback);
#define esp_netif_action_leave_ip6_multicast_group_StubWithCallback esp_netif_action_leave_ip6_multicast_group_Stub
#define esp_netif_action_leave_ip6_multicast_group_ExpectWithArray(esp_netif, esp_netif_Depth, base, event_id, data, data_Depth) esp_netif_action_leave_ip6_multicast_group_CMockExpectWithArray(__LINE__, esp_netif, esp_netif_Depth, base, event_id, data, data_Depth)
void esp_netif_action_leave_ip6_multicast_group_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* esp_netif, int esp_netif_Depth, esp_event_base_t base, int32_t event_id, void* data, int data_Depth);
#define esp_netif_action_leave_ip6_multicast_group_ReturnThruPtr_esp_netif(esp_netif) esp_netif_action_leave_ip6_multicast_group_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(void))
#define esp_netif_action_leave_ip6_multicast_group_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_action_leave_ip6_multicast_group_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_action_leave_ip6_multicast_group_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_action_leave_ip6_multicast_group_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_action_leave_ip6_multicast_group_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, void* esp_netif, size_t cmock_size);
#define esp_netif_action_leave_ip6_multicast_group_ReturnThruPtr_data(data) esp_netif_action_leave_ip6_multicast_group_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(void))
#define esp_netif_action_leave_ip6_multicast_group_ReturnArrayThruPtr_data(data, cmock_len) esp_netif_action_leave_ip6_multicast_group_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define esp_netif_action_leave_ip6_multicast_group_ReturnMemThruPtr_data(data, cmock_size) esp_netif_action_leave_ip6_multicast_group_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void esp_netif_action_leave_ip6_multicast_group_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, void* data, size_t cmock_size);
#define esp_netif_action_leave_ip6_multicast_group_IgnoreArg_esp_netif() esp_netif_action_leave_ip6_multicast_group_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_action_leave_ip6_multicast_group_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_leave_ip6_multicast_group_IgnoreArg_base() esp_netif_action_leave_ip6_multicast_group_CMockIgnoreArg_base(__LINE__)
void esp_netif_action_leave_ip6_multicast_group_CMockIgnoreArg_base(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_leave_ip6_multicast_group_IgnoreArg_event_id() esp_netif_action_leave_ip6_multicast_group_CMockIgnoreArg_event_id(__LINE__)
void esp_netif_action_leave_ip6_multicast_group_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_leave_ip6_multicast_group_IgnoreArg_data() esp_netif_action_leave_ip6_multicast_group_CMockIgnoreArg_data(__LINE__)
void esp_netif_action_leave_ip6_multicast_group_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_add_ip6_address_Ignore() esp_netif_action_add_ip6_address_CMockIgnore()
void esp_netif_action_add_ip6_address_CMockIgnore(void);
#define esp_netif_action_add_ip6_address_StopIgnore() esp_netif_action_add_ip6_address_CMockStopIgnore()
void esp_netif_action_add_ip6_address_CMockStopIgnore(void);
#define esp_netif_action_add_ip6_address_Expect(esp_netif, base, event_id, data) esp_netif_action_add_ip6_address_CMockExpect(__LINE__, esp_netif, base, event_id, data)
void esp_netif_action_add_ip6_address_CMockExpect(UNITY_LINE_TYPE cmock_line, void* esp_netif, esp_event_base_t base, int32_t event_id, void* data);
typedef void (* CMOCK_esp_netif_action_add_ip6_address_CALLBACK)(void* esp_netif, esp_event_base_t base, int32_t event_id, void* data, int cmock_num_calls);
void esp_netif_action_add_ip6_address_AddCallback(CMOCK_esp_netif_action_add_ip6_address_CALLBACK Callback);
void esp_netif_action_add_ip6_address_Stub(CMOCK_esp_netif_action_add_ip6_address_CALLBACK Callback);
#define esp_netif_action_add_ip6_address_StubWithCallback esp_netif_action_add_ip6_address_Stub
#define esp_netif_action_add_ip6_address_ExpectWithArray(esp_netif, esp_netif_Depth, base, event_id, data, data_Depth) esp_netif_action_add_ip6_address_CMockExpectWithArray(__LINE__, esp_netif, esp_netif_Depth, base, event_id, data, data_Depth)
void esp_netif_action_add_ip6_address_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* esp_netif, int esp_netif_Depth, esp_event_base_t base, int32_t event_id, void* data, int data_Depth);
#define esp_netif_action_add_ip6_address_ReturnThruPtr_esp_netif(esp_netif) esp_netif_action_add_ip6_address_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(void))
#define esp_netif_action_add_ip6_address_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_action_add_ip6_address_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_action_add_ip6_address_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_action_add_ip6_address_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_action_add_ip6_address_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, void* esp_netif, size_t cmock_size);
#define esp_netif_action_add_ip6_address_ReturnThruPtr_data(data) esp_netif_action_add_ip6_address_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(void))
#define esp_netif_action_add_ip6_address_ReturnArrayThruPtr_data(data, cmock_len) esp_netif_action_add_ip6_address_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define esp_netif_action_add_ip6_address_ReturnMemThruPtr_data(data, cmock_size) esp_netif_action_add_ip6_address_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void esp_netif_action_add_ip6_address_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, void* data, size_t cmock_size);
#define esp_netif_action_add_ip6_address_IgnoreArg_esp_netif() esp_netif_action_add_ip6_address_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_action_add_ip6_address_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_add_ip6_address_IgnoreArg_base() esp_netif_action_add_ip6_address_CMockIgnoreArg_base(__LINE__)
void esp_netif_action_add_ip6_address_CMockIgnoreArg_base(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_add_ip6_address_IgnoreArg_event_id() esp_netif_action_add_ip6_address_CMockIgnoreArg_event_id(__LINE__)
void esp_netif_action_add_ip6_address_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_add_ip6_address_IgnoreArg_data() esp_netif_action_add_ip6_address_CMockIgnoreArg_data(__LINE__)
void esp_netif_action_add_ip6_address_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_remove_ip6_address_Ignore() esp_netif_action_remove_ip6_address_CMockIgnore()
void esp_netif_action_remove_ip6_address_CMockIgnore(void);
#define esp_netif_action_remove_ip6_address_StopIgnore() esp_netif_action_remove_ip6_address_CMockStopIgnore()
void esp_netif_action_remove_ip6_address_CMockStopIgnore(void);
#define esp_netif_action_remove_ip6_address_Expect(esp_netif, base, event_id, data) esp_netif_action_remove_ip6_address_CMockExpect(__LINE__, esp_netif, base, event_id, data)
void esp_netif_action_remove_ip6_address_CMockExpect(UNITY_LINE_TYPE cmock_line, void* esp_netif, esp_event_base_t base, int32_t event_id, void* data);
typedef void (* CMOCK_esp_netif_action_remove_ip6_address_CALLBACK)(void* esp_netif, esp_event_base_t base, int32_t event_id, void* data, int cmock_num_calls);
void esp_netif_action_remove_ip6_address_AddCallback(CMOCK_esp_netif_action_remove_ip6_address_CALLBACK Callback);
void esp_netif_action_remove_ip6_address_Stub(CMOCK_esp_netif_action_remove_ip6_address_CALLBACK Callback);
#define esp_netif_action_remove_ip6_address_StubWithCallback esp_netif_action_remove_ip6_address_Stub
#define esp_netif_action_remove_ip6_address_ExpectWithArray(esp_netif, esp_netif_Depth, base, event_id, data, data_Depth) esp_netif_action_remove_ip6_address_CMockExpectWithArray(__LINE__, esp_netif, esp_netif_Depth, base, event_id, data, data_Depth)
void esp_netif_action_remove_ip6_address_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* esp_netif, int esp_netif_Depth, esp_event_base_t base, int32_t event_id, void* data, int data_Depth);
#define esp_netif_action_remove_ip6_address_ReturnThruPtr_esp_netif(esp_netif) esp_netif_action_remove_ip6_address_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(void))
#define esp_netif_action_remove_ip6_address_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_action_remove_ip6_address_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_action_remove_ip6_address_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_action_remove_ip6_address_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_action_remove_ip6_address_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, void* esp_netif, size_t cmock_size);
#define esp_netif_action_remove_ip6_address_ReturnThruPtr_data(data) esp_netif_action_remove_ip6_address_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(void))
#define esp_netif_action_remove_ip6_address_ReturnArrayThruPtr_data(data, cmock_len) esp_netif_action_remove_ip6_address_CMockReturnMemThruPtr_data(__LINE__, data, cmock_len * sizeof(*data))
#define esp_netif_action_remove_ip6_address_ReturnMemThruPtr_data(data, cmock_size) esp_netif_action_remove_ip6_address_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void esp_netif_action_remove_ip6_address_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, void* data, size_t cmock_size);
#define esp_netif_action_remove_ip6_address_IgnoreArg_esp_netif() esp_netif_action_remove_ip6_address_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_action_remove_ip6_address_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_remove_ip6_address_IgnoreArg_base() esp_netif_action_remove_ip6_address_CMockIgnoreArg_base(__LINE__)
void esp_netif_action_remove_ip6_address_CMockIgnoreArg_base(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_remove_ip6_address_IgnoreArg_event_id() esp_netif_action_remove_ip6_address_CMockIgnoreArg_event_id(__LINE__)
void esp_netif_action_remove_ip6_address_CMockIgnoreArg_event_id(UNITY_LINE_TYPE cmock_line);
#define esp_netif_action_remove_ip6_address_IgnoreArg_data() esp_netif_action_remove_ip6_address_CMockIgnoreArg_data(__LINE__)
void esp_netif_action_remove_ip6_address_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_mac_IgnoreAndReturn(cmock_retval) esp_netif_set_mac_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_set_mac_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_set_mac_StopIgnore() esp_netif_set_mac_CMockStopIgnore()
void esp_netif_set_mac_CMockStopIgnore(void);
#define esp_netif_set_mac_ExpectAndReturn(esp_netif, mac, cmock_retval) esp_netif_set_mac_CMockExpectAndReturn(__LINE__, esp_netif, mac, cmock_retval)
void esp_netif_set_mac_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, uint8_t* mac, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_set_mac_CALLBACK)(esp_netif_t* esp_netif, uint8_t* mac, int cmock_num_calls);
void esp_netif_set_mac_AddCallback(CMOCK_esp_netif_set_mac_CALLBACK Callback);
void esp_netif_set_mac_Stub(CMOCK_esp_netif_set_mac_CALLBACK Callback);
#define esp_netif_set_mac_StubWithCallback esp_netif_set_mac_Stub
#define esp_netif_set_mac_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, mac, mac_Depth, cmock_retval) esp_netif_set_mac_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, mac, mac_Depth, cmock_retval)
void esp_netif_set_mac_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, uint8_t* mac, int mac_Depth, esp_err_t cmock_to_return);
#define esp_netif_set_mac_ReturnThruPtr_esp_netif(esp_netif) esp_netif_set_mac_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_set_mac_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_set_mac_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_set_mac_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_set_mac_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_set_mac_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_set_mac_ReturnThruPtr_mac(mac) esp_netif_set_mac_CMockReturnMemThruPtr_mac(__LINE__, mac, sizeof(uint8_t))
#define esp_netif_set_mac_ReturnArrayThruPtr_mac(mac, cmock_len) esp_netif_set_mac_CMockReturnMemThruPtr_mac(__LINE__, mac, cmock_len * sizeof(*mac))
#define esp_netif_set_mac_ReturnMemThruPtr_mac(mac, cmock_size) esp_netif_set_mac_CMockReturnMemThruPtr_mac(__LINE__, mac, cmock_size)
void esp_netif_set_mac_CMockReturnMemThruPtr_mac(UNITY_LINE_TYPE cmock_line, uint8_t* mac, size_t cmock_size);
#define esp_netif_set_mac_IgnoreArg_esp_netif() esp_netif_set_mac_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_set_mac_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_mac_IgnoreArg_mac() esp_netif_set_mac_CMockIgnoreArg_mac(__LINE__)
void esp_netif_set_mac_CMockIgnoreArg_mac(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_mac_IgnoreAndReturn(cmock_retval) esp_netif_get_mac_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_mac_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_get_mac_StopIgnore() esp_netif_get_mac_CMockStopIgnore()
void esp_netif_get_mac_CMockStopIgnore(void);
#define esp_netif_get_mac_ExpectAndReturn(esp_netif, mac, cmock_retval) esp_netif_get_mac_CMockExpectAndReturn(__LINE__, esp_netif, mac, cmock_retval)
void esp_netif_get_mac_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, uint8_t* mac, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_get_mac_CALLBACK)(esp_netif_t* esp_netif, uint8_t* mac, int cmock_num_calls);
void esp_netif_get_mac_AddCallback(CMOCK_esp_netif_get_mac_CALLBACK Callback);
void esp_netif_get_mac_Stub(CMOCK_esp_netif_get_mac_CALLBACK Callback);
#define esp_netif_get_mac_StubWithCallback esp_netif_get_mac_Stub
#define esp_netif_get_mac_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, mac, mac_Depth, cmock_retval) esp_netif_get_mac_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, mac, mac_Depth, cmock_retval)
void esp_netif_get_mac_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, uint8_t* mac, int mac_Depth, esp_err_t cmock_to_return);
#define esp_netif_get_mac_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_mac_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_mac_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_mac_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_mac_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_mac_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_mac_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_mac_ReturnThruPtr_mac(mac) esp_netif_get_mac_CMockReturnMemThruPtr_mac(__LINE__, mac, sizeof(uint8_t))
#define esp_netif_get_mac_ReturnArrayThruPtr_mac(mac, cmock_len) esp_netif_get_mac_CMockReturnMemThruPtr_mac(__LINE__, mac, cmock_len * sizeof(*mac))
#define esp_netif_get_mac_ReturnMemThruPtr_mac(mac, cmock_size) esp_netif_get_mac_CMockReturnMemThruPtr_mac(__LINE__, mac, cmock_size)
void esp_netif_get_mac_CMockReturnMemThruPtr_mac(UNITY_LINE_TYPE cmock_line, uint8_t* mac, size_t cmock_size);
#define esp_netif_get_mac_IgnoreArg_esp_netif() esp_netif_get_mac_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_mac_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_mac_IgnoreArg_mac() esp_netif_get_mac_CMockIgnoreArg_mac(__LINE__)
void esp_netif_get_mac_CMockIgnoreArg_mac(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_hostname_IgnoreAndReturn(cmock_retval) esp_netif_set_hostname_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_set_hostname_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_set_hostname_StopIgnore() esp_netif_set_hostname_CMockStopIgnore()
void esp_netif_set_hostname_CMockStopIgnore(void);
#define esp_netif_set_hostname_ExpectAndReturn(esp_netif, hostname, cmock_retval) esp_netif_set_hostname_CMockExpectAndReturn(__LINE__, esp_netif, hostname, cmock_retval)
void esp_netif_set_hostname_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, const char* hostname, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_set_hostname_CALLBACK)(esp_netif_t* esp_netif, const char* hostname, int cmock_num_calls);
void esp_netif_set_hostname_AddCallback(CMOCK_esp_netif_set_hostname_CALLBACK Callback);
void esp_netif_set_hostname_Stub(CMOCK_esp_netif_set_hostname_CALLBACK Callback);
#define esp_netif_set_hostname_StubWithCallback esp_netif_set_hostname_Stub
#define esp_netif_set_hostname_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, hostname, cmock_retval) esp_netif_set_hostname_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, hostname, cmock_retval)
void esp_netif_set_hostname_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, const char* hostname, esp_err_t cmock_to_return);
#define esp_netif_set_hostname_ReturnThruPtr_esp_netif(esp_netif) esp_netif_set_hostname_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_set_hostname_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_set_hostname_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_set_hostname_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_set_hostname_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_set_hostname_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_set_hostname_IgnoreArg_esp_netif() esp_netif_set_hostname_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_set_hostname_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_hostname_IgnoreArg_hostname() esp_netif_set_hostname_CMockIgnoreArg_hostname(__LINE__)
void esp_netif_set_hostname_CMockIgnoreArg_hostname(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_hostname_IgnoreAndReturn(cmock_retval) esp_netif_get_hostname_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_hostname_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_get_hostname_StopIgnore() esp_netif_get_hostname_CMockStopIgnore()
void esp_netif_get_hostname_CMockStopIgnore(void);
#define esp_netif_get_hostname_ExpectAndReturn(esp_netif, hostname, cmock_retval) esp_netif_get_hostname_CMockExpectAndReturn(__LINE__, esp_netif, hostname, cmock_retval)
void esp_netif_get_hostname_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, const char** hostname, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_get_hostname_CALLBACK)(esp_netif_t* esp_netif, const char** hostname, int cmock_num_calls);
void esp_netif_get_hostname_AddCallback(CMOCK_esp_netif_get_hostname_CALLBACK Callback);
void esp_netif_get_hostname_Stub(CMOCK_esp_netif_get_hostname_CALLBACK Callback);
#define esp_netif_get_hostname_StubWithCallback esp_netif_get_hostname_Stub
#define esp_netif_get_hostname_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, hostname, hostname_Depth, cmock_retval) esp_netif_get_hostname_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, hostname, hostname_Depth, cmock_retval)
void esp_netif_get_hostname_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, const char** hostname, int hostname_Depth, esp_err_t cmock_to_return);
#define esp_netif_get_hostname_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_hostname_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_hostname_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_hostname_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_hostname_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_hostname_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_hostname_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_hostname_ReturnThruPtr_hostname(hostname) esp_netif_get_hostname_CMockReturnMemThruPtr_hostname(__LINE__, hostname, sizeof(const char*))
#define esp_netif_get_hostname_ReturnArrayThruPtr_hostname(hostname, cmock_len) esp_netif_get_hostname_CMockReturnMemThruPtr_hostname(__LINE__, hostname, cmock_len * sizeof(*hostname))
#define esp_netif_get_hostname_ReturnMemThruPtr_hostname(hostname, cmock_size) esp_netif_get_hostname_CMockReturnMemThruPtr_hostname(__LINE__, hostname, cmock_size)
void esp_netif_get_hostname_CMockReturnMemThruPtr_hostname(UNITY_LINE_TYPE cmock_line, const char** hostname, size_t cmock_size);
#define esp_netif_get_hostname_IgnoreArg_esp_netif() esp_netif_get_hostname_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_hostname_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_hostname_IgnoreArg_hostname() esp_netif_get_hostname_CMockIgnoreArg_hostname(__LINE__)
void esp_netif_get_hostname_CMockIgnoreArg_hostname(UNITY_LINE_TYPE cmock_line);
#define esp_netif_is_netif_up_IgnoreAndReturn(cmock_retval) esp_netif_is_netif_up_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_is_netif_up_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define esp_netif_is_netif_up_StopIgnore() esp_netif_is_netif_up_CMockStopIgnore()
void esp_netif_is_netif_up_CMockStopIgnore(void);
#define esp_netif_is_netif_up_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_is_netif_up_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_is_netif_up_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, bool cmock_to_return);
typedef bool (* CMOCK_esp_netif_is_netif_up_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_is_netif_up_AddCallback(CMOCK_esp_netif_is_netif_up_CALLBACK Callback);
void esp_netif_is_netif_up_Stub(CMOCK_esp_netif_is_netif_up_CALLBACK Callback);
#define esp_netif_is_netif_up_StubWithCallback esp_netif_is_netif_up_Stub
#define esp_netif_is_netif_up_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_is_netif_up_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_is_netif_up_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, bool cmock_to_return);
#define esp_netif_is_netif_up_ReturnThruPtr_esp_netif(esp_netif) esp_netif_is_netif_up_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_is_netif_up_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_is_netif_up_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_is_netif_up_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_is_netif_up_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_is_netif_up_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_is_netif_up_IgnoreArg_esp_netif() esp_netif_is_netif_up_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_is_netif_up_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_ip_info_IgnoreAndReturn(cmock_retval) esp_netif_get_ip_info_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_ip_info_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_get_ip_info_StopIgnore() esp_netif_get_ip_info_CMockStopIgnore()
void esp_netif_get_ip_info_CMockStopIgnore(void);
#define esp_netif_get_ip_info_ExpectAndReturn(esp_netif, ip_info, cmock_retval) esp_netif_get_ip_info_CMockExpectAndReturn(__LINE__, esp_netif, ip_info, cmock_retval)
void esp_netif_get_ip_info_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_ip_info_t* ip_info, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_get_ip_info_CALLBACK)(esp_netif_t* esp_netif, esp_netif_ip_info_t* ip_info, int cmock_num_calls);
void esp_netif_get_ip_info_AddCallback(CMOCK_esp_netif_get_ip_info_CALLBACK Callback);
void esp_netif_get_ip_info_Stub(CMOCK_esp_netif_get_ip_info_CALLBACK Callback);
#define esp_netif_get_ip_info_StubWithCallback esp_netif_get_ip_info_Stub
#define esp_netif_get_ip_info_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, ip_info, ip_info_Depth, cmock_retval) esp_netif_get_ip_info_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, ip_info, ip_info_Depth, cmock_retval)
void esp_netif_get_ip_info_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_ip_info_t* ip_info, int ip_info_Depth, esp_err_t cmock_to_return);
#define esp_netif_get_ip_info_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_ip_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_ip_info_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_ip_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_ip_info_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_ip_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_ip_info_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_ip_info_ReturnThruPtr_ip_info(ip_info) esp_netif_get_ip_info_CMockReturnMemThruPtr_ip_info(__LINE__, ip_info, sizeof(esp_netif_ip_info_t))
#define esp_netif_get_ip_info_ReturnArrayThruPtr_ip_info(ip_info, cmock_len) esp_netif_get_ip_info_CMockReturnMemThruPtr_ip_info(__LINE__, ip_info, cmock_len * sizeof(*ip_info))
#define esp_netif_get_ip_info_ReturnMemThruPtr_ip_info(ip_info, cmock_size) esp_netif_get_ip_info_CMockReturnMemThruPtr_ip_info(__LINE__, ip_info, cmock_size)
void esp_netif_get_ip_info_CMockReturnMemThruPtr_ip_info(UNITY_LINE_TYPE cmock_line, esp_netif_ip_info_t* ip_info, size_t cmock_size);
#define esp_netif_get_ip_info_IgnoreArg_esp_netif() esp_netif_get_ip_info_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_ip_info_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_ip_info_IgnoreArg_ip_info() esp_netif_get_ip_info_CMockIgnoreArg_ip_info(__LINE__)
void esp_netif_get_ip_info_CMockIgnoreArg_ip_info(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_old_ip_info_IgnoreAndReturn(cmock_retval) esp_netif_get_old_ip_info_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_old_ip_info_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_get_old_ip_info_StopIgnore() esp_netif_get_old_ip_info_CMockStopIgnore()
void esp_netif_get_old_ip_info_CMockStopIgnore(void);
#define esp_netif_get_old_ip_info_ExpectAndReturn(esp_netif, ip_info, cmock_retval) esp_netif_get_old_ip_info_CMockExpectAndReturn(__LINE__, esp_netif, ip_info, cmock_retval)
void esp_netif_get_old_ip_info_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_ip_info_t* ip_info, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_get_old_ip_info_CALLBACK)(esp_netif_t* esp_netif, esp_netif_ip_info_t* ip_info, int cmock_num_calls);
void esp_netif_get_old_ip_info_AddCallback(CMOCK_esp_netif_get_old_ip_info_CALLBACK Callback);
void esp_netif_get_old_ip_info_Stub(CMOCK_esp_netif_get_old_ip_info_CALLBACK Callback);
#define esp_netif_get_old_ip_info_StubWithCallback esp_netif_get_old_ip_info_Stub
#define esp_netif_get_old_ip_info_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, ip_info, ip_info_Depth, cmock_retval) esp_netif_get_old_ip_info_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, ip_info, ip_info_Depth, cmock_retval)
void esp_netif_get_old_ip_info_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_ip_info_t* ip_info, int ip_info_Depth, esp_err_t cmock_to_return);
#define esp_netif_get_old_ip_info_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_old_ip_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_old_ip_info_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_old_ip_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_old_ip_info_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_old_ip_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_old_ip_info_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_old_ip_info_ReturnThruPtr_ip_info(ip_info) esp_netif_get_old_ip_info_CMockReturnMemThruPtr_ip_info(__LINE__, ip_info, sizeof(esp_netif_ip_info_t))
#define esp_netif_get_old_ip_info_ReturnArrayThruPtr_ip_info(ip_info, cmock_len) esp_netif_get_old_ip_info_CMockReturnMemThruPtr_ip_info(__LINE__, ip_info, cmock_len * sizeof(*ip_info))
#define esp_netif_get_old_ip_info_ReturnMemThruPtr_ip_info(ip_info, cmock_size) esp_netif_get_old_ip_info_CMockReturnMemThruPtr_ip_info(__LINE__, ip_info, cmock_size)
void esp_netif_get_old_ip_info_CMockReturnMemThruPtr_ip_info(UNITY_LINE_TYPE cmock_line, esp_netif_ip_info_t* ip_info, size_t cmock_size);
#define esp_netif_get_old_ip_info_IgnoreArg_esp_netif() esp_netif_get_old_ip_info_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_old_ip_info_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_old_ip_info_IgnoreArg_ip_info() esp_netif_get_old_ip_info_CMockIgnoreArg_ip_info(__LINE__)
void esp_netif_get_old_ip_info_CMockIgnoreArg_ip_info(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_ip_info_IgnoreAndReturn(cmock_retval) esp_netif_set_ip_info_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_set_ip_info_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_set_ip_info_StopIgnore() esp_netif_set_ip_info_CMockStopIgnore()
void esp_netif_set_ip_info_CMockStopIgnore(void);
#define esp_netif_set_ip_info_ExpectAndReturn(esp_netif, ip_info, cmock_retval) esp_netif_set_ip_info_CMockExpectAndReturn(__LINE__, esp_netif, ip_info, cmock_retval)
void esp_netif_set_ip_info_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, const esp_netif_ip_info_t* ip_info, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_set_ip_info_CALLBACK)(esp_netif_t* esp_netif, const esp_netif_ip_info_t* ip_info, int cmock_num_calls);
void esp_netif_set_ip_info_AddCallback(CMOCK_esp_netif_set_ip_info_CALLBACK Callback);
void esp_netif_set_ip_info_Stub(CMOCK_esp_netif_set_ip_info_CALLBACK Callback);
#define esp_netif_set_ip_info_StubWithCallback esp_netif_set_ip_info_Stub
#define esp_netif_set_ip_info_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, ip_info, ip_info_Depth, cmock_retval) esp_netif_set_ip_info_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, ip_info, ip_info_Depth, cmock_retval)
void esp_netif_set_ip_info_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, const esp_netif_ip_info_t* ip_info, int ip_info_Depth, esp_err_t cmock_to_return);
#define esp_netif_set_ip_info_ReturnThruPtr_esp_netif(esp_netif) esp_netif_set_ip_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_set_ip_info_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_set_ip_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_set_ip_info_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_set_ip_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_set_ip_info_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_set_ip_info_IgnoreArg_esp_netif() esp_netif_set_ip_info_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_set_ip_info_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_ip_info_IgnoreArg_ip_info() esp_netif_set_ip_info_CMockIgnoreArg_ip_info(__LINE__)
void esp_netif_set_ip_info_CMockIgnoreArg_ip_info(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_old_ip_info_IgnoreAndReturn(cmock_retval) esp_netif_set_old_ip_info_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_set_old_ip_info_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_set_old_ip_info_StopIgnore() esp_netif_set_old_ip_info_CMockStopIgnore()
void esp_netif_set_old_ip_info_CMockStopIgnore(void);
#define esp_netif_set_old_ip_info_ExpectAndReturn(esp_netif, ip_info, cmock_retval) esp_netif_set_old_ip_info_CMockExpectAndReturn(__LINE__, esp_netif, ip_info, cmock_retval)
void esp_netif_set_old_ip_info_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, const esp_netif_ip_info_t* ip_info, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_set_old_ip_info_CALLBACK)(esp_netif_t* esp_netif, const esp_netif_ip_info_t* ip_info, int cmock_num_calls);
void esp_netif_set_old_ip_info_AddCallback(CMOCK_esp_netif_set_old_ip_info_CALLBACK Callback);
void esp_netif_set_old_ip_info_Stub(CMOCK_esp_netif_set_old_ip_info_CALLBACK Callback);
#define esp_netif_set_old_ip_info_StubWithCallback esp_netif_set_old_ip_info_Stub
#define esp_netif_set_old_ip_info_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, ip_info, ip_info_Depth, cmock_retval) esp_netif_set_old_ip_info_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, ip_info, ip_info_Depth, cmock_retval)
void esp_netif_set_old_ip_info_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, const esp_netif_ip_info_t* ip_info, int ip_info_Depth, esp_err_t cmock_to_return);
#define esp_netif_set_old_ip_info_ReturnThruPtr_esp_netif(esp_netif) esp_netif_set_old_ip_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_set_old_ip_info_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_set_old_ip_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_set_old_ip_info_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_set_old_ip_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_set_old_ip_info_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_set_old_ip_info_IgnoreArg_esp_netif() esp_netif_set_old_ip_info_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_set_old_ip_info_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_old_ip_info_IgnoreArg_ip_info() esp_netif_set_old_ip_info_CMockIgnoreArg_ip_info(__LINE__)
void esp_netif_set_old_ip_info_CMockIgnoreArg_ip_info(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_netif_impl_index_IgnoreAndReturn(cmock_retval) esp_netif_get_netif_impl_index_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_netif_impl_index_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define esp_netif_get_netif_impl_index_StopIgnore() esp_netif_get_netif_impl_index_CMockStopIgnore()
void esp_netif_get_netif_impl_index_CMockStopIgnore(void);
#define esp_netif_get_netif_impl_index_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_get_netif_impl_index_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_get_netif_impl_index_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int cmock_to_return);
typedef int (* CMOCK_esp_netif_get_netif_impl_index_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_get_netif_impl_index_AddCallback(CMOCK_esp_netif_get_netif_impl_index_CALLBACK Callback);
void esp_netif_get_netif_impl_index_Stub(CMOCK_esp_netif_get_netif_impl_index_CALLBACK Callback);
#define esp_netif_get_netif_impl_index_StubWithCallback esp_netif_get_netif_impl_index_Stub
#define esp_netif_get_netif_impl_index_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_get_netif_impl_index_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_get_netif_impl_index_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, int cmock_to_return);
#define esp_netif_get_netif_impl_index_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_netif_impl_index_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_netif_impl_index_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_netif_impl_index_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_netif_impl_index_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_netif_impl_index_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_netif_impl_index_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_netif_impl_index_IgnoreArg_esp_netif() esp_netif_get_netif_impl_index_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_netif_impl_index_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_netif_impl_name_IgnoreAndReturn(cmock_retval) esp_netif_get_netif_impl_name_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_netif_impl_name_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_get_netif_impl_name_StopIgnore() esp_netif_get_netif_impl_name_CMockStopIgnore()
void esp_netif_get_netif_impl_name_CMockStopIgnore(void);
#define esp_netif_get_netif_impl_name_ExpectAndReturn(esp_netif, name, cmock_retval) esp_netif_get_netif_impl_name_CMockExpectAndReturn(__LINE__, esp_netif, name, cmock_retval)
void esp_netif_get_netif_impl_name_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, char* name, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_get_netif_impl_name_CALLBACK)(esp_netif_t* esp_netif, char* name, int cmock_num_calls);
void esp_netif_get_netif_impl_name_AddCallback(CMOCK_esp_netif_get_netif_impl_name_CALLBACK Callback);
void esp_netif_get_netif_impl_name_Stub(CMOCK_esp_netif_get_netif_impl_name_CALLBACK Callback);
#define esp_netif_get_netif_impl_name_StubWithCallback esp_netif_get_netif_impl_name_Stub
#define esp_netif_get_netif_impl_name_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, name, cmock_retval) esp_netif_get_netif_impl_name_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, name, cmock_retval)
void esp_netif_get_netif_impl_name_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, char* name, esp_err_t cmock_to_return);
#define esp_netif_get_netif_impl_name_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_netif_impl_name_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_netif_impl_name_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_netif_impl_name_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_netif_impl_name_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_netif_impl_name_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_netif_impl_name_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_netif_impl_name_ReturnThruPtr_name(name) esp_netif_get_netif_impl_name_CMockReturnMemThruPtr_name(__LINE__, name, sizeof(char))
#define esp_netif_get_netif_impl_name_ReturnArrayThruPtr_name(name, cmock_len) esp_netif_get_netif_impl_name_CMockReturnMemThruPtr_name(__LINE__, name, cmock_len * sizeof(*name))
#define esp_netif_get_netif_impl_name_ReturnMemThruPtr_name(name, cmock_size) esp_netif_get_netif_impl_name_CMockReturnMemThruPtr_name(__LINE__, name, cmock_size)
void esp_netif_get_netif_impl_name_CMockReturnMemThruPtr_name(UNITY_LINE_TYPE cmock_line, char* name, size_t cmock_size);
#define esp_netif_get_netif_impl_name_IgnoreArg_esp_netif() esp_netif_get_netif_impl_name_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_netif_impl_name_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_netif_impl_name_IgnoreArg_name() esp_netif_get_netif_impl_name_CMockIgnoreArg_name(__LINE__)
void esp_netif_get_netif_impl_name_CMockIgnoreArg_name(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcps_option_IgnoreAndReturn(cmock_retval) esp_netif_dhcps_option_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_dhcps_option_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_dhcps_option_StopIgnore() esp_netif_dhcps_option_CMockStopIgnore()
void esp_netif_dhcps_option_CMockStopIgnore(void);
#define esp_netif_dhcps_option_ExpectAndReturn(esp_netif, opt_op, opt_id, opt_val, opt_len, cmock_retval) esp_netif_dhcps_option_CMockExpectAndReturn(__LINE__, esp_netif, opt_op, opt_id, opt_val, opt_len, cmock_retval)
void esp_netif_dhcps_option_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_dhcp_option_mode_t opt_op, esp_netif_dhcp_option_id_t opt_id, void* opt_val, uint32_t opt_len, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_dhcps_option_CALLBACK)(esp_netif_t* esp_netif, esp_netif_dhcp_option_mode_t opt_op, esp_netif_dhcp_option_id_t opt_id, void* opt_val, uint32_t opt_len, int cmock_num_calls);
void esp_netif_dhcps_option_AddCallback(CMOCK_esp_netif_dhcps_option_CALLBACK Callback);
void esp_netif_dhcps_option_Stub(CMOCK_esp_netif_dhcps_option_CALLBACK Callback);
#define esp_netif_dhcps_option_StubWithCallback esp_netif_dhcps_option_Stub
#define esp_netif_dhcps_option_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, opt_op, opt_id, opt_val, opt_val_Depth, opt_len, cmock_retval) esp_netif_dhcps_option_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, opt_op, opt_id, opt_val, opt_val_Depth, opt_len, cmock_retval)
void esp_netif_dhcps_option_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_dhcp_option_mode_t opt_op, esp_netif_dhcp_option_id_t opt_id, void* opt_val, int opt_val_Depth, uint32_t opt_len, esp_err_t cmock_to_return);
#define esp_netif_dhcps_option_ReturnThruPtr_esp_netif(esp_netif) esp_netif_dhcps_option_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_dhcps_option_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_dhcps_option_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_dhcps_option_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_dhcps_option_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_dhcps_option_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_dhcps_option_ReturnThruPtr_opt_val(opt_val) esp_netif_dhcps_option_CMockReturnMemThruPtr_opt_val(__LINE__, opt_val, sizeof(void))
#define esp_netif_dhcps_option_ReturnArrayThruPtr_opt_val(opt_val, cmock_len) esp_netif_dhcps_option_CMockReturnMemThruPtr_opt_val(__LINE__, opt_val, cmock_len * sizeof(*opt_val))
#define esp_netif_dhcps_option_ReturnMemThruPtr_opt_val(opt_val, cmock_size) esp_netif_dhcps_option_CMockReturnMemThruPtr_opt_val(__LINE__, opt_val, cmock_size)
void esp_netif_dhcps_option_CMockReturnMemThruPtr_opt_val(UNITY_LINE_TYPE cmock_line, void* opt_val, size_t cmock_size);
#define esp_netif_dhcps_option_IgnoreArg_esp_netif() esp_netif_dhcps_option_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_dhcps_option_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcps_option_IgnoreArg_opt_op() esp_netif_dhcps_option_CMockIgnoreArg_opt_op(__LINE__)
void esp_netif_dhcps_option_CMockIgnoreArg_opt_op(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcps_option_IgnoreArg_opt_id() esp_netif_dhcps_option_CMockIgnoreArg_opt_id(__LINE__)
void esp_netif_dhcps_option_CMockIgnoreArg_opt_id(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcps_option_IgnoreArg_opt_val() esp_netif_dhcps_option_CMockIgnoreArg_opt_val(__LINE__)
void esp_netif_dhcps_option_CMockIgnoreArg_opt_val(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcps_option_IgnoreArg_opt_len() esp_netif_dhcps_option_CMockIgnoreArg_opt_len(__LINE__)
void esp_netif_dhcps_option_CMockIgnoreArg_opt_len(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcpc_option_IgnoreAndReturn(cmock_retval) esp_netif_dhcpc_option_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_dhcpc_option_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_dhcpc_option_StopIgnore() esp_netif_dhcpc_option_CMockStopIgnore()
void esp_netif_dhcpc_option_CMockStopIgnore(void);
#define esp_netif_dhcpc_option_ExpectAndReturn(esp_netif, opt_op, opt_id, opt_val, opt_len, cmock_retval) esp_netif_dhcpc_option_CMockExpectAndReturn(__LINE__, esp_netif, opt_op, opt_id, opt_val, opt_len, cmock_retval)
void esp_netif_dhcpc_option_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_dhcp_option_mode_t opt_op, esp_netif_dhcp_option_id_t opt_id, void* opt_val, uint32_t opt_len, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_dhcpc_option_CALLBACK)(esp_netif_t* esp_netif, esp_netif_dhcp_option_mode_t opt_op, esp_netif_dhcp_option_id_t opt_id, void* opt_val, uint32_t opt_len, int cmock_num_calls);
void esp_netif_dhcpc_option_AddCallback(CMOCK_esp_netif_dhcpc_option_CALLBACK Callback);
void esp_netif_dhcpc_option_Stub(CMOCK_esp_netif_dhcpc_option_CALLBACK Callback);
#define esp_netif_dhcpc_option_StubWithCallback esp_netif_dhcpc_option_Stub
#define esp_netif_dhcpc_option_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, opt_op, opt_id, opt_val, opt_val_Depth, opt_len, cmock_retval) esp_netif_dhcpc_option_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, opt_op, opt_id, opt_val, opt_val_Depth, opt_len, cmock_retval)
void esp_netif_dhcpc_option_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_dhcp_option_mode_t opt_op, esp_netif_dhcp_option_id_t opt_id, void* opt_val, int opt_val_Depth, uint32_t opt_len, esp_err_t cmock_to_return);
#define esp_netif_dhcpc_option_ReturnThruPtr_esp_netif(esp_netif) esp_netif_dhcpc_option_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_dhcpc_option_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_dhcpc_option_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_dhcpc_option_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_dhcpc_option_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_dhcpc_option_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_dhcpc_option_ReturnThruPtr_opt_val(opt_val) esp_netif_dhcpc_option_CMockReturnMemThruPtr_opt_val(__LINE__, opt_val, sizeof(void))
#define esp_netif_dhcpc_option_ReturnArrayThruPtr_opt_val(opt_val, cmock_len) esp_netif_dhcpc_option_CMockReturnMemThruPtr_opt_val(__LINE__, opt_val, cmock_len * sizeof(*opt_val))
#define esp_netif_dhcpc_option_ReturnMemThruPtr_opt_val(opt_val, cmock_size) esp_netif_dhcpc_option_CMockReturnMemThruPtr_opt_val(__LINE__, opt_val, cmock_size)
void esp_netif_dhcpc_option_CMockReturnMemThruPtr_opt_val(UNITY_LINE_TYPE cmock_line, void* opt_val, size_t cmock_size);
#define esp_netif_dhcpc_option_IgnoreArg_esp_netif() esp_netif_dhcpc_option_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_dhcpc_option_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcpc_option_IgnoreArg_opt_op() esp_netif_dhcpc_option_CMockIgnoreArg_opt_op(__LINE__)
void esp_netif_dhcpc_option_CMockIgnoreArg_opt_op(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcpc_option_IgnoreArg_opt_id() esp_netif_dhcpc_option_CMockIgnoreArg_opt_id(__LINE__)
void esp_netif_dhcpc_option_CMockIgnoreArg_opt_id(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcpc_option_IgnoreArg_opt_val() esp_netif_dhcpc_option_CMockIgnoreArg_opt_val(__LINE__)
void esp_netif_dhcpc_option_CMockIgnoreArg_opt_val(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcpc_option_IgnoreArg_opt_len() esp_netif_dhcpc_option_CMockIgnoreArg_opt_len(__LINE__)
void esp_netif_dhcpc_option_CMockIgnoreArg_opt_len(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcpc_start_IgnoreAndReturn(cmock_retval) esp_netif_dhcpc_start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_dhcpc_start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_dhcpc_start_StopIgnore() esp_netif_dhcpc_start_CMockStopIgnore()
void esp_netif_dhcpc_start_CMockStopIgnore(void);
#define esp_netif_dhcpc_start_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_dhcpc_start_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_dhcpc_start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_dhcpc_start_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_dhcpc_start_AddCallback(CMOCK_esp_netif_dhcpc_start_CALLBACK Callback);
void esp_netif_dhcpc_start_Stub(CMOCK_esp_netif_dhcpc_start_CALLBACK Callback);
#define esp_netif_dhcpc_start_StubWithCallback esp_netif_dhcpc_start_Stub
#define esp_netif_dhcpc_start_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_dhcpc_start_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_dhcpc_start_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_err_t cmock_to_return);
#define esp_netif_dhcpc_start_ReturnThruPtr_esp_netif(esp_netif) esp_netif_dhcpc_start_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_dhcpc_start_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_dhcpc_start_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_dhcpc_start_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_dhcpc_start_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_dhcpc_start_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_dhcpc_start_IgnoreArg_esp_netif() esp_netif_dhcpc_start_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_dhcpc_start_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcpc_stop_IgnoreAndReturn(cmock_retval) esp_netif_dhcpc_stop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_dhcpc_stop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_dhcpc_stop_StopIgnore() esp_netif_dhcpc_stop_CMockStopIgnore()
void esp_netif_dhcpc_stop_CMockStopIgnore(void);
#define esp_netif_dhcpc_stop_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_dhcpc_stop_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_dhcpc_stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_dhcpc_stop_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_dhcpc_stop_AddCallback(CMOCK_esp_netif_dhcpc_stop_CALLBACK Callback);
void esp_netif_dhcpc_stop_Stub(CMOCK_esp_netif_dhcpc_stop_CALLBACK Callback);
#define esp_netif_dhcpc_stop_StubWithCallback esp_netif_dhcpc_stop_Stub
#define esp_netif_dhcpc_stop_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_dhcpc_stop_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_dhcpc_stop_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_err_t cmock_to_return);
#define esp_netif_dhcpc_stop_ReturnThruPtr_esp_netif(esp_netif) esp_netif_dhcpc_stop_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_dhcpc_stop_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_dhcpc_stop_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_dhcpc_stop_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_dhcpc_stop_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_dhcpc_stop_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_dhcpc_stop_IgnoreArg_esp_netif() esp_netif_dhcpc_stop_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_dhcpc_stop_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcpc_get_status_IgnoreAndReturn(cmock_retval) esp_netif_dhcpc_get_status_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_dhcpc_get_status_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_dhcpc_get_status_StopIgnore() esp_netif_dhcpc_get_status_CMockStopIgnore()
void esp_netif_dhcpc_get_status_CMockStopIgnore(void);
#define esp_netif_dhcpc_get_status_ExpectAndReturn(esp_netif, status, cmock_retval) esp_netif_dhcpc_get_status_CMockExpectAndReturn(__LINE__, esp_netif, status, cmock_retval)
void esp_netif_dhcpc_get_status_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_dhcp_status_t* status, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_dhcpc_get_status_CALLBACK)(esp_netif_t* esp_netif, esp_netif_dhcp_status_t* status, int cmock_num_calls);
void esp_netif_dhcpc_get_status_AddCallback(CMOCK_esp_netif_dhcpc_get_status_CALLBACK Callback);
void esp_netif_dhcpc_get_status_Stub(CMOCK_esp_netif_dhcpc_get_status_CALLBACK Callback);
#define esp_netif_dhcpc_get_status_StubWithCallback esp_netif_dhcpc_get_status_Stub
#define esp_netif_dhcpc_get_status_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, status, status_Depth, cmock_retval) esp_netif_dhcpc_get_status_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, status, status_Depth, cmock_retval)
void esp_netif_dhcpc_get_status_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_dhcp_status_t* status, int status_Depth, esp_err_t cmock_to_return);
#define esp_netif_dhcpc_get_status_ReturnThruPtr_esp_netif(esp_netif) esp_netif_dhcpc_get_status_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_dhcpc_get_status_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_dhcpc_get_status_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_dhcpc_get_status_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_dhcpc_get_status_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_dhcpc_get_status_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_dhcpc_get_status_ReturnThruPtr_status(status) esp_netif_dhcpc_get_status_CMockReturnMemThruPtr_status(__LINE__, status, sizeof(esp_netif_dhcp_status_t))
#define esp_netif_dhcpc_get_status_ReturnArrayThruPtr_status(status, cmock_len) esp_netif_dhcpc_get_status_CMockReturnMemThruPtr_status(__LINE__, status, cmock_len * sizeof(*status))
#define esp_netif_dhcpc_get_status_ReturnMemThruPtr_status(status, cmock_size) esp_netif_dhcpc_get_status_CMockReturnMemThruPtr_status(__LINE__, status, cmock_size)
void esp_netif_dhcpc_get_status_CMockReturnMemThruPtr_status(UNITY_LINE_TYPE cmock_line, esp_netif_dhcp_status_t* status, size_t cmock_size);
#define esp_netif_dhcpc_get_status_IgnoreArg_esp_netif() esp_netif_dhcpc_get_status_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_dhcpc_get_status_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcpc_get_status_IgnoreArg_status() esp_netif_dhcpc_get_status_CMockIgnoreArg_status(__LINE__)
void esp_netif_dhcpc_get_status_CMockIgnoreArg_status(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcps_get_status_IgnoreAndReturn(cmock_retval) esp_netif_dhcps_get_status_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_dhcps_get_status_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_dhcps_get_status_StopIgnore() esp_netif_dhcps_get_status_CMockStopIgnore()
void esp_netif_dhcps_get_status_CMockStopIgnore(void);
#define esp_netif_dhcps_get_status_ExpectAndReturn(esp_netif, status, cmock_retval) esp_netif_dhcps_get_status_CMockExpectAndReturn(__LINE__, esp_netif, status, cmock_retval)
void esp_netif_dhcps_get_status_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_dhcp_status_t* status, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_dhcps_get_status_CALLBACK)(esp_netif_t* esp_netif, esp_netif_dhcp_status_t* status, int cmock_num_calls);
void esp_netif_dhcps_get_status_AddCallback(CMOCK_esp_netif_dhcps_get_status_CALLBACK Callback);
void esp_netif_dhcps_get_status_Stub(CMOCK_esp_netif_dhcps_get_status_CALLBACK Callback);
#define esp_netif_dhcps_get_status_StubWithCallback esp_netif_dhcps_get_status_Stub
#define esp_netif_dhcps_get_status_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, status, status_Depth, cmock_retval) esp_netif_dhcps_get_status_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, status, status_Depth, cmock_retval)
void esp_netif_dhcps_get_status_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_dhcp_status_t* status, int status_Depth, esp_err_t cmock_to_return);
#define esp_netif_dhcps_get_status_ReturnThruPtr_esp_netif(esp_netif) esp_netif_dhcps_get_status_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_dhcps_get_status_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_dhcps_get_status_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_dhcps_get_status_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_dhcps_get_status_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_dhcps_get_status_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_dhcps_get_status_ReturnThruPtr_status(status) esp_netif_dhcps_get_status_CMockReturnMemThruPtr_status(__LINE__, status, sizeof(esp_netif_dhcp_status_t))
#define esp_netif_dhcps_get_status_ReturnArrayThruPtr_status(status, cmock_len) esp_netif_dhcps_get_status_CMockReturnMemThruPtr_status(__LINE__, status, cmock_len * sizeof(*status))
#define esp_netif_dhcps_get_status_ReturnMemThruPtr_status(status, cmock_size) esp_netif_dhcps_get_status_CMockReturnMemThruPtr_status(__LINE__, status, cmock_size)
void esp_netif_dhcps_get_status_CMockReturnMemThruPtr_status(UNITY_LINE_TYPE cmock_line, esp_netif_dhcp_status_t* status, size_t cmock_size);
#define esp_netif_dhcps_get_status_IgnoreArg_esp_netif() esp_netif_dhcps_get_status_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_dhcps_get_status_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcps_get_status_IgnoreArg_status() esp_netif_dhcps_get_status_CMockIgnoreArg_status(__LINE__)
void esp_netif_dhcps_get_status_CMockIgnoreArg_status(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcps_start_IgnoreAndReturn(cmock_retval) esp_netif_dhcps_start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_dhcps_start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_dhcps_start_StopIgnore() esp_netif_dhcps_start_CMockStopIgnore()
void esp_netif_dhcps_start_CMockStopIgnore(void);
#define esp_netif_dhcps_start_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_dhcps_start_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_dhcps_start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_dhcps_start_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_dhcps_start_AddCallback(CMOCK_esp_netif_dhcps_start_CALLBACK Callback);
void esp_netif_dhcps_start_Stub(CMOCK_esp_netif_dhcps_start_CALLBACK Callback);
#define esp_netif_dhcps_start_StubWithCallback esp_netif_dhcps_start_Stub
#define esp_netif_dhcps_start_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_dhcps_start_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_dhcps_start_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_err_t cmock_to_return);
#define esp_netif_dhcps_start_ReturnThruPtr_esp_netif(esp_netif) esp_netif_dhcps_start_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_dhcps_start_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_dhcps_start_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_dhcps_start_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_dhcps_start_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_dhcps_start_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_dhcps_start_IgnoreArg_esp_netif() esp_netif_dhcps_start_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_dhcps_start_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_dhcps_stop_IgnoreAndReturn(cmock_retval) esp_netif_dhcps_stop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_dhcps_stop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_dhcps_stop_StopIgnore() esp_netif_dhcps_stop_CMockStopIgnore()
void esp_netif_dhcps_stop_CMockStopIgnore(void);
#define esp_netif_dhcps_stop_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_dhcps_stop_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_dhcps_stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_dhcps_stop_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_dhcps_stop_AddCallback(CMOCK_esp_netif_dhcps_stop_CALLBACK Callback);
void esp_netif_dhcps_stop_Stub(CMOCK_esp_netif_dhcps_stop_CALLBACK Callback);
#define esp_netif_dhcps_stop_StubWithCallback esp_netif_dhcps_stop_Stub
#define esp_netif_dhcps_stop_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_dhcps_stop_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_dhcps_stop_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_err_t cmock_to_return);
#define esp_netif_dhcps_stop_ReturnThruPtr_esp_netif(esp_netif) esp_netif_dhcps_stop_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_dhcps_stop_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_dhcps_stop_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_dhcps_stop_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_dhcps_stop_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_dhcps_stop_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_dhcps_stop_IgnoreArg_esp_netif() esp_netif_dhcps_stop_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_dhcps_stop_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_dns_info_IgnoreAndReturn(cmock_retval) esp_netif_set_dns_info_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_set_dns_info_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_set_dns_info_StopIgnore() esp_netif_set_dns_info_CMockStopIgnore()
void esp_netif_set_dns_info_CMockStopIgnore(void);
#define esp_netif_set_dns_info_ExpectAndReturn(esp_netif, type, dns, cmock_retval) esp_netif_set_dns_info_CMockExpectAndReturn(__LINE__, esp_netif, type, dns, cmock_retval)
void esp_netif_set_dns_info_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_dns_type_t type, esp_netif_dns_info_t* dns, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_set_dns_info_CALLBACK)(esp_netif_t* esp_netif, esp_netif_dns_type_t type, esp_netif_dns_info_t* dns, int cmock_num_calls);
void esp_netif_set_dns_info_AddCallback(CMOCK_esp_netif_set_dns_info_CALLBACK Callback);
void esp_netif_set_dns_info_Stub(CMOCK_esp_netif_set_dns_info_CALLBACK Callback);
#define esp_netif_set_dns_info_StubWithCallback esp_netif_set_dns_info_Stub
#define esp_netif_set_dns_info_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, type, dns, dns_Depth, cmock_retval) esp_netif_set_dns_info_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, type, dns, dns_Depth, cmock_retval)
void esp_netif_set_dns_info_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_dns_type_t type, esp_netif_dns_info_t* dns, int dns_Depth, esp_err_t cmock_to_return);
#define esp_netif_set_dns_info_ReturnThruPtr_esp_netif(esp_netif) esp_netif_set_dns_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_set_dns_info_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_set_dns_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_set_dns_info_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_set_dns_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_set_dns_info_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_set_dns_info_ReturnThruPtr_dns(dns) esp_netif_set_dns_info_CMockReturnMemThruPtr_dns(__LINE__, dns, sizeof(esp_netif_dns_info_t))
#define esp_netif_set_dns_info_ReturnArrayThruPtr_dns(dns, cmock_len) esp_netif_set_dns_info_CMockReturnMemThruPtr_dns(__LINE__, dns, cmock_len * sizeof(*dns))
#define esp_netif_set_dns_info_ReturnMemThruPtr_dns(dns, cmock_size) esp_netif_set_dns_info_CMockReturnMemThruPtr_dns(__LINE__, dns, cmock_size)
void esp_netif_set_dns_info_CMockReturnMemThruPtr_dns(UNITY_LINE_TYPE cmock_line, esp_netif_dns_info_t* dns, size_t cmock_size);
#define esp_netif_set_dns_info_IgnoreArg_esp_netif() esp_netif_set_dns_info_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_set_dns_info_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_dns_info_IgnoreArg_type() esp_netif_set_dns_info_CMockIgnoreArg_type(__LINE__)
void esp_netif_set_dns_info_CMockIgnoreArg_type(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_dns_info_IgnoreArg_dns() esp_netif_set_dns_info_CMockIgnoreArg_dns(__LINE__)
void esp_netif_set_dns_info_CMockIgnoreArg_dns(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_dns_info_IgnoreAndReturn(cmock_retval) esp_netif_get_dns_info_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_dns_info_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_get_dns_info_StopIgnore() esp_netif_get_dns_info_CMockStopIgnore()
void esp_netif_get_dns_info_CMockStopIgnore(void);
#define esp_netif_get_dns_info_ExpectAndReturn(esp_netif, type, dns, cmock_retval) esp_netif_get_dns_info_CMockExpectAndReturn(__LINE__, esp_netif, type, dns, cmock_retval)
void esp_netif_get_dns_info_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_dns_type_t type, esp_netif_dns_info_t* dns, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_get_dns_info_CALLBACK)(esp_netif_t* esp_netif, esp_netif_dns_type_t type, esp_netif_dns_info_t* dns, int cmock_num_calls);
void esp_netif_get_dns_info_AddCallback(CMOCK_esp_netif_get_dns_info_CALLBACK Callback);
void esp_netif_get_dns_info_Stub(CMOCK_esp_netif_get_dns_info_CALLBACK Callback);
#define esp_netif_get_dns_info_StubWithCallback esp_netif_get_dns_info_Stub
#define esp_netif_get_dns_info_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, type, dns, dns_Depth, cmock_retval) esp_netif_get_dns_info_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, type, dns, dns_Depth, cmock_retval)
void esp_netif_get_dns_info_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_dns_type_t type, esp_netif_dns_info_t* dns, int dns_Depth, esp_err_t cmock_to_return);
#define esp_netif_get_dns_info_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_dns_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_dns_info_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_dns_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_dns_info_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_dns_info_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_dns_info_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_dns_info_ReturnThruPtr_dns(dns) esp_netif_get_dns_info_CMockReturnMemThruPtr_dns(__LINE__, dns, sizeof(esp_netif_dns_info_t))
#define esp_netif_get_dns_info_ReturnArrayThruPtr_dns(dns, cmock_len) esp_netif_get_dns_info_CMockReturnMemThruPtr_dns(__LINE__, dns, cmock_len * sizeof(*dns))
#define esp_netif_get_dns_info_ReturnMemThruPtr_dns(dns, cmock_size) esp_netif_get_dns_info_CMockReturnMemThruPtr_dns(__LINE__, dns, cmock_size)
void esp_netif_get_dns_info_CMockReturnMemThruPtr_dns(UNITY_LINE_TYPE cmock_line, esp_netif_dns_info_t* dns, size_t cmock_size);
#define esp_netif_get_dns_info_IgnoreArg_esp_netif() esp_netif_get_dns_info_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_dns_info_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_dns_info_IgnoreArg_type() esp_netif_get_dns_info_CMockIgnoreArg_type(__LINE__)
void esp_netif_get_dns_info_CMockIgnoreArg_type(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_dns_info_IgnoreArg_dns() esp_netif_get_dns_info_CMockIgnoreArg_dns(__LINE__)
void esp_netif_get_dns_info_CMockIgnoreArg_dns(UNITY_LINE_TYPE cmock_line);
#define esp_netif_create_ip6_linklocal_IgnoreAndReturn(cmock_retval) esp_netif_create_ip6_linklocal_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_create_ip6_linklocal_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_create_ip6_linklocal_StopIgnore() esp_netif_create_ip6_linklocal_CMockStopIgnore()
void esp_netif_create_ip6_linklocal_CMockStopIgnore(void);
#define esp_netif_create_ip6_linklocal_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_create_ip6_linklocal_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_create_ip6_linklocal_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_create_ip6_linklocal_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_create_ip6_linklocal_AddCallback(CMOCK_esp_netif_create_ip6_linklocal_CALLBACK Callback);
void esp_netif_create_ip6_linklocal_Stub(CMOCK_esp_netif_create_ip6_linklocal_CALLBACK Callback);
#define esp_netif_create_ip6_linklocal_StubWithCallback esp_netif_create_ip6_linklocal_Stub
#define esp_netif_create_ip6_linklocal_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_create_ip6_linklocal_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_create_ip6_linklocal_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_err_t cmock_to_return);
#define esp_netif_create_ip6_linklocal_ReturnThruPtr_esp_netif(esp_netif) esp_netif_create_ip6_linklocal_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_create_ip6_linklocal_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_create_ip6_linklocal_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_create_ip6_linklocal_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_create_ip6_linklocal_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_create_ip6_linklocal_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_create_ip6_linklocal_IgnoreArg_esp_netif() esp_netif_create_ip6_linklocal_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_create_ip6_linklocal_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_ip6_linklocal_IgnoreAndReturn(cmock_retval) esp_netif_get_ip6_linklocal_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_ip6_linklocal_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_get_ip6_linklocal_StopIgnore() esp_netif_get_ip6_linklocal_CMockStopIgnore()
void esp_netif_get_ip6_linklocal_CMockStopIgnore(void);
#define esp_netif_get_ip6_linklocal_ExpectAndReturn(esp_netif, if_ip6, cmock_retval) esp_netif_get_ip6_linklocal_CMockExpectAndReturn(__LINE__, esp_netif, if_ip6, cmock_retval)
void esp_netif_get_ip6_linklocal_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_ip6_addr_t* if_ip6, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_get_ip6_linklocal_CALLBACK)(esp_netif_t* esp_netif, esp_ip6_addr_t* if_ip6, int cmock_num_calls);
void esp_netif_get_ip6_linklocal_AddCallback(CMOCK_esp_netif_get_ip6_linklocal_CALLBACK Callback);
void esp_netif_get_ip6_linklocal_Stub(CMOCK_esp_netif_get_ip6_linklocal_CALLBACK Callback);
#define esp_netif_get_ip6_linklocal_StubWithCallback esp_netif_get_ip6_linklocal_Stub
#define esp_netif_get_ip6_linklocal_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, if_ip6, if_ip6_Depth, cmock_retval) esp_netif_get_ip6_linklocal_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, if_ip6, if_ip6_Depth, cmock_retval)
void esp_netif_get_ip6_linklocal_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_ip6_addr_t* if_ip6, int if_ip6_Depth, esp_err_t cmock_to_return);
#define esp_netif_get_ip6_linklocal_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_ip6_linklocal_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_ip6_linklocal_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_ip6_linklocal_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_ip6_linklocal_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_ip6_linklocal_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_ip6_linklocal_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_ip6_linklocal_ReturnThruPtr_if_ip6(if_ip6) esp_netif_get_ip6_linklocal_CMockReturnMemThruPtr_if_ip6(__LINE__, if_ip6, sizeof(esp_ip6_addr_t))
#define esp_netif_get_ip6_linklocal_ReturnArrayThruPtr_if_ip6(if_ip6, cmock_len) esp_netif_get_ip6_linklocal_CMockReturnMemThruPtr_if_ip6(__LINE__, if_ip6, cmock_len * sizeof(*if_ip6))
#define esp_netif_get_ip6_linklocal_ReturnMemThruPtr_if_ip6(if_ip6, cmock_size) esp_netif_get_ip6_linklocal_CMockReturnMemThruPtr_if_ip6(__LINE__, if_ip6, cmock_size)
void esp_netif_get_ip6_linklocal_CMockReturnMemThruPtr_if_ip6(UNITY_LINE_TYPE cmock_line, esp_ip6_addr_t* if_ip6, size_t cmock_size);
#define esp_netif_get_ip6_linklocal_IgnoreArg_esp_netif() esp_netif_get_ip6_linklocal_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_ip6_linklocal_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_ip6_linklocal_IgnoreArg_if_ip6() esp_netif_get_ip6_linklocal_CMockIgnoreArg_if_ip6(__LINE__)
void esp_netif_get_ip6_linklocal_CMockIgnoreArg_if_ip6(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_ip6_global_IgnoreAndReturn(cmock_retval) esp_netif_get_ip6_global_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_ip6_global_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_get_ip6_global_StopIgnore() esp_netif_get_ip6_global_CMockStopIgnore()
void esp_netif_get_ip6_global_CMockStopIgnore(void);
#define esp_netif_get_ip6_global_ExpectAndReturn(esp_netif, if_ip6, cmock_retval) esp_netif_get_ip6_global_CMockExpectAndReturn(__LINE__, esp_netif, if_ip6, cmock_retval)
void esp_netif_get_ip6_global_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_ip6_addr_t* if_ip6, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_get_ip6_global_CALLBACK)(esp_netif_t* esp_netif, esp_ip6_addr_t* if_ip6, int cmock_num_calls);
void esp_netif_get_ip6_global_AddCallback(CMOCK_esp_netif_get_ip6_global_CALLBACK Callback);
void esp_netif_get_ip6_global_Stub(CMOCK_esp_netif_get_ip6_global_CALLBACK Callback);
#define esp_netif_get_ip6_global_StubWithCallback esp_netif_get_ip6_global_Stub
#define esp_netif_get_ip6_global_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, if_ip6, if_ip6_Depth, cmock_retval) esp_netif_get_ip6_global_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, if_ip6, if_ip6_Depth, cmock_retval)
void esp_netif_get_ip6_global_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_ip6_addr_t* if_ip6, int if_ip6_Depth, esp_err_t cmock_to_return);
#define esp_netif_get_ip6_global_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_ip6_global_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_ip6_global_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_ip6_global_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_ip6_global_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_ip6_global_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_ip6_global_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_ip6_global_ReturnThruPtr_if_ip6(if_ip6) esp_netif_get_ip6_global_CMockReturnMemThruPtr_if_ip6(__LINE__, if_ip6, sizeof(esp_ip6_addr_t))
#define esp_netif_get_ip6_global_ReturnArrayThruPtr_if_ip6(if_ip6, cmock_len) esp_netif_get_ip6_global_CMockReturnMemThruPtr_if_ip6(__LINE__, if_ip6, cmock_len * sizeof(*if_ip6))
#define esp_netif_get_ip6_global_ReturnMemThruPtr_if_ip6(if_ip6, cmock_size) esp_netif_get_ip6_global_CMockReturnMemThruPtr_if_ip6(__LINE__, if_ip6, cmock_size)
void esp_netif_get_ip6_global_CMockReturnMemThruPtr_if_ip6(UNITY_LINE_TYPE cmock_line, esp_ip6_addr_t* if_ip6, size_t cmock_size);
#define esp_netif_get_ip6_global_IgnoreArg_esp_netif() esp_netif_get_ip6_global_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_ip6_global_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_ip6_global_IgnoreArg_if_ip6() esp_netif_get_ip6_global_CMockIgnoreArg_if_ip6(__LINE__)
void esp_netif_get_ip6_global_CMockIgnoreArg_if_ip6(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_all_ip6_IgnoreAndReturn(cmock_retval) esp_netif_get_all_ip6_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_all_ip6_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define esp_netif_get_all_ip6_StopIgnore() esp_netif_get_all_ip6_CMockStopIgnore()
void esp_netif_get_all_ip6_CMockStopIgnore(void);
#define esp_netif_get_all_ip6_ExpectAndReturn(esp_netif, if_ip6, cmock_retval) esp_netif_get_all_ip6_CMockExpectAndReturn(__LINE__, esp_netif, if_ip6, cmock_retval)
void esp_netif_get_all_ip6_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_ip6_addr_t* if_ip6, int cmock_to_return);
typedef int (* CMOCK_esp_netif_get_all_ip6_CALLBACK)(esp_netif_t* esp_netif, esp_ip6_addr_t* if_ip6, int cmock_num_calls);
void esp_netif_get_all_ip6_AddCallback(CMOCK_esp_netif_get_all_ip6_CALLBACK Callback);
void esp_netif_get_all_ip6_Stub(CMOCK_esp_netif_get_all_ip6_CALLBACK Callback);
#define esp_netif_get_all_ip6_StubWithCallback esp_netif_get_all_ip6_Stub
#define esp_netif_get_all_ip6_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, if_ip6, if_ip6_Depth, cmock_retval) esp_netif_get_all_ip6_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, if_ip6, if_ip6_Depth, cmock_retval)
void esp_netif_get_all_ip6_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_ip6_addr_t* if_ip6, int if_ip6_Depth, int cmock_to_return);
#define esp_netif_get_all_ip6_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_all_ip6_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_all_ip6_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_all_ip6_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_all_ip6_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_all_ip6_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_all_ip6_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_all_ip6_ReturnThruPtr_if_ip6(if_ip6) esp_netif_get_all_ip6_CMockReturnMemThruPtr_if_ip6(__LINE__, if_ip6, sizeof(esp_ip6_addr_t))
#define esp_netif_get_all_ip6_ReturnArrayThruPtr_if_ip6(if_ip6, cmock_len) esp_netif_get_all_ip6_CMockReturnMemThruPtr_if_ip6(__LINE__, if_ip6, cmock_len * sizeof(*if_ip6))
#define esp_netif_get_all_ip6_ReturnMemThruPtr_if_ip6(if_ip6, cmock_size) esp_netif_get_all_ip6_CMockReturnMemThruPtr_if_ip6(__LINE__, if_ip6, cmock_size)
void esp_netif_get_all_ip6_CMockReturnMemThruPtr_if_ip6(UNITY_LINE_TYPE cmock_line, esp_ip6_addr_t* if_ip6, size_t cmock_size);
#define esp_netif_get_all_ip6_IgnoreArg_esp_netif() esp_netif_get_all_ip6_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_all_ip6_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_all_ip6_IgnoreArg_if_ip6() esp_netif_get_all_ip6_CMockIgnoreArg_if_ip6(__LINE__)
void esp_netif_get_all_ip6_CMockIgnoreArg_if_ip6(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_ip4_addr_Ignore() esp_netif_set_ip4_addr_CMockIgnore()
void esp_netif_set_ip4_addr_CMockIgnore(void);
#define esp_netif_set_ip4_addr_StopIgnore() esp_netif_set_ip4_addr_CMockStopIgnore()
void esp_netif_set_ip4_addr_CMockStopIgnore(void);
#define esp_netif_set_ip4_addr_Expect(addr, a, b, c, d) esp_netif_set_ip4_addr_CMockExpect(__LINE__, addr, a, b, c, d)
void esp_netif_set_ip4_addr_CMockExpect(UNITY_LINE_TYPE cmock_line, esp_ip4_addr_t* addr, uint8_t a, uint8_t b, uint8_t c, uint8_t d);
typedef void (* CMOCK_esp_netif_set_ip4_addr_CALLBACK)(esp_ip4_addr_t* addr, uint8_t a, uint8_t b, uint8_t c, uint8_t d, int cmock_num_calls);
void esp_netif_set_ip4_addr_AddCallback(CMOCK_esp_netif_set_ip4_addr_CALLBACK Callback);
void esp_netif_set_ip4_addr_Stub(CMOCK_esp_netif_set_ip4_addr_CALLBACK Callback);
#define esp_netif_set_ip4_addr_StubWithCallback esp_netif_set_ip4_addr_Stub
#define esp_netif_set_ip4_addr_ExpectWithArray(addr, addr_Depth, a, b, c, d) esp_netif_set_ip4_addr_CMockExpectWithArray(__LINE__, addr, addr_Depth, a, b, c, d)
void esp_netif_set_ip4_addr_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, esp_ip4_addr_t* addr, int addr_Depth, uint8_t a, uint8_t b, uint8_t c, uint8_t d);
#define esp_netif_set_ip4_addr_ReturnThruPtr_addr(addr) esp_netif_set_ip4_addr_CMockReturnMemThruPtr_addr(__LINE__, addr, sizeof(esp_ip4_addr_t))
#define esp_netif_set_ip4_addr_ReturnArrayThruPtr_addr(addr, cmock_len) esp_netif_set_ip4_addr_CMockReturnMemThruPtr_addr(__LINE__, addr, cmock_len * sizeof(*addr))
#define esp_netif_set_ip4_addr_ReturnMemThruPtr_addr(addr, cmock_size) esp_netif_set_ip4_addr_CMockReturnMemThruPtr_addr(__LINE__, addr, cmock_size)
void esp_netif_set_ip4_addr_CMockReturnMemThruPtr_addr(UNITY_LINE_TYPE cmock_line, esp_ip4_addr_t* addr, size_t cmock_size);
#define esp_netif_set_ip4_addr_IgnoreArg_addr() esp_netif_set_ip4_addr_CMockIgnoreArg_addr(__LINE__)
void esp_netif_set_ip4_addr_CMockIgnoreArg_addr(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_ip4_addr_IgnoreArg_a() esp_netif_set_ip4_addr_CMockIgnoreArg_a(__LINE__)
void esp_netif_set_ip4_addr_CMockIgnoreArg_a(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_ip4_addr_IgnoreArg_b() esp_netif_set_ip4_addr_CMockIgnoreArg_b(__LINE__)
void esp_netif_set_ip4_addr_CMockIgnoreArg_b(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_ip4_addr_IgnoreArg_c() esp_netif_set_ip4_addr_CMockIgnoreArg_c(__LINE__)
void esp_netif_set_ip4_addr_CMockIgnoreArg_c(UNITY_LINE_TYPE cmock_line);
#define esp_netif_set_ip4_addr_IgnoreArg_d() esp_netif_set_ip4_addr_CMockIgnoreArg_d(__LINE__)
void esp_netif_set_ip4_addr_CMockIgnoreArg_d(UNITY_LINE_TYPE cmock_line);
#define esp_ip4addr_ntoa_IgnoreAndReturn(cmock_retval) esp_ip4addr_ntoa_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_ip4addr_ntoa_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, char* cmock_to_return);
#define esp_ip4addr_ntoa_StopIgnore() esp_ip4addr_ntoa_CMockStopIgnore()
void esp_ip4addr_ntoa_CMockStopIgnore(void);
#define esp_ip4addr_ntoa_ExpectAndReturn(addr, buf, buflen, cmock_retval) esp_ip4addr_ntoa_CMockExpectAndReturn(__LINE__, addr, buf, buflen, cmock_retval)
void esp_ip4addr_ntoa_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const esp_ip4_addr_t* addr, char* buf, int buflen, char* cmock_to_return);
typedef char* (* CMOCK_esp_ip4addr_ntoa_CALLBACK)(const esp_ip4_addr_t* addr, char* buf, int buflen, int cmock_num_calls);
void esp_ip4addr_ntoa_AddCallback(CMOCK_esp_ip4addr_ntoa_CALLBACK Callback);
void esp_ip4addr_ntoa_Stub(CMOCK_esp_ip4addr_ntoa_CALLBACK Callback);
#define esp_ip4addr_ntoa_StubWithCallback esp_ip4addr_ntoa_Stub
#define esp_ip4addr_ntoa_ExpectWithArrayAndReturn(addr, addr_Depth, buf, buflen, cmock_retval) esp_ip4addr_ntoa_CMockExpectWithArrayAndReturn(__LINE__, addr, addr_Depth, buf, buflen, cmock_retval)
void esp_ip4addr_ntoa_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const esp_ip4_addr_t* addr, int addr_Depth, char* buf, int buflen, char* cmock_to_return);
#define esp_ip4addr_ntoa_ReturnThruPtr_buf(buf) esp_ip4addr_ntoa_CMockReturnMemThruPtr_buf(__LINE__, buf, sizeof(char))
#define esp_ip4addr_ntoa_ReturnArrayThruPtr_buf(buf, cmock_len) esp_ip4addr_ntoa_CMockReturnMemThruPtr_buf(__LINE__, buf, cmock_len * sizeof(*buf))
#define esp_ip4addr_ntoa_ReturnMemThruPtr_buf(buf, cmock_size) esp_ip4addr_ntoa_CMockReturnMemThruPtr_buf(__LINE__, buf, cmock_size)
void esp_ip4addr_ntoa_CMockReturnMemThruPtr_buf(UNITY_LINE_TYPE cmock_line, char* buf, size_t cmock_size);
#define esp_ip4addr_ntoa_IgnoreArg_addr() esp_ip4addr_ntoa_CMockIgnoreArg_addr(__LINE__)
void esp_ip4addr_ntoa_CMockIgnoreArg_addr(UNITY_LINE_TYPE cmock_line);
#define esp_ip4addr_ntoa_IgnoreArg_buf() esp_ip4addr_ntoa_CMockIgnoreArg_buf(__LINE__)
void esp_ip4addr_ntoa_CMockIgnoreArg_buf(UNITY_LINE_TYPE cmock_line);
#define esp_ip4addr_ntoa_IgnoreArg_buflen() esp_ip4addr_ntoa_CMockIgnoreArg_buflen(__LINE__)
void esp_ip4addr_ntoa_CMockIgnoreArg_buflen(UNITY_LINE_TYPE cmock_line);
#define esp_ip4addr_aton_IgnoreAndReturn(cmock_retval) esp_ip4addr_aton_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_ip4addr_aton_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define esp_ip4addr_aton_StopIgnore() esp_ip4addr_aton_CMockStopIgnore()
void esp_ip4addr_aton_CMockStopIgnore(void);
#define esp_ip4addr_aton_ExpectAndReturn(addr, cmock_retval) esp_ip4addr_aton_CMockExpectAndReturn(__LINE__, addr, cmock_retval)
void esp_ip4addr_aton_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* addr, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_esp_ip4addr_aton_CALLBACK)(const char* addr, int cmock_num_calls);
void esp_ip4addr_aton_AddCallback(CMOCK_esp_ip4addr_aton_CALLBACK Callback);
void esp_ip4addr_aton_Stub(CMOCK_esp_ip4addr_aton_CALLBACK Callback);
#define esp_ip4addr_aton_StubWithCallback esp_ip4addr_aton_Stub
#define esp_ip4addr_aton_IgnoreArg_addr() esp_ip4addr_aton_CMockIgnoreArg_addr(__LINE__)
void esp_ip4addr_aton_CMockIgnoreArg_addr(UNITY_LINE_TYPE cmock_line);
#define esp_netif_str_to_ip4_IgnoreAndReturn(cmock_retval) esp_netif_str_to_ip4_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_str_to_ip4_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_str_to_ip4_StopIgnore() esp_netif_str_to_ip4_CMockStopIgnore()
void esp_netif_str_to_ip4_CMockStopIgnore(void);
#define esp_netif_str_to_ip4_ExpectAndReturn(src, dst, cmock_retval) esp_netif_str_to_ip4_CMockExpectAndReturn(__LINE__, src, dst, cmock_retval)
void esp_netif_str_to_ip4_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* src, esp_ip4_addr_t* dst, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_str_to_ip4_CALLBACK)(const char* src, esp_ip4_addr_t* dst, int cmock_num_calls);
void esp_netif_str_to_ip4_AddCallback(CMOCK_esp_netif_str_to_ip4_CALLBACK Callback);
void esp_netif_str_to_ip4_Stub(CMOCK_esp_netif_str_to_ip4_CALLBACK Callback);
#define esp_netif_str_to_ip4_StubWithCallback esp_netif_str_to_ip4_Stub
#define esp_netif_str_to_ip4_ExpectWithArrayAndReturn(src, dst, dst_Depth, cmock_retval) esp_netif_str_to_ip4_CMockExpectWithArrayAndReturn(__LINE__, src, dst, dst_Depth, cmock_retval)
void esp_netif_str_to_ip4_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const char* src, esp_ip4_addr_t* dst, int dst_Depth, esp_err_t cmock_to_return);
#define esp_netif_str_to_ip4_ReturnThruPtr_dst(dst) esp_netif_str_to_ip4_CMockReturnMemThruPtr_dst(__LINE__, dst, sizeof(esp_ip4_addr_t))
#define esp_netif_str_to_ip4_ReturnArrayThruPtr_dst(dst, cmock_len) esp_netif_str_to_ip4_CMockReturnMemThruPtr_dst(__LINE__, dst, cmock_len * sizeof(*dst))
#define esp_netif_str_to_ip4_ReturnMemThruPtr_dst(dst, cmock_size) esp_netif_str_to_ip4_CMockReturnMemThruPtr_dst(__LINE__, dst, cmock_size)
void esp_netif_str_to_ip4_CMockReturnMemThruPtr_dst(UNITY_LINE_TYPE cmock_line, esp_ip4_addr_t* dst, size_t cmock_size);
#define esp_netif_str_to_ip4_IgnoreArg_src() esp_netif_str_to_ip4_CMockIgnoreArg_src(__LINE__)
void esp_netif_str_to_ip4_CMockIgnoreArg_src(UNITY_LINE_TYPE cmock_line);
#define esp_netif_str_to_ip4_IgnoreArg_dst() esp_netif_str_to_ip4_CMockIgnoreArg_dst(__LINE__)
void esp_netif_str_to_ip4_CMockIgnoreArg_dst(UNITY_LINE_TYPE cmock_line);
#define esp_netif_str_to_ip6_IgnoreAndReturn(cmock_retval) esp_netif_str_to_ip6_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_str_to_ip6_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_netif_str_to_ip6_StopIgnore() esp_netif_str_to_ip6_CMockStopIgnore()
void esp_netif_str_to_ip6_CMockStopIgnore(void);
#define esp_netif_str_to_ip6_ExpectAndReturn(src, dst, cmock_retval) esp_netif_str_to_ip6_CMockExpectAndReturn(__LINE__, src, dst, cmock_retval)
void esp_netif_str_to_ip6_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* src, esp_ip6_addr_t* dst, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_netif_str_to_ip6_CALLBACK)(const char* src, esp_ip6_addr_t* dst, int cmock_num_calls);
void esp_netif_str_to_ip6_AddCallback(CMOCK_esp_netif_str_to_ip6_CALLBACK Callback);
void esp_netif_str_to_ip6_Stub(CMOCK_esp_netif_str_to_ip6_CALLBACK Callback);
#define esp_netif_str_to_ip6_StubWithCallback esp_netif_str_to_ip6_Stub
#define esp_netif_str_to_ip6_ExpectWithArrayAndReturn(src, dst, dst_Depth, cmock_retval) esp_netif_str_to_ip6_CMockExpectWithArrayAndReturn(__LINE__, src, dst, dst_Depth, cmock_retval)
void esp_netif_str_to_ip6_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const char* src, esp_ip6_addr_t* dst, int dst_Depth, esp_err_t cmock_to_return);
#define esp_netif_str_to_ip6_ReturnThruPtr_dst(dst) esp_netif_str_to_ip6_CMockReturnMemThruPtr_dst(__LINE__, dst, sizeof(esp_ip6_addr_t))
#define esp_netif_str_to_ip6_ReturnArrayThruPtr_dst(dst, cmock_len) esp_netif_str_to_ip6_CMockReturnMemThruPtr_dst(__LINE__, dst, cmock_len * sizeof(*dst))
#define esp_netif_str_to_ip6_ReturnMemThruPtr_dst(dst, cmock_size) esp_netif_str_to_ip6_CMockReturnMemThruPtr_dst(__LINE__, dst, cmock_size)
void esp_netif_str_to_ip6_CMockReturnMemThruPtr_dst(UNITY_LINE_TYPE cmock_line, esp_ip6_addr_t* dst, size_t cmock_size);
#define esp_netif_str_to_ip6_IgnoreArg_src() esp_netif_str_to_ip6_CMockIgnoreArg_src(__LINE__)
void esp_netif_str_to_ip6_CMockIgnoreArg_src(UNITY_LINE_TYPE cmock_line);
#define esp_netif_str_to_ip6_IgnoreArg_dst() esp_netif_str_to_ip6_CMockIgnoreArg_dst(__LINE__)
void esp_netif_str_to_ip6_CMockIgnoreArg_dst(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_io_driver_IgnoreAndReturn(cmock_retval) esp_netif_get_io_driver_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_io_driver_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_iodriver_handle cmock_to_return);
#define esp_netif_get_io_driver_StopIgnore() esp_netif_get_io_driver_CMockStopIgnore()
void esp_netif_get_io_driver_CMockStopIgnore(void);
#define esp_netif_get_io_driver_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_get_io_driver_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_get_io_driver_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_iodriver_handle cmock_to_return);
typedef esp_netif_iodriver_handle (* CMOCK_esp_netif_get_io_driver_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_get_io_driver_AddCallback(CMOCK_esp_netif_get_io_driver_CALLBACK Callback);
void esp_netif_get_io_driver_Stub(CMOCK_esp_netif_get_io_driver_CALLBACK Callback);
#define esp_netif_get_io_driver_StubWithCallback esp_netif_get_io_driver_Stub
#define esp_netif_get_io_driver_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_get_io_driver_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_get_io_driver_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_iodriver_handle cmock_to_return);
#define esp_netif_get_io_driver_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_io_driver_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_io_driver_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_io_driver_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_io_driver_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_io_driver_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_io_driver_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_io_driver_IgnoreArg_esp_netif() esp_netif_get_io_driver_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_io_driver_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_handle_from_ifkey_IgnoreAndReturn(cmock_retval) esp_netif_get_handle_from_ifkey_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_handle_from_ifkey_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* cmock_to_return);
#define esp_netif_get_handle_from_ifkey_StopIgnore() esp_netif_get_handle_from_ifkey_CMockStopIgnore()
void esp_netif_get_handle_from_ifkey_CMockStopIgnore(void);
#define esp_netif_get_handle_from_ifkey_ExpectAndReturn(if_key, cmock_retval) esp_netif_get_handle_from_ifkey_CMockExpectAndReturn(__LINE__, if_key, cmock_retval)
void esp_netif_get_handle_from_ifkey_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* if_key, esp_netif_t* cmock_to_return);
typedef esp_netif_t* (* CMOCK_esp_netif_get_handle_from_ifkey_CALLBACK)(const char* if_key, int cmock_num_calls);
void esp_netif_get_handle_from_ifkey_AddCallback(CMOCK_esp_netif_get_handle_from_ifkey_CALLBACK Callback);
void esp_netif_get_handle_from_ifkey_Stub(CMOCK_esp_netif_get_handle_from_ifkey_CALLBACK Callback);
#define esp_netif_get_handle_from_ifkey_StubWithCallback esp_netif_get_handle_from_ifkey_Stub
#define esp_netif_get_handle_from_ifkey_IgnoreArg_if_key() esp_netif_get_handle_from_ifkey_CMockIgnoreArg_if_key(__LINE__)
void esp_netif_get_handle_from_ifkey_CMockIgnoreArg_if_key(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_flags_IgnoreAndReturn(cmock_retval) esp_netif_get_flags_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_flags_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_flags_t cmock_to_return);
#define esp_netif_get_flags_StopIgnore() esp_netif_get_flags_CMockStopIgnore()
void esp_netif_get_flags_CMockStopIgnore(void);
#define esp_netif_get_flags_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_get_flags_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_get_flags_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_flags_t cmock_to_return);
typedef esp_netif_flags_t (* CMOCK_esp_netif_get_flags_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_get_flags_AddCallback(CMOCK_esp_netif_get_flags_CALLBACK Callback);
void esp_netif_get_flags_Stub(CMOCK_esp_netif_get_flags_CALLBACK Callback);
#define esp_netif_get_flags_StubWithCallback esp_netif_get_flags_Stub
#define esp_netif_get_flags_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_get_flags_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_get_flags_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_flags_t cmock_to_return);
#define esp_netif_get_flags_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_flags_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_flags_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_flags_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_flags_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_flags_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_flags_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_flags_IgnoreArg_esp_netif() esp_netif_get_flags_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_flags_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_ifkey_IgnoreAndReturn(cmock_retval) esp_netif_get_ifkey_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_ifkey_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define esp_netif_get_ifkey_StopIgnore() esp_netif_get_ifkey_CMockStopIgnore()
void esp_netif_get_ifkey_CMockStopIgnore(void);
#define esp_netif_get_ifkey_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_get_ifkey_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_get_ifkey_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, const char* cmock_to_return);
typedef const char* (* CMOCK_esp_netif_get_ifkey_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_get_ifkey_AddCallback(CMOCK_esp_netif_get_ifkey_CALLBACK Callback);
void esp_netif_get_ifkey_Stub(CMOCK_esp_netif_get_ifkey_CALLBACK Callback);
#define esp_netif_get_ifkey_StubWithCallback esp_netif_get_ifkey_Stub
#define esp_netif_get_ifkey_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_get_ifkey_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_get_ifkey_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, const char* cmock_to_return);
#define esp_netif_get_ifkey_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_ifkey_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_ifkey_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_ifkey_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_ifkey_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_ifkey_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_ifkey_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_ifkey_IgnoreArg_esp_netif() esp_netif_get_ifkey_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_ifkey_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_desc_IgnoreAndReturn(cmock_retval) esp_netif_get_desc_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_desc_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define esp_netif_get_desc_StopIgnore() esp_netif_get_desc_CMockStopIgnore()
void esp_netif_get_desc_CMockStopIgnore(void);
#define esp_netif_get_desc_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_get_desc_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_get_desc_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, const char* cmock_to_return);
typedef const char* (* CMOCK_esp_netif_get_desc_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_get_desc_AddCallback(CMOCK_esp_netif_get_desc_CALLBACK Callback);
void esp_netif_get_desc_Stub(CMOCK_esp_netif_get_desc_CALLBACK Callback);
#define esp_netif_get_desc_StubWithCallback esp_netif_get_desc_Stub
#define esp_netif_get_desc_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_get_desc_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_get_desc_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, const char* cmock_to_return);
#define esp_netif_get_desc_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_desc_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_desc_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_desc_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_desc_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_desc_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_desc_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_desc_IgnoreArg_esp_netif() esp_netif_get_desc_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_desc_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_route_prio_IgnoreAndReturn(cmock_retval) esp_netif_get_route_prio_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_route_prio_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define esp_netif_get_route_prio_StopIgnore() esp_netif_get_route_prio_CMockStopIgnore()
void esp_netif_get_route_prio_CMockStopIgnore(void);
#define esp_netif_get_route_prio_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_get_route_prio_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_get_route_prio_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int cmock_to_return);
typedef int (* CMOCK_esp_netif_get_route_prio_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_get_route_prio_AddCallback(CMOCK_esp_netif_get_route_prio_CALLBACK Callback);
void esp_netif_get_route_prio_Stub(CMOCK_esp_netif_get_route_prio_CALLBACK Callback);
#define esp_netif_get_route_prio_StubWithCallback esp_netif_get_route_prio_Stub
#define esp_netif_get_route_prio_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_get_route_prio_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_get_route_prio_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, int cmock_to_return);
#define esp_netif_get_route_prio_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_route_prio_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_route_prio_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_route_prio_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_route_prio_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_route_prio_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_route_prio_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_route_prio_IgnoreArg_esp_netif() esp_netif_get_route_prio_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_route_prio_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_event_id_IgnoreAndReturn(cmock_retval) esp_netif_get_event_id_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_event_id_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int32_t cmock_to_return);
#define esp_netif_get_event_id_StopIgnore() esp_netif_get_event_id_CMockStopIgnore()
void esp_netif_get_event_id_CMockStopIgnore(void);
#define esp_netif_get_event_id_ExpectAndReturn(esp_netif, event_type, cmock_retval) esp_netif_get_event_id_CMockExpectAndReturn(__LINE__, esp_netif, event_type, cmock_retval)
void esp_netif_get_event_id_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_ip_event_type_t event_type, int32_t cmock_to_return);
typedef int32_t (* CMOCK_esp_netif_get_event_id_CALLBACK)(esp_netif_t* esp_netif, esp_netif_ip_event_type_t event_type, int cmock_num_calls);
void esp_netif_get_event_id_AddCallback(CMOCK_esp_netif_get_event_id_CALLBACK Callback);
void esp_netif_get_event_id_Stub(CMOCK_esp_netif_get_event_id_CALLBACK Callback);
#define esp_netif_get_event_id_StubWithCallback esp_netif_get_event_id_Stub
#define esp_netif_get_event_id_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, event_type, cmock_retval) esp_netif_get_event_id_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, event_type, cmock_retval)
void esp_netif_get_event_id_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_ip_event_type_t event_type, int32_t cmock_to_return);
#define esp_netif_get_event_id_ReturnThruPtr_esp_netif(esp_netif) esp_netif_get_event_id_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_get_event_id_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_get_event_id_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_get_event_id_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_get_event_id_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_get_event_id_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_get_event_id_IgnoreArg_esp_netif() esp_netif_get_event_id_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_get_event_id_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_event_id_IgnoreArg_event_type() esp_netif_get_event_id_CMockIgnoreArg_event_type(__LINE__)
void esp_netif_get_event_id_CMockIgnoreArg_event_type(UNITY_LINE_TYPE cmock_line);
#define esp_netif_next_IgnoreAndReturn(cmock_retval) esp_netif_next_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_next_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* cmock_to_return);
#define esp_netif_next_StopIgnore() esp_netif_next_CMockStopIgnore()
void esp_netif_next_CMockStopIgnore(void);
#define esp_netif_next_ExpectAndReturn(esp_netif, cmock_retval) esp_netif_next_CMockExpectAndReturn(__LINE__, esp_netif, cmock_retval)
void esp_netif_next_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, esp_netif_t* cmock_to_return);
typedef esp_netif_t* (* CMOCK_esp_netif_next_CALLBACK)(esp_netif_t* esp_netif, int cmock_num_calls);
void esp_netif_next_AddCallback(CMOCK_esp_netif_next_CALLBACK Callback);
void esp_netif_next_Stub(CMOCK_esp_netif_next_CALLBACK Callback);
#define esp_netif_next_StubWithCallback esp_netif_next_Stub
#define esp_netif_next_ExpectWithArrayAndReturn(esp_netif, esp_netif_Depth, cmock_retval) esp_netif_next_CMockExpectWithArrayAndReturn(__LINE__, esp_netif, esp_netif_Depth, cmock_retval)
void esp_netif_next_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, int esp_netif_Depth, esp_netif_t* cmock_to_return);
#define esp_netif_next_ReturnThruPtr_esp_netif(esp_netif) esp_netif_next_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, sizeof(esp_netif_t))
#define esp_netif_next_ReturnArrayThruPtr_esp_netif(esp_netif, cmock_len) esp_netif_next_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_len * sizeof(*esp_netif))
#define esp_netif_next_ReturnMemThruPtr_esp_netif(esp_netif, cmock_size) esp_netif_next_CMockReturnMemThruPtr_esp_netif(__LINE__, esp_netif, cmock_size)
void esp_netif_next_CMockReturnMemThruPtr_esp_netif(UNITY_LINE_TYPE cmock_line, esp_netif_t* esp_netif, size_t cmock_size);
#define esp_netif_next_IgnoreArg_esp_netif() esp_netif_next_CMockIgnoreArg_esp_netif(__LINE__)
void esp_netif_next_CMockIgnoreArg_esp_netif(UNITY_LINE_TYPE cmock_line);
#define esp_netif_get_nr_of_ifs_IgnoreAndReturn(cmock_retval) esp_netif_get_nr_of_ifs_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_netif_get_nr_of_ifs_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define esp_netif_get_nr_of_ifs_StopIgnore() esp_netif_get_nr_of_ifs_CMockStopIgnore()
void esp_netif_get_nr_of_ifs_CMockStopIgnore(void);
#define esp_netif_get_nr_of_ifs_ExpectAndReturn(cmock_retval) esp_netif_get_nr_of_ifs_CMockExpectAndReturn(__LINE__, cmock_retval)
void esp_netif_get_nr_of_ifs_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
typedef size_t (* CMOCK_esp_netif_get_nr_of_ifs_CALLBACK)(int cmock_num_calls);
void esp_netif_get_nr_of_ifs_AddCallback(CMOCK_esp_netif_get_nr_of_ifs_CALLBACK Callback);
void esp_netif_get_nr_of_ifs_Stub(CMOCK_esp_netif_get_nr_of_ifs_CALLBACK Callback);
#define esp_netif_get_nr_of_ifs_StubWithCallback esp_netif_get_nr_of_ifs_Stub
#define esp_netif_netstack_buf_ref_Ignore() esp_netif_netstack_buf_ref_CMockIgnore()
void esp_netif_netstack_buf_ref_CMockIgnore(void);
#define esp_netif_netstack_buf_ref_StopIgnore() esp_netif_netstack_buf_ref_CMockStopIgnore()
void esp_netif_netstack_buf_ref_CMockStopIgnore(void);
#define esp_netif_netstack_buf_ref_Expect(netstack_buf) esp_netif_netstack_buf_ref_CMockExpect(__LINE__, netstack_buf)
void esp_netif_netstack_buf_ref_CMockExpect(UNITY_LINE_TYPE cmock_line, void* netstack_buf);
typedef void (* CMOCK_esp_netif_netstack_buf_ref_CALLBACK)(void* netstack_buf, int cmock_num_calls);
void esp_netif_netstack_buf_ref_AddCallback(CMOCK_esp_netif_netstack_buf_ref_CALLBACK Callback);
void esp_netif_netstack_buf_ref_Stub(CMOCK_esp_netif_netstack_buf_ref_CALLBACK Callback);
#define esp_netif_netstack_buf_ref_StubWithCallback esp_netif_netstack_buf_ref_Stub
#define esp_netif_netstack_buf_ref_ExpectWithArray(netstack_buf, netstack_buf_Depth) esp_netif_netstack_buf_ref_CMockExpectWithArray(__LINE__, netstack_buf, netstack_buf_Depth)
void esp_netif_netstack_buf_ref_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* netstack_buf, int netstack_buf_Depth);
#define esp_netif_netstack_buf_ref_ReturnThruPtr_netstack_buf(netstack_buf) esp_netif_netstack_buf_ref_CMockReturnMemThruPtr_netstack_buf(__LINE__, netstack_buf, sizeof(void))
#define esp_netif_netstack_buf_ref_ReturnArrayThruPtr_netstack_buf(netstack_buf, cmock_len) esp_netif_netstack_buf_ref_CMockReturnMemThruPtr_netstack_buf(__LINE__, netstack_buf, cmock_len * sizeof(*netstack_buf))
#define esp_netif_netstack_buf_ref_ReturnMemThruPtr_netstack_buf(netstack_buf, cmock_size) esp_netif_netstack_buf_ref_CMockReturnMemThruPtr_netstack_buf(__LINE__, netstack_buf, cmock_size)
void esp_netif_netstack_buf_ref_CMockReturnMemThruPtr_netstack_buf(UNITY_LINE_TYPE cmock_line, void* netstack_buf, size_t cmock_size);
#define esp_netif_netstack_buf_ref_IgnoreArg_netstack_buf() esp_netif_netstack_buf_ref_CMockIgnoreArg_netstack_buf(__LINE__)
void esp_netif_netstack_buf_ref_CMockIgnoreArg_netstack_buf(UNITY_LINE_TYPE cmock_line);
#define esp_netif_netstack_buf_free_Ignore() esp_netif_netstack_buf_free_CMockIgnore()
void esp_netif_netstack_buf_free_CMockIgnore(void);
#define esp_netif_netstack_buf_free_StopIgnore() esp_netif_netstack_buf_free_CMockStopIgnore()
void esp_netif_netstack_buf_free_CMockStopIgnore(void);
#define esp_netif_netstack_buf_free_Expect(netstack_buf) esp_netif_netstack_buf_free_CMockExpect(__LINE__, netstack_buf)
void esp_netif_netstack_buf_free_CMockExpect(UNITY_LINE_TYPE cmock_line, void* netstack_buf);
typedef void (* CMOCK_esp_netif_netstack_buf_free_CALLBACK)(void* netstack_buf, int cmock_num_calls);
void esp_netif_netstack_buf_free_AddCallback(CMOCK_esp_netif_netstack_buf_free_CALLBACK Callback);
void esp_netif_netstack_buf_free_Stub(CMOCK_esp_netif_netstack_buf_free_CALLBACK Callback);
#define esp_netif_netstack_buf_free_StubWithCallback esp_netif_netstack_buf_free_Stub
#define esp_netif_netstack_buf_free_ExpectWithArray(netstack_buf, netstack_buf_Depth) esp_netif_netstack_buf_free_CMockExpectWithArray(__LINE__, netstack_buf, netstack_buf_Depth)
void esp_netif_netstack_buf_free_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* netstack_buf, int netstack_buf_Depth);
#define esp_netif_netstack_buf_free_ReturnThruPtr_netstack_buf(netstack_buf) esp_netif_netstack_buf_free_CMockReturnMemThruPtr_netstack_buf(__LINE__, netstack_buf, sizeof(void))
#define esp_netif_netstack_buf_free_ReturnArrayThruPtr_netstack_buf(netstack_buf, cmock_len) esp_netif_netstack_buf_free_CMockReturnMemThruPtr_netstack_buf(__LINE__, netstack_buf, cmock_len * sizeof(*netstack_buf))
#define esp_netif_netstack_buf_free_ReturnMemThruPtr_netstack_buf(netstack_buf, cmock_size) esp_netif_netstack_buf_free_CMockReturnMemThruPtr_netstack_buf(__LINE__, netstack_buf, cmock_size)
void esp_netif_netstack_buf_free_CMockReturnMemThruPtr_netstack_buf(UNITY_LINE_TYPE cmock_line, void* netstack_buf, size_t cmock_size);
#define esp_netif_netstack_buf_free_IgnoreArg_netstack_buf() esp_netif_netstack_buf_free_CMockIgnoreArg_netstack_buf(__LINE__)
void esp_netif_netstack_buf_free_CMockIgnoreArg_netstack_buf(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
