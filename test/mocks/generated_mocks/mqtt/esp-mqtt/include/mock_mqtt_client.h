#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MQTT_CLIENT_H
#define _MOCK_MQTT_CLIENT_H

#include "unity.h"
#include "mqtt_client.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_mqtt_client_Init(void);
void mock_mqtt_client_Destroy(void);
void mock_mqtt_client_Verify(void);




#define esp_mqtt_client_init_IgnoreAndReturn(cmock_retval) esp_mqtt_client_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t cmock_to_return);
#define esp_mqtt_client_init_StopIgnore() esp_mqtt_client_init_CMockStopIgnore()
void esp_mqtt_client_init_CMockStopIgnore(void);
#define esp_mqtt_client_init_ExpectAndReturn(config, cmock_retval) esp_mqtt_client_init_CMockExpectAndReturn(__LINE__, config, cmock_retval)
void esp_mqtt_client_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const esp_mqtt_client_config_t* config, esp_mqtt_client_handle_t cmock_to_return);
typedef esp_mqtt_client_handle_t (* CMOCK_esp_mqtt_client_init_CALLBACK)(const esp_mqtt_client_config_t* config, int cmock_num_calls);
void esp_mqtt_client_init_AddCallback(CMOCK_esp_mqtt_client_init_CALLBACK Callback);
void esp_mqtt_client_init_Stub(CMOCK_esp_mqtt_client_init_CALLBACK Callback);
#define esp_mqtt_client_init_StubWithCallback esp_mqtt_client_init_Stub
#define esp_mqtt_client_init_ExpectWithArrayAndReturn(config, config_Depth, cmock_retval) esp_mqtt_client_init_CMockExpectWithArrayAndReturn(__LINE__, config, config_Depth, cmock_retval)
void esp_mqtt_client_init_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const esp_mqtt_client_config_t* config, int config_Depth, esp_mqtt_client_handle_t cmock_to_return);
#define esp_mqtt_client_init_IgnoreArg_config() esp_mqtt_client_init_CMockIgnoreArg_config(__LINE__)
void esp_mqtt_client_init_CMockIgnoreArg_config(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_set_uri_IgnoreAndReturn(cmock_retval) esp_mqtt_client_set_uri_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_set_uri_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_set_uri_StopIgnore() esp_mqtt_client_set_uri_CMockStopIgnore()
void esp_mqtt_client_set_uri_CMockStopIgnore(void);
#define esp_mqtt_client_set_uri_ExpectAndReturn(client, uri, cmock_retval) esp_mqtt_client_set_uri_CMockExpectAndReturn(__LINE__, client, uri, cmock_retval)
void esp_mqtt_client_set_uri_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, const char* uri, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_set_uri_CALLBACK)(esp_mqtt_client_handle_t client, const char* uri, int cmock_num_calls);
void esp_mqtt_client_set_uri_AddCallback(CMOCK_esp_mqtt_client_set_uri_CALLBACK Callback);
void esp_mqtt_client_set_uri_Stub(CMOCK_esp_mqtt_client_set_uri_CALLBACK Callback);
#define esp_mqtt_client_set_uri_StubWithCallback esp_mqtt_client_set_uri_Stub
#define esp_mqtt_client_set_uri_IgnoreArg_client() esp_mqtt_client_set_uri_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_client_set_uri_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_set_uri_IgnoreArg_uri() esp_mqtt_client_set_uri_CMockIgnoreArg_uri(__LINE__)
void esp_mqtt_client_set_uri_CMockIgnoreArg_uri(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_start_IgnoreAndReturn(cmock_retval) esp_mqtt_client_start_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_start_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_start_StopIgnore() esp_mqtt_client_start_CMockStopIgnore()
void esp_mqtt_client_start_CMockStopIgnore(void);
#define esp_mqtt_client_start_ExpectAndReturn(client, cmock_retval) esp_mqtt_client_start_CMockExpectAndReturn(__LINE__, client, cmock_retval)
void esp_mqtt_client_start_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_start_CALLBACK)(esp_mqtt_client_handle_t client, int cmock_num_calls);
void esp_mqtt_client_start_AddCallback(CMOCK_esp_mqtt_client_start_CALLBACK Callback);
void esp_mqtt_client_start_Stub(CMOCK_esp_mqtt_client_start_CALLBACK Callback);
#define esp_mqtt_client_start_StubWithCallback esp_mqtt_client_start_Stub
#define esp_mqtt_client_start_IgnoreArg_client() esp_mqtt_client_start_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_client_start_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_reconnect_IgnoreAndReturn(cmock_retval) esp_mqtt_client_reconnect_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_reconnect_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_reconnect_StopIgnore() esp_mqtt_client_reconnect_CMockStopIgnore()
void esp_mqtt_client_reconnect_CMockStopIgnore(void);
#define esp_mqtt_client_reconnect_ExpectAndReturn(client, cmock_retval) esp_mqtt_client_reconnect_CMockExpectAndReturn(__LINE__, client, cmock_retval)
void esp_mqtt_client_reconnect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_reconnect_CALLBACK)(esp_mqtt_client_handle_t client, int cmock_num_calls);
void esp_mqtt_client_reconnect_AddCallback(CMOCK_esp_mqtt_client_reconnect_CALLBACK Callback);
void esp_mqtt_client_reconnect_Stub(CMOCK_esp_mqtt_client_reconnect_CALLBACK Callback);
#define esp_mqtt_client_reconnect_StubWithCallback esp_mqtt_client_reconnect_Stub
#define esp_mqtt_client_reconnect_IgnoreArg_client() esp_mqtt_client_reconnect_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_client_reconnect_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_disconnect_IgnoreAndReturn(cmock_retval) esp_mqtt_client_disconnect_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_disconnect_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_disconnect_StopIgnore() esp_mqtt_client_disconnect_CMockStopIgnore()
void esp_mqtt_client_disconnect_CMockStopIgnore(void);
#define esp_mqtt_client_disconnect_ExpectAndReturn(client, cmock_retval) esp_mqtt_client_disconnect_CMockExpectAndReturn(__LINE__, client, cmock_retval)
void esp_mqtt_client_disconnect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_disconnect_CALLBACK)(esp_mqtt_client_handle_t client, int cmock_num_calls);
void esp_mqtt_client_disconnect_AddCallback(CMOCK_esp_mqtt_client_disconnect_CALLBACK Callback);
void esp_mqtt_client_disconnect_Stub(CMOCK_esp_mqtt_client_disconnect_CALLBACK Callback);
#define esp_mqtt_client_disconnect_StubWithCallback esp_mqtt_client_disconnect_Stub
#define esp_mqtt_client_disconnect_IgnoreArg_client() esp_mqtt_client_disconnect_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_client_disconnect_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_stop_IgnoreAndReturn(cmock_retval) esp_mqtt_client_stop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_stop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_stop_StopIgnore() esp_mqtt_client_stop_CMockStopIgnore()
void esp_mqtt_client_stop_CMockStopIgnore(void);
#define esp_mqtt_client_stop_ExpectAndReturn(client, cmock_retval) esp_mqtt_client_stop_CMockExpectAndReturn(__LINE__, client, cmock_retval)
void esp_mqtt_client_stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_stop_CALLBACK)(esp_mqtt_client_handle_t client, int cmock_num_calls);
void esp_mqtt_client_stop_AddCallback(CMOCK_esp_mqtt_client_stop_CALLBACK Callback);
void esp_mqtt_client_stop_Stub(CMOCK_esp_mqtt_client_stop_CALLBACK Callback);
#define esp_mqtt_client_stop_StubWithCallback esp_mqtt_client_stop_Stub
#define esp_mqtt_client_stop_IgnoreArg_client() esp_mqtt_client_stop_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_client_stop_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_subscribe_IgnoreAndReturn(cmock_retval) esp_mqtt_client_subscribe_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_subscribe_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define esp_mqtt_client_subscribe_StopIgnore() esp_mqtt_client_subscribe_CMockStopIgnore()
void esp_mqtt_client_subscribe_CMockStopIgnore(void);
#define esp_mqtt_client_subscribe_ExpectAndReturn(client, topic, qos, cmock_retval) esp_mqtt_client_subscribe_CMockExpectAndReturn(__LINE__, client, topic, qos, cmock_retval)
void esp_mqtt_client_subscribe_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, const char* topic, int qos, int cmock_to_return);
typedef int (* CMOCK_esp_mqtt_client_subscribe_CALLBACK)(esp_mqtt_client_handle_t client, const char* topic, int qos, int cmock_num_calls);
void esp_mqtt_client_subscribe_AddCallback(CMOCK_esp_mqtt_client_subscribe_CALLBACK Callback);
void esp_mqtt_client_subscribe_Stub(CMOCK_esp_mqtt_client_subscribe_CALLBACK Callback);
#define esp_mqtt_client_subscribe_StubWithCallback esp_mqtt_client_subscribe_Stub
#define esp_mqtt_client_subscribe_IgnoreArg_client() esp_mqtt_client_subscribe_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_client_subscribe_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_subscribe_IgnoreArg_topic() esp_mqtt_client_subscribe_CMockIgnoreArg_topic(__LINE__)
void esp_mqtt_client_subscribe_CMockIgnoreArg_topic(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_subscribe_IgnoreArg_qos() esp_mqtt_client_subscribe_CMockIgnoreArg_qos(__LINE__)
void esp_mqtt_client_subscribe_CMockIgnoreArg_qos(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_unsubscribe_IgnoreAndReturn(cmock_retval) esp_mqtt_client_unsubscribe_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_unsubscribe_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define esp_mqtt_client_unsubscribe_StopIgnore() esp_mqtt_client_unsubscribe_CMockStopIgnore()
void esp_mqtt_client_unsubscribe_CMockStopIgnore(void);
#define esp_mqtt_client_unsubscribe_ExpectAndReturn(client, topic, cmock_retval) esp_mqtt_client_unsubscribe_CMockExpectAndReturn(__LINE__, client, topic, cmock_retval)
void esp_mqtt_client_unsubscribe_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, const char* topic, int cmock_to_return);
typedef int (* CMOCK_esp_mqtt_client_unsubscribe_CALLBACK)(esp_mqtt_client_handle_t client, const char* topic, int cmock_num_calls);
void esp_mqtt_client_unsubscribe_AddCallback(CMOCK_esp_mqtt_client_unsubscribe_CALLBACK Callback);
void esp_mqtt_client_unsubscribe_Stub(CMOCK_esp_mqtt_client_unsubscribe_CALLBACK Callback);
#define esp_mqtt_client_unsubscribe_StubWithCallback esp_mqtt_client_unsubscribe_Stub
#define esp_mqtt_client_unsubscribe_IgnoreArg_client() esp_mqtt_client_unsubscribe_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_client_unsubscribe_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_unsubscribe_IgnoreArg_topic() esp_mqtt_client_unsubscribe_CMockIgnoreArg_topic(__LINE__)
void esp_mqtt_client_unsubscribe_CMockIgnoreArg_topic(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_publish_IgnoreAndReturn(cmock_retval) esp_mqtt_client_publish_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_publish_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define esp_mqtt_client_publish_StopIgnore() esp_mqtt_client_publish_CMockStopIgnore()
void esp_mqtt_client_publish_CMockStopIgnore(void);
#define esp_mqtt_client_publish_ExpectAndReturn(client, topic, data, len, qos, retain, cmock_retval) esp_mqtt_client_publish_CMockExpectAndReturn(__LINE__, client, topic, data, len, qos, retain, cmock_retval)
void esp_mqtt_client_publish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, const char* topic, const char* data, int len, int qos, int retain, int cmock_to_return);
typedef int (* CMOCK_esp_mqtt_client_publish_CALLBACK)(esp_mqtt_client_handle_t client, const char* topic, const char* data, int len, int qos, int retain, int cmock_num_calls);
void esp_mqtt_client_publish_AddCallback(CMOCK_esp_mqtt_client_publish_CALLBACK Callback);
void esp_mqtt_client_publish_Stub(CMOCK_esp_mqtt_client_publish_CALLBACK Callback);
#define esp_mqtt_client_publish_StubWithCallback esp_mqtt_client_publish_Stub
#define esp_mqtt_client_publish_IgnoreArg_client() esp_mqtt_client_publish_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_client_publish_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_publish_IgnoreArg_topic() esp_mqtt_client_publish_CMockIgnoreArg_topic(__LINE__)
void esp_mqtt_client_publish_CMockIgnoreArg_topic(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_publish_IgnoreArg_data() esp_mqtt_client_publish_CMockIgnoreArg_data(__LINE__)
void esp_mqtt_client_publish_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_publish_IgnoreArg_len() esp_mqtt_client_publish_CMockIgnoreArg_len(__LINE__)
void esp_mqtt_client_publish_CMockIgnoreArg_len(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_publish_IgnoreArg_qos() esp_mqtt_client_publish_CMockIgnoreArg_qos(__LINE__)
void esp_mqtt_client_publish_CMockIgnoreArg_qos(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_publish_IgnoreArg_retain() esp_mqtt_client_publish_CMockIgnoreArg_retain(__LINE__)
void esp_mqtt_client_publish_CMockIgnoreArg_retain(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_enqueue_IgnoreAndReturn(cmock_retval) esp_mqtt_client_enqueue_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_enqueue_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define esp_mqtt_client_enqueue_StopIgnore() esp_mqtt_client_enqueue_CMockStopIgnore()
void esp_mqtt_client_enqueue_CMockStopIgnore(void);
#define esp_mqtt_client_enqueue_ExpectAndReturn(client, topic, data, len, qos, retain, store, cmock_retval) esp_mqtt_client_enqueue_CMockExpectAndReturn(__LINE__, client, topic, data, len, qos, retain, store, cmock_retval)
void esp_mqtt_client_enqueue_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, const char* topic, const char* data, int len, int qos, int retain, bool store, int cmock_to_return);
typedef int (* CMOCK_esp_mqtt_client_enqueue_CALLBACK)(esp_mqtt_client_handle_t client, const char* topic, const char* data, int len, int qos, int retain, bool store, int cmock_num_calls);
void esp_mqtt_client_enqueue_AddCallback(CMOCK_esp_mqtt_client_enqueue_CALLBACK Callback);
void esp_mqtt_client_enqueue_Stub(CMOCK_esp_mqtt_client_enqueue_CALLBACK Callback);
#define esp_mqtt_client_enqueue_StubWithCallback esp_mqtt_client_enqueue_Stub
#define esp_mqtt_client_enqueue_IgnoreArg_client() esp_mqtt_client_enqueue_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_client_enqueue_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_enqueue_IgnoreArg_topic() esp_mqtt_client_enqueue_CMockIgnoreArg_topic(__LINE__)
void esp_mqtt_client_enqueue_CMockIgnoreArg_topic(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_enqueue_IgnoreArg_data() esp_mqtt_client_enqueue_CMockIgnoreArg_data(__LINE__)
void esp_mqtt_client_enqueue_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_enqueue_IgnoreArg_len() esp_mqtt_client_enqueue_CMockIgnoreArg_len(__LINE__)
void esp_mqtt_client_enqueue_CMockIgnoreArg_len(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_enqueue_IgnoreArg_qos() esp_mqtt_client_enqueue_CMockIgnoreArg_qos(__LINE__)
void esp_mqtt_client_enqueue_CMockIgnoreArg_qos(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_enqueue_IgnoreArg_retain() esp_mqtt_client_enqueue_CMockIgnoreArg_retain(__LINE__)
void esp_mqtt_client_enqueue_CMockIgnoreArg_retain(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_enqueue_IgnoreArg_store() esp_mqtt_client_enqueue_CMockIgnoreArg_store(__LINE__)
void esp_mqtt_client_enqueue_CMockIgnoreArg_store(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_destroy_IgnoreAndReturn(cmock_retval) esp_mqtt_client_destroy_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_destroy_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_destroy_StopIgnore() esp_mqtt_client_destroy_CMockStopIgnore()
void esp_mqtt_client_destroy_CMockStopIgnore(void);
#define esp_mqtt_client_destroy_ExpectAndReturn(client, cmock_retval) esp_mqtt_client_destroy_CMockExpectAndReturn(__LINE__, client, cmock_retval)
void esp_mqtt_client_destroy_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_destroy_CALLBACK)(esp_mqtt_client_handle_t client, int cmock_num_calls);
void esp_mqtt_client_destroy_AddCallback(CMOCK_esp_mqtt_client_destroy_CALLBACK Callback);
void esp_mqtt_client_destroy_Stub(CMOCK_esp_mqtt_client_destroy_CALLBACK Callback);
#define esp_mqtt_client_destroy_StubWithCallback esp_mqtt_client_destroy_Stub
#define esp_mqtt_client_destroy_IgnoreArg_client() esp_mqtt_client_destroy_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_client_destroy_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_set_config_IgnoreAndReturn(cmock_retval) esp_mqtt_set_config_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_set_config_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_set_config_StopIgnore() esp_mqtt_set_config_CMockStopIgnore()
void esp_mqtt_set_config_CMockStopIgnore(void);
#define esp_mqtt_set_config_ExpectAndReturn(client, config, cmock_retval) esp_mqtt_set_config_CMockExpectAndReturn(__LINE__, client, config, cmock_retval)
void esp_mqtt_set_config_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, const esp_mqtt_client_config_t* config, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_set_config_CALLBACK)(esp_mqtt_client_handle_t client, const esp_mqtt_client_config_t* config, int cmock_num_calls);
void esp_mqtt_set_config_AddCallback(CMOCK_esp_mqtt_set_config_CALLBACK Callback);
void esp_mqtt_set_config_Stub(CMOCK_esp_mqtt_set_config_CALLBACK Callback);
#define esp_mqtt_set_config_StubWithCallback esp_mqtt_set_config_Stub
#define esp_mqtt_set_config_ExpectWithArrayAndReturn(client, config, config_Depth, cmock_retval) esp_mqtt_set_config_CMockExpectWithArrayAndReturn(__LINE__, client, config, config_Depth, cmock_retval)
void esp_mqtt_set_config_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, const esp_mqtt_client_config_t* config, int config_Depth, esp_err_t cmock_to_return);
#define esp_mqtt_set_config_IgnoreArg_client() esp_mqtt_set_config_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_set_config_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_set_config_IgnoreArg_config() esp_mqtt_set_config_CMockIgnoreArg_config(__LINE__)
void esp_mqtt_set_config_CMockIgnoreArg_config(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_register_event_IgnoreAndReturn(cmock_retval) esp_mqtt_client_register_event_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_register_event_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define esp_mqtt_client_register_event_StopIgnore() esp_mqtt_client_register_event_CMockStopIgnore()
void esp_mqtt_client_register_event_CMockStopIgnore(void);
#define esp_mqtt_client_register_event_ExpectAndReturn(client, event, event_handler, event_handler_arg, cmock_retval) esp_mqtt_client_register_event_CMockExpectAndReturn(__LINE__, client, event, event_handler, event_handler_arg, cmock_retval)
void esp_mqtt_client_register_event_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, esp_mqtt_event_id_t event, esp_event_handler_t event_handler, void* event_handler_arg, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_esp_mqtt_client_register_event_CALLBACK)(esp_mqtt_client_handle_t client, esp_mqtt_event_id_t event, esp_event_handler_t event_handler, void* event_handler_arg, int cmock_num_calls);
void esp_mqtt_client_register_event_AddCallback(CMOCK_esp_mqtt_client_register_event_CALLBACK Callback);
void esp_mqtt_client_register_event_Stub(CMOCK_esp_mqtt_client_register_event_CALLBACK Callback);
#define esp_mqtt_client_register_event_StubWithCallback esp_mqtt_client_register_event_Stub
#define esp_mqtt_client_register_event_ExpectWithArrayAndReturn(client, event, event_handler, event_handler_arg, event_handler_arg_Depth, cmock_retval) esp_mqtt_client_register_event_CMockExpectWithArrayAndReturn(__LINE__, client, event, event_handler, event_handler_arg, event_handler_arg_Depth, cmock_retval)
void esp_mqtt_client_register_event_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, esp_mqtt_event_id_t event, esp_event_handler_t event_handler, void* event_handler_arg, int event_handler_arg_Depth, esp_err_t cmock_to_return);
#define esp_mqtt_client_register_event_ReturnThruPtr_event_handler_arg(event_handler_arg) esp_mqtt_client_register_event_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, sizeof(void))
#define esp_mqtt_client_register_event_ReturnArrayThruPtr_event_handler_arg(event_handler_arg, cmock_len) esp_mqtt_client_register_event_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, cmock_len * sizeof(*event_handler_arg))
#define esp_mqtt_client_register_event_ReturnMemThruPtr_event_handler_arg(event_handler_arg, cmock_size) esp_mqtt_client_register_event_CMockReturnMemThruPtr_event_handler_arg(__LINE__, event_handler_arg, cmock_size)
void esp_mqtt_client_register_event_CMockReturnMemThruPtr_event_handler_arg(UNITY_LINE_TYPE cmock_line, void* event_handler_arg, size_t cmock_size);
#define esp_mqtt_client_register_event_IgnoreArg_client() esp_mqtt_client_register_event_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_client_register_event_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_register_event_IgnoreArg_event() esp_mqtt_client_register_event_CMockIgnoreArg_event(__LINE__)
void esp_mqtt_client_register_event_CMockIgnoreArg_event(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_register_event_IgnoreArg_event_handler() esp_mqtt_client_register_event_CMockIgnoreArg_event_handler(__LINE__)
void esp_mqtt_client_register_event_CMockIgnoreArg_event_handler(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_register_event_IgnoreArg_event_handler_arg() esp_mqtt_client_register_event_CMockIgnoreArg_event_handler_arg(__LINE__)
void esp_mqtt_client_register_event_CMockIgnoreArg_event_handler_arg(UNITY_LINE_TYPE cmock_line);
#define esp_mqtt_client_get_outbox_size_IgnoreAndReturn(cmock_retval) esp_mqtt_client_get_outbox_size_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void esp_mqtt_client_get_outbox_size_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define esp_mqtt_client_get_outbox_size_StopIgnore() esp_mqtt_client_get_outbox_size_CMockStopIgnore()
void esp_mqtt_client_get_outbox_size_CMockStopIgnore(void);
#define esp_mqtt_client_get_outbox_size_ExpectAndReturn(client, cmock_retval) esp_mqtt_client_get_outbox_size_CMockExpectAndReturn(__LINE__, client, cmock_retval)
void esp_mqtt_client_get_outbox_size_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, esp_mqtt_client_handle_t client, int cmock_to_return);
typedef int (* CMOCK_esp_mqtt_client_get_outbox_size_CALLBACK)(esp_mqtt_client_handle_t client, int cmock_num_calls);
void esp_mqtt_client_get_outbox_size_AddCallback(CMOCK_esp_mqtt_client_get_outbox_size_CALLBACK Callback);
void esp_mqtt_client_get_outbox_size_Stub(CMOCK_esp_mqtt_client_get_outbox_size_CALLBACK Callback);
#define esp_mqtt_client_get_outbox_size_StubWithCallback esp_mqtt_client_get_outbox_size_Stub
#define esp_mqtt_client_get_outbox_size_IgnoreArg_client() esp_mqtt_client_get_outbox_size_CMockIgnoreArg_client(__LINE__)
void esp_mqtt_client_get_outbox_size_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
