#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_NIMBLE_PORT_H
#define _MOCK_NIMBLE_PORT_H

#include "unity.h"
#include "nimble_port.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_nimble_port_Init(void);
void mock_nimble_port_Destroy(void);
void mock_nimble_port_Verify(void);




#define nimble_port_init_Ignore() nimble_port_init_CMockIgnore()
void nimble_port_init_CMockIgnore(void);
#define nimble_port_init_StopIgnore() nimble_port_init_CMockStopIgnore()
void nimble_port_init_CMockStopIgnore(void);
#define nimble_port_init_Expect() nimble_port_init_CMockExpect(__LINE__)
void nimble_port_init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_nimble_port_init_CALLBACK)(int cmock_num_calls);
void nimble_port_init_AddCallback(CMOCK_nimble_port_init_CALLBACK Callback);
void nimble_port_init_Stub(CMOCK_nimble_port_init_CALLBACK Callback);
#define nimble_port_init_StubWithCallback nimble_port_init_Stub
#define nimble_port_deinit_Ignore() nimble_port_deinit_CMockIgnore()
void nimble_port_deinit_CMockIgnore(void);
#define nimble_port_deinit_StopIgnore() nimble_port_deinit_CMockStopIgnore()
void nimble_port_deinit_CMockStopIgnore(void);
#define nimble_port_deinit_Expect() nimble_port_deinit_CMockExpect(__LINE__)
void nimble_port_deinit_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_nimble_port_deinit_CALLBACK)(int cmock_num_calls);
void nimble_port_deinit_AddCallback(CMOCK_nimble_port_deinit_CALLBACK Callback);
void nimble_port_deinit_Stub(CMOCK_nimble_port_deinit_CALLBACK Callback);
#define nimble_port_deinit_StubWithCallback nimble_port_deinit_Stub
#define nimble_port_run_Ignore() nimble_port_run_CMockIgnore()
void nimble_port_run_CMockIgnore(void);
#define nimble_port_run_StopIgnore() nimble_port_run_CMockStopIgnore()
void nimble_port_run_CMockStopIgnore(void);
#define nimble_port_run_Expect() nimble_port_run_CMockExpect(__LINE__)
void nimble_port_run_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_nimble_port_run_CALLBACK)(int cmock_num_calls);
void nimble_port_run_AddCallback(CMOCK_nimble_port_run_CALLBACK Callback);
void nimble_port_run_Stub(CMOCK_nimble_port_run_CALLBACK Callback);
#define nimble_port_run_StubWithCallback nimble_port_run_Stub
#define nimble_port_stop_IgnoreAndReturn(cmock_retval) nimble_port_stop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nimble_port_stop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define nimble_port_stop_StopIgnore() nimble_port_stop_CMockStopIgnore()
void nimble_port_stop_CMockStopIgnore(void);
#define nimble_port_stop_ExpectAndReturn(cmock_retval) nimble_port_stop_CMockExpectAndReturn(__LINE__, cmock_retval)
void nimble_port_stop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
typedef int (* CMOCK_nimble_port_stop_CALLBACK)(int cmock_num_calls);
void nimble_port_stop_AddCallback(CMOCK_nimble_port_stop_CALLBACK Callback);
void nimble_port_stop_Stub(CMOCK_nimble_port_stop_CALLBACK Callback);
#define nimble_port_stop_StubWithCallback nimble_port_stop_Stub
#define nimble_port_get_dflt_eventq_IgnoreAndReturn(cmock_retval) nimble_port_get_dflt_eventq_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nimble_port_get_dflt_eventq_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, struct ble_npl_eventq* cmock_to_return);
#define nimble_port_get_dflt_eventq_StopIgnore() nimble_port_get_dflt_eventq_CMockStopIgnore()
void nimble_port_get_dflt_eventq_CMockStopIgnore(void);
#define nimble_port_get_dflt_eventq_ExpectAndReturn(cmock_retval) nimble_port_get_dflt_eventq_CMockExpectAndReturn(__LINE__, cmock_retval)
void nimble_port_get_dflt_eventq_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, struct ble_npl_eventq* cmock_to_return);
typedef struct ble_npl_eventq* (* CMOCK_nimble_port_get_dflt_eventq_CALLBACK)(int cmock_num_calls);
void nimble_port_get_dflt_eventq_AddCallback(CMOCK_nimble_port_get_dflt_eventq_CALLBACK Callback);
void nimble_port_get_dflt_eventq_Stub(CMOCK_nimble_port_get_dflt_eventq_CALLBACK Callback);
#define nimble_port_get_dflt_eventq_StubWithCallback nimble_port_get_dflt_eventq_Stub
#define nimble_port_ll_task_func_Ignore() nimble_port_ll_task_func_CMockIgnore()
void nimble_port_ll_task_func_CMockIgnore(void);
#define nimble_port_ll_task_func_StopIgnore() nimble_port_ll_task_func_CMockStopIgnore()
void nimble_port_ll_task_func_CMockStopIgnore(void);
#define nimble_port_ll_task_func_Expect(arg) nimble_port_ll_task_func_CMockExpect(__LINE__, arg)
void nimble_port_ll_task_func_CMockExpect(UNITY_LINE_TYPE cmock_line, void* arg);
typedef void (* CMOCK_nimble_port_ll_task_func_CALLBACK)(void* arg, int cmock_num_calls);
void nimble_port_ll_task_func_AddCallback(CMOCK_nimble_port_ll_task_func_CALLBACK Callback);
void nimble_port_ll_task_func_Stub(CMOCK_nimble_port_ll_task_func_CALLBACK Callback);
#define nimble_port_ll_task_func_StubWithCallback nimble_port_ll_task_func_Stub
#define nimble_port_ll_task_func_ExpectWithArray(arg, arg_Depth) nimble_port_ll_task_func_CMockExpectWithArray(__LINE__, arg, arg_Depth)
void nimble_port_ll_task_func_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* arg, int arg_Depth);
#define nimble_port_ll_task_func_ReturnThruPtr_arg(arg) nimble_port_ll_task_func_CMockReturnMemThruPtr_arg(__LINE__, arg, sizeof(void))
#define nimble_port_ll_task_func_ReturnArrayThruPtr_arg(arg, cmock_len) nimble_port_ll_task_func_CMockReturnMemThruPtr_arg(__LINE__, arg, cmock_len * sizeof(*arg))
#define nimble_port_ll_task_func_ReturnMemThruPtr_arg(arg, cmock_size) nimble_port_ll_task_func_CMockReturnMemThruPtr_arg(__LINE__, arg, cmock_size)
void nimble_port_ll_task_func_CMockReturnMemThruPtr_arg(UNITY_LINE_TYPE cmock_line, void* arg, size_t cmock_size);
#define nimble_port_ll_task_func_IgnoreArg_arg() nimble_port_ll_task_func_CMockIgnoreArg_arg(__LINE__)
void nimble_port_ll_task_func_CMockIgnoreArg_arg(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
