#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_NVS_H
#define _MOCK_NVS_H

#include "unity.h"
#include "nvs.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_nvs_Init(void);
void mock_nvs_Destroy(void);
void mock_nvs_Verify(void);




#define nvs_open_IgnoreAndReturn(cmock_retval) nvs_open_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_open_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_open_StopIgnore() nvs_open_CMockStopIgnore()
void nvs_open_CMockStopIgnore(void);
#define nvs_open_ExpectAndReturn(name, open_mode, out_handle, cmock_retval) nvs_open_CMockExpectAndReturn(__LINE__, name, open_mode, out_handle, cmock_retval)
void nvs_open_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* name, nvs_open_mode_t open_mode, nvs_handle_t* out_handle, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_open_CALLBACK)(const char* name, nvs_open_mode_t open_mode, nvs_handle_t* out_handle, int cmock_num_calls);
void nvs_open_AddCallback(CMOCK_nvs_open_CALLBACK Callback);
void nvs_open_Stub(CMOCK_nvs_open_CALLBACK Callback);
#define nvs_open_StubWithCallback nvs_open_Stub
#define nvs_open_ExpectWithArrayAndReturn(name, open_mode, out_handle, out_handle_Depth, cmock_retval) nvs_open_CMockExpectWithArrayAndReturn(__LINE__, name, open_mode, out_handle, out_handle_Depth, cmock_retval)
void nvs_open_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const char* name, nvs_open_mode_t open_mode, nvs_handle_t* out_handle, int out_handle_Depth, esp_err_t cmock_to_return);
#define nvs_open_ReturnThruPtr_out_handle(out_handle) nvs_open_CMockReturnMemThruPtr_out_handle(__LINE__, out_handle, sizeof(nvs_handle_t))
#define nvs_open_ReturnArrayThruPtr_out_handle(out_handle, cmock_len) nvs_open_CMockReturnMemThruPtr_out_handle(__LINE__, out_handle, cmock_len * sizeof(*out_handle))
#define nvs_open_ReturnMemThruPtr_out_handle(out_handle, cmock_size) nvs_open_CMockReturnMemThruPtr_out_handle(__LINE__, out_handle, cmock_size)
void nvs_open_CMockReturnMemThruPtr_out_handle(UNITY_LINE_TYPE cmock_line, nvs_handle_t* out_handle, size_t cmock_size);
#define nvs_open_IgnoreArg_name() nvs_open_CMockIgnoreArg_name(__LINE__)
void nvs_open_CMockIgnoreArg_name(UNITY_LINE_TYPE cmock_line);
#define nvs_open_IgnoreArg_open_mode() nvs_open_CMockIgnoreArg_open_mode(__LINE__)
void nvs_open_CMockIgnoreArg_open_mode(UNITY_LINE_TYPE cmock_line);
#define nvs_open_IgnoreArg_out_handle() nvs_open_CMockIgnoreArg_out_handle(__LINE__)
void nvs_open_CMockIgnoreArg_out_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_open_from_partition_IgnoreAndReturn(cmock_retval) nvs_open_from_partition_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_open_from_partition_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_open_from_partition_StopIgnore() nvs_open_from_partition_CMockStopIgnore()
void nvs_open_from_partition_CMockStopIgnore(void);
#define nvs_open_from_partition_ExpectAndReturn(part_name, name, open_mode, out_handle, cmock_retval) nvs_open_from_partition_CMockExpectAndReturn(__LINE__, part_name, name, open_mode, out_handle, cmock_retval)
void nvs_open_from_partition_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* part_name, const char* name, nvs_open_mode_t open_mode, nvs_handle_t* out_handle, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_open_from_partition_CALLBACK)(const char* part_name, const char* name, nvs_open_mode_t open_mode, nvs_handle_t* out_handle, int cmock_num_calls);
void nvs_open_from_partition_AddCallback(CMOCK_nvs_open_from_partition_CALLBACK Callback);
void nvs_open_from_partition_Stub(CMOCK_nvs_open_from_partition_CALLBACK Callback);
#define nvs_open_from_partition_StubWithCallback nvs_open_from_partition_Stub
#define nvs_open_from_partition_ExpectWithArrayAndReturn(part_name, name, open_mode, out_handle, out_handle_Depth, cmock_retval) nvs_open_from_partition_CMockExpectWithArrayAndReturn(__LINE__, part_name, name, open_mode, out_handle, out_handle_Depth, cmock_retval)
void nvs_open_from_partition_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const char* part_name, const char* name, nvs_open_mode_t open_mode, nvs_handle_t* out_handle, int out_handle_Depth, esp_err_t cmock_to_return);
#define nvs_open_from_partition_ReturnThruPtr_out_handle(out_handle) nvs_open_from_partition_CMockReturnMemThruPtr_out_handle(__LINE__, out_handle, sizeof(nvs_handle_t))
#define nvs_open_from_partition_ReturnArrayThruPtr_out_handle(out_handle, cmock_len) nvs_open_from_partition_CMockReturnMemThruPtr_out_handle(__LINE__, out_handle, cmock_len * sizeof(*out_handle))
#define nvs_open_from_partition_ReturnMemThruPtr_out_handle(out_handle, cmock_size) nvs_open_from_partition_CMockReturnMemThruPtr_out_handle(__LINE__, out_handle, cmock_size)
void nvs_open_from_partition_CMockReturnMemThruPtr_out_handle(UNITY_LINE_TYPE cmock_line, nvs_handle_t* out_handle, size_t cmock_size);
#define nvs_open_from_partition_IgnoreArg_part_name() nvs_open_from_partition_CMockIgnoreArg_part_name(__LINE__)
void nvs_open_from_partition_CMockIgnoreArg_part_name(UNITY_LINE_TYPE cmock_line);
#define nvs_open_from_partition_IgnoreArg_name() nvs_open_from_partition_CMockIgnoreArg_name(__LINE__)
void nvs_open_from_partition_CMockIgnoreArg_name(UNITY_LINE_TYPE cmock_line);
#define nvs_open_from_partition_IgnoreArg_open_mode() nvs_open_from_partition_CMockIgnoreArg_open_mode(__LINE__)
void nvs_open_from_partition_CMockIgnoreArg_open_mode(UNITY_LINE_TYPE cmock_line);
#define nvs_open_from_partition_IgnoreArg_out_handle() nvs_open_from_partition_CMockIgnoreArg_out_handle(__LINE__)
void nvs_open_from_partition_CMockIgnoreArg_out_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_set_i8_IgnoreAndReturn(cmock_retval) nvs_set_i8_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_set_i8_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_set_i8_StopIgnore() nvs_set_i8_CMockStopIgnore()
void nvs_set_i8_CMockStopIgnore(void);
#define nvs_set_i8_ExpectAndReturn(handle, key, value, cmock_retval) nvs_set_i8_CMockExpectAndReturn(__LINE__, handle, key, value, cmock_retval)
void nvs_set_i8_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, int8_t value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_set_i8_CALLBACK)(nvs_handle_t handle, const char* key, int8_t value, int cmock_num_calls);
void nvs_set_i8_AddCallback(CMOCK_nvs_set_i8_CALLBACK Callback);
void nvs_set_i8_Stub(CMOCK_nvs_set_i8_CALLBACK Callback);
#define nvs_set_i8_StubWithCallback nvs_set_i8_Stub
#define nvs_set_i8_IgnoreArg_handle() nvs_set_i8_CMockIgnoreArg_handle(__LINE__)
void nvs_set_i8_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_set_i8_IgnoreArg_key() nvs_set_i8_CMockIgnoreArg_key(__LINE__)
void nvs_set_i8_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_set_i8_IgnoreArg_value() nvs_set_i8_CMockIgnoreArg_value(__LINE__)
void nvs_set_i8_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define nvs_set_u8_IgnoreAndReturn(cmock_retval) nvs_set_u8_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_set_u8_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_set_u8_StopIgnore() nvs_set_u8_CMockStopIgnore()
void nvs_set_u8_CMockStopIgnore(void);
#define nvs_set_u8_ExpectAndReturn(handle, key, value, cmock_retval) nvs_set_u8_CMockExpectAndReturn(__LINE__, handle, key, value, cmock_retval)
void nvs_set_u8_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, uint8_t value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_set_u8_CALLBACK)(nvs_handle_t handle, const char* key, uint8_t value, int cmock_num_calls);
void nvs_set_u8_AddCallback(CMOCK_nvs_set_u8_CALLBACK Callback);
void nvs_set_u8_Stub(CMOCK_nvs_set_u8_CALLBACK Callback);
#define nvs_set_u8_StubWithCallback nvs_set_u8_Stub
#define nvs_set_u8_IgnoreArg_handle() nvs_set_u8_CMockIgnoreArg_handle(__LINE__)
void nvs_set_u8_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_set_u8_IgnoreArg_key() nvs_set_u8_CMockIgnoreArg_key(__LINE__)
void nvs_set_u8_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_set_u8_IgnoreArg_value() nvs_set_u8_CMockIgnoreArg_value(__LINE__)
void nvs_set_u8_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define nvs_set_i16_IgnoreAndReturn(cmock_retval) nvs_set_i16_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_set_i16_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_set_i16_StopIgnore() nvs_set_i16_CMockStopIgnore()
void nvs_set_i16_CMockStopIgnore(void);
#define nvs_set_i16_ExpectAndReturn(handle, key, value, cmock_retval) nvs_set_i16_CMockExpectAndReturn(__LINE__, handle, key, value, cmock_retval)
void nvs_set_i16_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, int16_t value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_set_i16_CALLBACK)(nvs_handle_t handle, const char* key, int16_t value, int cmock_num_calls);
void nvs_set_i16_AddCallback(CMOCK_nvs_set_i16_CALLBACK Callback);
void nvs_set_i16_Stub(CMOCK_nvs_set_i16_CALLBACK Callback);
#define nvs_set_i16_StubWithCallback nvs_set_i16_Stub
#define nvs_set_i16_IgnoreArg_handle() nvs_set_i16_CMockIgnoreArg_handle(__LINE__)
void nvs_set_i16_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_set_i16_IgnoreArg_key() nvs_set_i16_CMockIgnoreArg_key(__LINE__)
void nvs_set_i16_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_set_i16_IgnoreArg_value() nvs_set_i16_CMockIgnoreArg_value(__LINE__)
void nvs_set_i16_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define nvs_set_u16_IgnoreAndReturn(cmock_retval) nvs_set_u16_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_set_u16_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_set_u16_StopIgnore() nvs_set_u16_CMockStopIgnore()
void nvs_set_u16_CMockStopIgnore(void);
#define nvs_set_u16_ExpectAndReturn(handle, key, value, cmock_retval) nvs_set_u16_CMockExpectAndReturn(__LINE__, handle, key, value, cmock_retval)
void nvs_set_u16_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, uint16_t value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_set_u16_CALLBACK)(nvs_handle_t handle, const char* key, uint16_t value, int cmock_num_calls);
void nvs_set_u16_AddCallback(CMOCK_nvs_set_u16_CALLBACK Callback);
void nvs_set_u16_Stub(CMOCK_nvs_set_u16_CALLBACK Callback);
#define nvs_set_u16_StubWithCallback nvs_set_u16_Stub
#define nvs_set_u16_IgnoreArg_handle() nvs_set_u16_CMockIgnoreArg_handle(__LINE__)
void nvs_set_u16_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_set_u16_IgnoreArg_key() nvs_set_u16_CMockIgnoreArg_key(__LINE__)
void nvs_set_u16_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_set_u16_IgnoreArg_value() nvs_set_u16_CMockIgnoreArg_value(__LINE__)
void nvs_set_u16_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define nvs_set_i32_IgnoreAndReturn(cmock_retval) nvs_set_i32_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_set_i32_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_set_i32_StopIgnore() nvs_set_i32_CMockStopIgnore()
void nvs_set_i32_CMockStopIgnore(void);
#define nvs_set_i32_ExpectAndReturn(handle, key, value, cmock_retval) nvs_set_i32_CMockExpectAndReturn(__LINE__, handle, key, value, cmock_retval)
void nvs_set_i32_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, int32_t value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_set_i32_CALLBACK)(nvs_handle_t handle, const char* key, int32_t value, int cmock_num_calls);
void nvs_set_i32_AddCallback(CMOCK_nvs_set_i32_CALLBACK Callback);
void nvs_set_i32_Stub(CMOCK_nvs_set_i32_CALLBACK Callback);
#define nvs_set_i32_StubWithCallback nvs_set_i32_Stub
#define nvs_set_i32_IgnoreArg_handle() nvs_set_i32_CMockIgnoreArg_handle(__LINE__)
void nvs_set_i32_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_set_i32_IgnoreArg_key() nvs_set_i32_CMockIgnoreArg_key(__LINE__)
void nvs_set_i32_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_set_i32_IgnoreArg_value() nvs_set_i32_CMockIgnoreArg_value(__LINE__)
void nvs_set_i32_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define nvs_set_u32_IgnoreAndReturn(cmock_retval) nvs_set_u32_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_set_u32_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_set_u32_StopIgnore() nvs_set_u32_CMockStopIgnore()
void nvs_set_u32_CMockStopIgnore(void);
#define nvs_set_u32_ExpectAndReturn(handle, key, value, cmock_retval) nvs_set_u32_CMockExpectAndReturn(__LINE__, handle, key, value, cmock_retval)
void nvs_set_u32_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, uint32_t value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_set_u32_CALLBACK)(nvs_handle_t handle, const char* key, uint32_t value, int cmock_num_calls);
void nvs_set_u32_AddCallback(CMOCK_nvs_set_u32_CALLBACK Callback);
void nvs_set_u32_Stub(CMOCK_nvs_set_u32_CALLBACK Callback);
#define nvs_set_u32_StubWithCallback nvs_set_u32_Stub
#define nvs_set_u32_IgnoreArg_handle() nvs_set_u32_CMockIgnoreArg_handle(__LINE__)
void nvs_set_u32_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_set_u32_IgnoreArg_key() nvs_set_u32_CMockIgnoreArg_key(__LINE__)
void nvs_set_u32_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_set_u32_IgnoreArg_value() nvs_set_u32_CMockIgnoreArg_value(__LINE__)
void nvs_set_u32_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define nvs_set_i64_IgnoreAndReturn(cmock_retval) nvs_set_i64_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_set_i64_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_set_i64_StopIgnore() nvs_set_i64_CMockStopIgnore()
void nvs_set_i64_CMockStopIgnore(void);
#define nvs_set_i64_ExpectAndReturn(handle, key, value, cmock_retval) nvs_set_i64_CMockExpectAndReturn(__LINE__, handle, key, value, cmock_retval)
void nvs_set_i64_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, int64_t value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_set_i64_CALLBACK)(nvs_handle_t handle, const char* key, int64_t value, int cmock_num_calls);
void nvs_set_i64_AddCallback(CMOCK_nvs_set_i64_CALLBACK Callback);
void nvs_set_i64_Stub(CMOCK_nvs_set_i64_CALLBACK Callback);
#define nvs_set_i64_StubWithCallback nvs_set_i64_Stub
#define nvs_set_i64_IgnoreArg_handle() nvs_set_i64_CMockIgnoreArg_handle(__LINE__)
void nvs_set_i64_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_set_i64_IgnoreArg_key() nvs_set_i64_CMockIgnoreArg_key(__LINE__)
void nvs_set_i64_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_set_i64_IgnoreArg_value() nvs_set_i64_CMockIgnoreArg_value(__LINE__)
void nvs_set_i64_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define nvs_set_u64_IgnoreAndReturn(cmock_retval) nvs_set_u64_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_set_u64_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_set_u64_StopIgnore() nvs_set_u64_CMockStopIgnore()
void nvs_set_u64_CMockStopIgnore(void);
#define nvs_set_u64_ExpectAndReturn(handle, key, value, cmock_retval) nvs_set_u64_CMockExpectAndReturn(__LINE__, handle, key, value, cmock_retval)
void nvs_set_u64_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, uint64_t value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_set_u64_CALLBACK)(nvs_handle_t handle, const char* key, uint64_t value, int cmock_num_calls);
void nvs_set_u64_AddCallback(CMOCK_nvs_set_u64_CALLBACK Callback);
void nvs_set_u64_Stub(CMOCK_nvs_set_u64_CALLBACK Callback);
#define nvs_set_u64_StubWithCallback nvs_set_u64_Stub
#define nvs_set_u64_IgnoreArg_handle() nvs_set_u64_CMockIgnoreArg_handle(__LINE__)
void nvs_set_u64_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_set_u64_IgnoreArg_key() nvs_set_u64_CMockIgnoreArg_key(__LINE__)
void nvs_set_u64_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_set_u64_IgnoreArg_value() nvs_set_u64_CMockIgnoreArg_value(__LINE__)
void nvs_set_u64_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define nvs_set_str_IgnoreAndReturn(cmock_retval) nvs_set_str_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_set_str_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_set_str_StopIgnore() nvs_set_str_CMockStopIgnore()
void nvs_set_str_CMockStopIgnore(void);
#define nvs_set_str_ExpectAndReturn(handle, key, value, cmock_retval) nvs_set_str_CMockExpectAndReturn(__LINE__, handle, key, value, cmock_retval)
void nvs_set_str_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, const char* value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_set_str_CALLBACK)(nvs_handle_t handle, const char* key, const char* value, int cmock_num_calls);
void nvs_set_str_AddCallback(CMOCK_nvs_set_str_CALLBACK Callback);
void nvs_set_str_Stub(CMOCK_nvs_set_str_CALLBACK Callback);
#define nvs_set_str_StubWithCallback nvs_set_str_Stub
#define nvs_set_str_IgnoreArg_handle() nvs_set_str_CMockIgnoreArg_handle(__LINE__)
void nvs_set_str_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_set_str_IgnoreArg_key() nvs_set_str_CMockIgnoreArg_key(__LINE__)
void nvs_set_str_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_set_str_IgnoreArg_value() nvs_set_str_CMockIgnoreArg_value(__LINE__)
void nvs_set_str_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define nvs_set_blob_IgnoreAndReturn(cmock_retval) nvs_set_blob_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_set_blob_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_set_blob_StopIgnore() nvs_set_blob_CMockStopIgnore()
void nvs_set_blob_CMockStopIgnore(void);
#define nvs_set_blob_ExpectAndReturn(handle, key, value, length, cmock_retval) nvs_set_blob_CMockExpectAndReturn(__LINE__, handle, key, value, length, cmock_retval)
void nvs_set_blob_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, const void* value, size_t length, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_set_blob_CALLBACK)(nvs_handle_t handle, const char* key, const void* value, size_t length, int cmock_num_calls);
void nvs_set_blob_AddCallback(CMOCK_nvs_set_blob_CALLBACK Callback);
void nvs_set_blob_Stub(CMOCK_nvs_set_blob_CALLBACK Callback);
#define nvs_set_blob_StubWithCallback nvs_set_blob_Stub
#define nvs_set_blob_ExpectWithArrayAndReturn(handle, key, value, value_Depth, length, cmock_retval) nvs_set_blob_CMockExpectWithArrayAndReturn(__LINE__, handle, key, value, value_Depth, length, cmock_retval)
void nvs_set_blob_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, const void* value, int value_Depth, size_t length, esp_err_t cmock_to_return);
#define nvs_set_blob_IgnoreArg_handle() nvs_set_blob_CMockIgnoreArg_handle(__LINE__)
void nvs_set_blob_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_set_blob_IgnoreArg_key() nvs_set_blob_CMockIgnoreArg_key(__LINE__)
void nvs_set_blob_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_set_blob_IgnoreArg_value() nvs_set_blob_CMockIgnoreArg_value(__LINE__)
void nvs_set_blob_CMockIgnoreArg_value(UNITY_LINE_TYPE cmock_line);
#define nvs_set_blob_IgnoreArg_length() nvs_set_blob_CMockIgnoreArg_length(__LINE__)
void nvs_set_blob_CMockIgnoreArg_length(UNITY_LINE_TYPE cmock_line);
#define nvs_get_i8_IgnoreAndReturn(cmock_retval) nvs_get_i8_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_get_i8_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_get_i8_StopIgnore() nvs_get_i8_CMockStopIgnore()
void nvs_get_i8_CMockStopIgnore(void);
#define nvs_get_i8_ExpectAndReturn(handle, key, out_value, cmock_retval) nvs_get_i8_CMockExpectAndReturn(__LINE__, handle, key, out_value, cmock_retval)
void nvs_get_i8_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, int8_t* out_value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_get_i8_CALLBACK)(nvs_handle_t handle, const char* key, int8_t* out_value, int cmock_num_calls);
void nvs_get_i8_AddCallback(CMOCK_nvs_get_i8_CALLBACK Callback);
void nvs_get_i8_Stub(CMOCK_nvs_get_i8_CALLBACK Callback);
#define nvs_get_i8_StubWithCallback nvs_get_i8_Stub
#define nvs_get_i8_ExpectWithArrayAndReturn(handle, key, out_value, out_value_Depth, cmock_retval) nvs_get_i8_CMockExpectWithArrayAndReturn(__LINE__, handle, key, out_value, out_value_Depth, cmock_retval)
void nvs_get_i8_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, int8_t* out_value, int out_value_Depth, esp_err_t cmock_to_return);
#define nvs_get_i8_ReturnThruPtr_out_value(out_value) nvs_get_i8_CMockReturnMemThruPtr_out_value(__LINE__, out_value, sizeof(int8_t))
#define nvs_get_i8_ReturnArrayThruPtr_out_value(out_value, cmock_len) nvs_get_i8_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_len * sizeof(*out_value))
#define nvs_get_i8_ReturnMemThruPtr_out_value(out_value, cmock_size) nvs_get_i8_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_size)
void nvs_get_i8_CMockReturnMemThruPtr_out_value(UNITY_LINE_TYPE cmock_line, int8_t* out_value, size_t cmock_size);
#define nvs_get_i8_IgnoreArg_handle() nvs_get_i8_CMockIgnoreArg_handle(__LINE__)
void nvs_get_i8_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_get_i8_IgnoreArg_key() nvs_get_i8_CMockIgnoreArg_key(__LINE__)
void nvs_get_i8_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_get_i8_IgnoreArg_out_value() nvs_get_i8_CMockIgnoreArg_out_value(__LINE__)
void nvs_get_i8_CMockIgnoreArg_out_value(UNITY_LINE_TYPE cmock_line);
#define nvs_get_u8_IgnoreAndReturn(cmock_retval) nvs_get_u8_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_get_u8_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_get_u8_StopIgnore() nvs_get_u8_CMockStopIgnore()
void nvs_get_u8_CMockStopIgnore(void);
#define nvs_get_u8_ExpectAndReturn(handle, key, out_value, cmock_retval) nvs_get_u8_CMockExpectAndReturn(__LINE__, handle, key, out_value, cmock_retval)
void nvs_get_u8_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, uint8_t* out_value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_get_u8_CALLBACK)(nvs_handle_t handle, const char* key, uint8_t* out_value, int cmock_num_calls);
void nvs_get_u8_AddCallback(CMOCK_nvs_get_u8_CALLBACK Callback);
void nvs_get_u8_Stub(CMOCK_nvs_get_u8_CALLBACK Callback);
#define nvs_get_u8_StubWithCallback nvs_get_u8_Stub
#define nvs_get_u8_ExpectWithArrayAndReturn(handle, key, out_value, out_value_Depth, cmock_retval) nvs_get_u8_CMockExpectWithArrayAndReturn(__LINE__, handle, key, out_value, out_value_Depth, cmock_retval)
void nvs_get_u8_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, uint8_t* out_value, int out_value_Depth, esp_err_t cmock_to_return);
#define nvs_get_u8_ReturnThruPtr_out_value(out_value) nvs_get_u8_CMockReturnMemThruPtr_out_value(__LINE__, out_value, sizeof(uint8_t))
#define nvs_get_u8_ReturnArrayThruPtr_out_value(out_value, cmock_len) nvs_get_u8_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_len * sizeof(*out_value))
#define nvs_get_u8_ReturnMemThruPtr_out_value(out_value, cmock_size) nvs_get_u8_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_size)
void nvs_get_u8_CMockReturnMemThruPtr_out_value(UNITY_LINE_TYPE cmock_line, uint8_t* out_value, size_t cmock_size);
#define nvs_get_u8_IgnoreArg_handle() nvs_get_u8_CMockIgnoreArg_handle(__LINE__)
void nvs_get_u8_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_get_u8_IgnoreArg_key() nvs_get_u8_CMockIgnoreArg_key(__LINE__)
void nvs_get_u8_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_get_u8_IgnoreArg_out_value() nvs_get_u8_CMockIgnoreArg_out_value(__LINE__)
void nvs_get_u8_CMockIgnoreArg_out_value(UNITY_LINE_TYPE cmock_line);
#define nvs_get_i16_IgnoreAndReturn(cmock_retval) nvs_get_i16_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_get_i16_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_get_i16_StopIgnore() nvs_get_i16_CMockStopIgnore()
void nvs_get_i16_CMockStopIgnore(void);
#define nvs_get_i16_ExpectAndReturn(handle, key, out_value, cmock_retval) nvs_get_i16_CMockExpectAndReturn(__LINE__, handle, key, out_value, cmock_retval)
void nvs_get_i16_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, int16_t* out_value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_get_i16_CALLBACK)(nvs_handle_t handle, const char* key, int16_t* out_value, int cmock_num_calls);
void nvs_get_i16_AddCallback(CMOCK_nvs_get_i16_CALLBACK Callback);
void nvs_get_i16_Stub(CMOCK_nvs_get_i16_CALLBACK Callback);
#define nvs_get_i16_StubWithCallback nvs_get_i16_Stub
#define nvs_get_i16_ExpectWithArrayAndReturn(handle, key, out_value, out_value_Depth, cmock_retval) nvs_get_i16_CMockExpectWithArrayAndReturn(__LINE__, handle, key, out_value, out_value_Depth, cmock_retval)
void nvs_get_i16_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, int16_t* out_value, int out_value_Depth, esp_err_t cmock_to_return);
#define nvs_get_i16_ReturnThruPtr_out_value(out_value) nvs_get_i16_CMockReturnMemThruPtr_out_value(__LINE__, out_value, sizeof(int16_t))
#define nvs_get_i16_ReturnArrayThruPtr_out_value(out_value, cmock_len) nvs_get_i16_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_len * sizeof(*out_value))
#define nvs_get_i16_ReturnMemThruPtr_out_value(out_value, cmock_size) nvs_get_i16_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_size)
void nvs_get_i16_CMockReturnMemThruPtr_out_value(UNITY_LINE_TYPE cmock_line, int16_t* out_value, size_t cmock_size);
#define nvs_get_i16_IgnoreArg_handle() nvs_get_i16_CMockIgnoreArg_handle(__LINE__)
void nvs_get_i16_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_get_i16_IgnoreArg_key() nvs_get_i16_CMockIgnoreArg_key(__LINE__)
void nvs_get_i16_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_get_i16_IgnoreArg_out_value() nvs_get_i16_CMockIgnoreArg_out_value(__LINE__)
void nvs_get_i16_CMockIgnoreArg_out_value(UNITY_LINE_TYPE cmock_line);
#define nvs_get_u16_IgnoreAndReturn(cmock_retval) nvs_get_u16_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_get_u16_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_get_u16_StopIgnore() nvs_get_u16_CMockStopIgnore()
void nvs_get_u16_CMockStopIgnore(void);
#define nvs_get_u16_ExpectAndReturn(handle, key, out_value, cmock_retval) nvs_get_u16_CMockExpectAndReturn(__LINE__, handle, key, out_value, cmock_retval)
void nvs_get_u16_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, uint16_t* out_value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_get_u16_CALLBACK)(nvs_handle_t handle, const char* key, uint16_t* out_value, int cmock_num_calls);
void nvs_get_u16_AddCallback(CMOCK_nvs_get_u16_CALLBACK Callback);
void nvs_get_u16_Stub(CMOCK_nvs_get_u16_CALLBACK Callback);
#define nvs_get_u16_StubWithCallback nvs_get_u16_Stub
#define nvs_get_u16_ExpectWithArrayAndReturn(handle, key, out_value, out_value_Depth, cmock_retval) nvs_get_u16_CMockExpectWithArrayAndReturn(__LINE__, handle, key, out_value, out_value_Depth, cmock_retval)
void nvs_get_u16_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, uint16_t* out_value, int out_value_Depth, esp_err_t cmock_to_return);
#define nvs_get_u16_ReturnThruPtr_out_value(out_value) nvs_get_u16_CMockReturnMemThruPtr_out_value(__LINE__, out_value, sizeof(uint16_t))
#define nvs_get_u16_ReturnArrayThruPtr_out_value(out_value, cmock_len) nvs_get_u16_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_len * sizeof(*out_value))
#define nvs_get_u16_ReturnMemThruPtr_out_value(out_value, cmock_size) nvs_get_u16_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_size)
void nvs_get_u16_CMockReturnMemThruPtr_out_value(UNITY_LINE_TYPE cmock_line, uint16_t* out_value, size_t cmock_size);
#define nvs_get_u16_IgnoreArg_handle() nvs_get_u16_CMockIgnoreArg_handle(__LINE__)
void nvs_get_u16_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_get_u16_IgnoreArg_key() nvs_get_u16_CMockIgnoreArg_key(__LINE__)
void nvs_get_u16_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_get_u16_IgnoreArg_out_value() nvs_get_u16_CMockIgnoreArg_out_value(__LINE__)
void nvs_get_u16_CMockIgnoreArg_out_value(UNITY_LINE_TYPE cmock_line);
#define nvs_get_i32_IgnoreAndReturn(cmock_retval) nvs_get_i32_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_get_i32_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_get_i32_StopIgnore() nvs_get_i32_CMockStopIgnore()
void nvs_get_i32_CMockStopIgnore(void);
#define nvs_get_i32_ExpectAndReturn(handle, key, out_value, cmock_retval) nvs_get_i32_CMockExpectAndReturn(__LINE__, handle, key, out_value, cmock_retval)
void nvs_get_i32_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, int32_t* out_value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_get_i32_CALLBACK)(nvs_handle_t handle, const char* key, int32_t* out_value, int cmock_num_calls);
void nvs_get_i32_AddCallback(CMOCK_nvs_get_i32_CALLBACK Callback);
void nvs_get_i32_Stub(CMOCK_nvs_get_i32_CALLBACK Callback);
#define nvs_get_i32_StubWithCallback nvs_get_i32_Stub
#define nvs_get_i32_ExpectWithArrayAndReturn(handle, key, out_value, out_value_Depth, cmock_retval) nvs_get_i32_CMockExpectWithArrayAndReturn(__LINE__, handle, key, out_value, out_value_Depth, cmock_retval)
void nvs_get_i32_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, int32_t* out_value, int out_value_Depth, esp_err_t cmock_to_return);
#define nvs_get_i32_ReturnThruPtr_out_value(out_value) nvs_get_i32_CMockReturnMemThruPtr_out_value(__LINE__, out_value, sizeof(int32_t))
#define nvs_get_i32_ReturnArrayThruPtr_out_value(out_value, cmock_len) nvs_get_i32_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_len * sizeof(*out_value))
#define nvs_get_i32_ReturnMemThruPtr_out_value(out_value, cmock_size) nvs_get_i32_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_size)
void nvs_get_i32_CMockReturnMemThruPtr_out_value(UNITY_LINE_TYPE cmock_line, int32_t* out_value, size_t cmock_size);
#define nvs_get_i32_IgnoreArg_handle() nvs_get_i32_CMockIgnoreArg_handle(__LINE__)
void nvs_get_i32_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_get_i32_IgnoreArg_key() nvs_get_i32_CMockIgnoreArg_key(__LINE__)
void nvs_get_i32_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_get_i32_IgnoreArg_out_value() nvs_get_i32_CMockIgnoreArg_out_value(__LINE__)
void nvs_get_i32_CMockIgnoreArg_out_value(UNITY_LINE_TYPE cmock_line);
#define nvs_get_u32_IgnoreAndReturn(cmock_retval) nvs_get_u32_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_get_u32_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_get_u32_StopIgnore() nvs_get_u32_CMockStopIgnore()
void nvs_get_u32_CMockStopIgnore(void);
#define nvs_get_u32_ExpectAndReturn(handle, key, out_value, cmock_retval) nvs_get_u32_CMockExpectAndReturn(__LINE__, handle, key, out_value, cmock_retval)
void nvs_get_u32_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, uint32_t* out_value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_get_u32_CALLBACK)(nvs_handle_t handle, const char* key, uint32_t* out_value, int cmock_num_calls);
void nvs_get_u32_AddCallback(CMOCK_nvs_get_u32_CALLBACK Callback);
void nvs_get_u32_Stub(CMOCK_nvs_get_u32_CALLBACK Callback);
#define nvs_get_u32_StubWithCallback nvs_get_u32_Stub
#define nvs_get_u32_ExpectWithArrayAndReturn(handle, key, out_value, out_value_Depth, cmock_retval) nvs_get_u32_CMockExpectWithArrayAndReturn(__LINE__, handle, key, out_value, out_value_Depth, cmock_retval)
void nvs_get_u32_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, uint32_t* out_value, int out_value_Depth, esp_err_t cmock_to_return);
#define nvs_get_u32_ReturnThruPtr_out_value(out_value) nvs_get_u32_CMockReturnMemThruPtr_out_value(__LINE__, out_value, sizeof(uint32_t))
#define nvs_get_u32_ReturnArrayThruPtr_out_value(out_value, cmock_len) nvs_get_u32_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_len * sizeof(*out_value))
#define nvs_get_u32_ReturnMemThruPtr_out_value(out_value, cmock_size) nvs_get_u32_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_size)
void nvs_get_u32_CMockReturnMemThruPtr_out_value(UNITY_LINE_TYPE cmock_line, uint32_t* out_value, size_t cmock_size);
#define nvs_get_u32_IgnoreArg_handle() nvs_get_u32_CMockIgnoreArg_handle(__LINE__)
void nvs_get_u32_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_get_u32_IgnoreArg_key() nvs_get_u32_CMockIgnoreArg_key(__LINE__)
void nvs_get_u32_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_get_u32_IgnoreArg_out_value() nvs_get_u32_CMockIgnoreArg_out_value(__LINE__)
void nvs_get_u32_CMockIgnoreArg_out_value(UNITY_LINE_TYPE cmock_line);
#define nvs_get_i64_IgnoreAndReturn(cmock_retval) nvs_get_i64_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_get_i64_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_get_i64_StopIgnore() nvs_get_i64_CMockStopIgnore()
void nvs_get_i64_CMockStopIgnore(void);
#define nvs_get_i64_ExpectAndReturn(handle, key, out_value, cmock_retval) nvs_get_i64_CMockExpectAndReturn(__LINE__, handle, key, out_value, cmock_retval)
void nvs_get_i64_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, int64_t* out_value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_get_i64_CALLBACK)(nvs_handle_t handle, const char* key, int64_t* out_value, int cmock_num_calls);
void nvs_get_i64_AddCallback(CMOCK_nvs_get_i64_CALLBACK Callback);
void nvs_get_i64_Stub(CMOCK_nvs_get_i64_CALLBACK Callback);
#define nvs_get_i64_StubWithCallback nvs_get_i64_Stub
#define nvs_get_i64_ExpectWithArrayAndReturn(handle, key, out_value, out_value_Depth, cmock_retval) nvs_get_i64_CMockExpectWithArrayAndReturn(__LINE__, handle, key, out_value, out_value_Depth, cmock_retval)
void nvs_get_i64_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, int64_t* out_value, int out_value_Depth, esp_err_t cmock_to_return);
#define nvs_get_i64_ReturnThruPtr_out_value(out_value) nvs_get_i64_CMockReturnMemThruPtr_out_value(__LINE__, out_value, sizeof(int64_t))
#define nvs_get_i64_ReturnArrayThruPtr_out_value(out_value, cmock_len) nvs_get_i64_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_len * sizeof(*out_value))
#define nvs_get_i64_ReturnMemThruPtr_out_value(out_value, cmock_size) nvs_get_i64_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_size)
void nvs_get_i64_CMockReturnMemThruPtr_out_value(UNITY_LINE_TYPE cmock_line, int64_t* out_value, size_t cmock_size);
#define nvs_get_i64_IgnoreArg_handle() nvs_get_i64_CMockIgnoreArg_handle(__LINE__)
void nvs_get_i64_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_get_i64_IgnoreArg_key() nvs_get_i64_CMockIgnoreArg_key(__LINE__)
void nvs_get_i64_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_get_i64_IgnoreArg_out_value() nvs_get_i64_CMockIgnoreArg_out_value(__LINE__)
void nvs_get_i64_CMockIgnoreArg_out_value(UNITY_LINE_TYPE cmock_line);
#define nvs_get_u64_IgnoreAndReturn(cmock_retval) nvs_get_u64_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_get_u64_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_get_u64_StopIgnore() nvs_get_u64_CMockStopIgnore()
void nvs_get_u64_CMockStopIgnore(void);
#define nvs_get_u64_ExpectAndReturn(handle, key, out_value, cmock_retval) nvs_get_u64_CMockExpectAndReturn(__LINE__, handle, key, out_value, cmock_retval)
void nvs_get_u64_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, uint64_t* out_value, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_get_u64_CALLBACK)(nvs_handle_t handle, const char* key, uint64_t* out_value, int cmock_num_calls);
void nvs_get_u64_AddCallback(CMOCK_nvs_get_u64_CALLBACK Callback);
void nvs_get_u64_Stub(CMOCK_nvs_get_u64_CALLBACK Callback);
#define nvs_get_u64_StubWithCallback nvs_get_u64_Stub
#define nvs_get_u64_ExpectWithArrayAndReturn(handle, key, out_value, out_value_Depth, cmock_retval) nvs_get_u64_CMockExpectWithArrayAndReturn(__LINE__, handle, key, out_value, out_value_Depth, cmock_retval)
void nvs_get_u64_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, uint64_t* out_value, int out_value_Depth, esp_err_t cmock_to_return);
#define nvs_get_u64_ReturnThruPtr_out_value(out_value) nvs_get_u64_CMockReturnMemThruPtr_out_value(__LINE__, out_value, sizeof(uint64_t))
#define nvs_get_u64_ReturnArrayThruPtr_out_value(out_value, cmock_len) nvs_get_u64_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_len * sizeof(*out_value))
#define nvs_get_u64_ReturnMemThruPtr_out_value(out_value, cmock_size) nvs_get_u64_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_size)
void nvs_get_u64_CMockReturnMemThruPtr_out_value(UNITY_LINE_TYPE cmock_line, uint64_t* out_value, size_t cmock_size);
#define nvs_get_u64_IgnoreArg_handle() nvs_get_u64_CMockIgnoreArg_handle(__LINE__)
void nvs_get_u64_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_get_u64_IgnoreArg_key() nvs_get_u64_CMockIgnoreArg_key(__LINE__)
void nvs_get_u64_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_get_u64_IgnoreArg_out_value() nvs_get_u64_CMockIgnoreArg_out_value(__LINE__)
void nvs_get_u64_CMockIgnoreArg_out_value(UNITY_LINE_TYPE cmock_line);
#define nvs_get_str_IgnoreAndReturn(cmock_retval) nvs_get_str_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_get_str_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_get_str_StopIgnore() nvs_get_str_CMockStopIgnore()
void nvs_get_str_CMockStopIgnore(void);
#define nvs_get_str_ExpectAndReturn(handle, key, out_value, length, cmock_retval) nvs_get_str_CMockExpectAndReturn(__LINE__, handle, key, out_value, length, cmock_retval)
void nvs_get_str_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, char* out_value, size_t* length, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_get_str_CALLBACK)(nvs_handle_t handle, const char* key, char* out_value, size_t* length, int cmock_num_calls);
void nvs_get_str_AddCallback(CMOCK_nvs_get_str_CALLBACK Callback);
void nvs_get_str_Stub(CMOCK_nvs_get_str_CALLBACK Callback);
#define nvs_get_str_StubWithCallback nvs_get_str_Stub
#define nvs_get_str_ExpectWithArrayAndReturn(handle, key, out_value, length, length_Depth, cmock_retval) nvs_get_str_CMockExpectWithArrayAndReturn(__LINE__, handle, key, out_value, length, length_Depth, cmock_retval)
void nvs_get_str_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, char* out_value, size_t* length, int length_Depth, esp_err_t cmock_to_return);
#define nvs_get_str_ReturnThruPtr_out_value(out_value) nvs_get_str_CMockReturnMemThruPtr_out_value(__LINE__, out_value, sizeof(char))
#define nvs_get_str_ReturnArrayThruPtr_out_value(out_value, cmock_len) nvs_get_str_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_len * sizeof(*out_value))
#define nvs_get_str_ReturnMemThruPtr_out_value(out_value, cmock_size) nvs_get_str_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_size)
void nvs_get_str_CMockReturnMemThruPtr_out_value(UNITY_LINE_TYPE cmock_line, char* out_value, size_t cmock_size);
#define nvs_get_str_ReturnThruPtr_length(length) nvs_get_str_CMockReturnMemThruPtr_length(__LINE__, length, sizeof(size_t))
#define nvs_get_str_ReturnArrayThruPtr_length(length, cmock_len) nvs_get_str_CMockReturnMemThruPtr_length(__LINE__, length, cmock_len * sizeof(*length))
#define nvs_get_str_ReturnMemThruPtr_length(length, cmock_size) nvs_get_str_CMockReturnMemThruPtr_length(__LINE__, length, cmock_size)
void nvs_get_str_CMockReturnMemThruPtr_length(UNITY_LINE_TYPE cmock_line, size_t* length, size_t cmock_size);
#define nvs_get_str_IgnoreArg_handle() nvs_get_str_CMockIgnoreArg_handle(__LINE__)
void nvs_get_str_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_get_str_IgnoreArg_key() nvs_get_str_CMockIgnoreArg_key(__LINE__)
void nvs_get_str_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_get_str_IgnoreArg_out_value() nvs_get_str_CMockIgnoreArg_out_value(__LINE__)
void nvs_get_str_CMockIgnoreArg_out_value(UNITY_LINE_TYPE cmock_line);
#define nvs_get_str_IgnoreArg_length() nvs_get_str_CMockIgnoreArg_length(__LINE__)
void nvs_get_str_CMockIgnoreArg_length(UNITY_LINE_TYPE cmock_line);
#define nvs_get_blob_IgnoreAndReturn(cmock_retval) nvs_get_blob_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_get_blob_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_get_blob_StopIgnore() nvs_get_blob_CMockStopIgnore()
void nvs_get_blob_CMockStopIgnore(void);
#define nvs_get_blob_ExpectAndReturn(handle, key, out_value, length, cmock_retval) nvs_get_blob_CMockExpectAndReturn(__LINE__, handle, key, out_value, length, cmock_retval)
void nvs_get_blob_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, void* out_value, size_t* length, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_get_blob_CALLBACK)(nvs_handle_t handle, const char* key, void* out_value, size_t* length, int cmock_num_calls);
void nvs_get_blob_AddCallback(CMOCK_nvs_get_blob_CALLBACK Callback);
void nvs_get_blob_Stub(CMOCK_nvs_get_blob_CALLBACK Callback);
#define nvs_get_blob_StubWithCallback nvs_get_blob_Stub
#define nvs_get_blob_ExpectWithArrayAndReturn(handle, key, out_value, out_value_Depth, length, length_Depth, cmock_retval) nvs_get_blob_CMockExpectWithArrayAndReturn(__LINE__, handle, key, out_value, out_value_Depth, length, length_Depth, cmock_retval)
void nvs_get_blob_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, void* out_value, int out_value_Depth, size_t* length, int length_Depth, esp_err_t cmock_to_return);
#define nvs_get_blob_ReturnThruPtr_out_value(out_value) nvs_get_blob_CMockReturnMemThruPtr_out_value(__LINE__, out_value, sizeof(void))
#define nvs_get_blob_ReturnArrayThruPtr_out_value(out_value, cmock_len) nvs_get_blob_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_len * sizeof(*out_value))
#define nvs_get_blob_ReturnMemThruPtr_out_value(out_value, cmock_size) nvs_get_blob_CMockReturnMemThruPtr_out_value(__LINE__, out_value, cmock_size)
void nvs_get_blob_CMockReturnMemThruPtr_out_value(UNITY_LINE_TYPE cmock_line, void* out_value, size_t cmock_size);
#define nvs_get_blob_ReturnThruPtr_length(length) nvs_get_blob_CMockReturnMemThruPtr_length(__LINE__, length, sizeof(size_t))
#define nvs_get_blob_ReturnArrayThruPtr_length(length, cmock_len) nvs_get_blob_CMockReturnMemThruPtr_length(__LINE__, length, cmock_len * sizeof(*length))
#define nvs_get_blob_ReturnMemThruPtr_length(length, cmock_size) nvs_get_blob_CMockReturnMemThruPtr_length(__LINE__, length, cmock_size)
void nvs_get_blob_CMockReturnMemThruPtr_length(UNITY_LINE_TYPE cmock_line, size_t* length, size_t cmock_size);
#define nvs_get_blob_IgnoreArg_handle() nvs_get_blob_CMockIgnoreArg_handle(__LINE__)
void nvs_get_blob_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_get_blob_IgnoreArg_key() nvs_get_blob_CMockIgnoreArg_key(__LINE__)
void nvs_get_blob_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_get_blob_IgnoreArg_out_value() nvs_get_blob_CMockIgnoreArg_out_value(__LINE__)
void nvs_get_blob_CMockIgnoreArg_out_value(UNITY_LINE_TYPE cmock_line);
#define nvs_get_blob_IgnoreArg_length() nvs_get_blob_CMockIgnoreArg_length(__LINE__)
void nvs_get_blob_CMockIgnoreArg_length(UNITY_LINE_TYPE cmock_line);
#define nvs_erase_key_IgnoreAndReturn(cmock_retval) nvs_erase_key_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_erase_key_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_erase_key_StopIgnore() nvs_erase_key_CMockStopIgnore()
void nvs_erase_key_CMockStopIgnore(void);
#define nvs_erase_key_ExpectAndReturn(handle, key, cmock_retval) nvs_erase_key_CMockExpectAndReturn(__LINE__, handle, key, cmock_retval)
void nvs_erase_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, const char* key, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_erase_key_CALLBACK)(nvs_handle_t handle, const char* key, int cmock_num_calls);
void nvs_erase_key_AddCallback(CMOCK_nvs_erase_key_CALLBACK Callback);
void nvs_erase_key_Stub(CMOCK_nvs_erase_key_CALLBACK Callback);
#define nvs_erase_key_StubWithCallback nvs_erase_key_Stub
#define nvs_erase_key_IgnoreArg_handle() nvs_erase_key_CMockIgnoreArg_handle(__LINE__)
void nvs_erase_key_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_erase_key_IgnoreArg_key() nvs_erase_key_CMockIgnoreArg_key(__LINE__)
void nvs_erase_key_CMockIgnoreArg_key(UNITY_LINE_TYPE cmock_line);
#define nvs_erase_all_IgnoreAndReturn(cmock_retval) nvs_erase_all_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_erase_all_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_erase_all_StopIgnore() nvs_erase_all_CMockStopIgnore()
void nvs_erase_all_CMockStopIgnore(void);
#define nvs_erase_all_ExpectAndReturn(handle, cmock_retval) nvs_erase_all_CMockExpectAndReturn(__LINE__, handle, cmock_retval)
void nvs_erase_all_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_erase_all_CALLBACK)(nvs_handle_t handle, int cmock_num_calls);
void nvs_erase_all_AddCallback(CMOCK_nvs_erase_all_CALLBACK Callback);
void nvs_erase_all_Stub(CMOCK_nvs_erase_all_CALLBACK Callback);
#define nvs_erase_all_StubWithCallback nvs_erase_all_Stub
#define nvs_erase_all_IgnoreArg_handle() nvs_erase_all_CMockIgnoreArg_handle(__LINE__)
void nvs_erase_all_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_commit_IgnoreAndReturn(cmock_retval) nvs_commit_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_commit_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_commit_StopIgnore() nvs_commit_CMockStopIgnore()
void nvs_commit_CMockStopIgnore(void);
#define nvs_commit_ExpectAndReturn(handle, cmock_retval) nvs_commit_CMockExpectAndReturn(__LINE__, handle, cmock_retval)
void nvs_commit_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_commit_CALLBACK)(nvs_handle_t handle, int cmock_num_calls);
void nvs_commit_AddCallback(CMOCK_nvs_commit_CALLBACK Callback);
void nvs_commit_Stub(CMOCK_nvs_commit_CALLBACK Callback);
#define nvs_commit_StubWithCallback nvs_commit_Stub
#define nvs_commit_IgnoreArg_handle() nvs_commit_CMockIgnoreArg_handle(__LINE__)
void nvs_commit_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_close_Ignore() nvs_close_CMockIgnore()
void nvs_close_CMockIgnore(void);
#define nvs_close_StopIgnore() nvs_close_CMockStopIgnore()
void nvs_close_CMockStopIgnore(void);
#define nvs_close_Expect(handle) nvs_close_CMockExpect(__LINE__, handle)
void nvs_close_CMockExpect(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle);
typedef void (* CMOCK_nvs_close_CALLBACK)(nvs_handle_t handle, int cmock_num_calls);
void nvs_close_AddCallback(CMOCK_nvs_close_CALLBACK Callback);
void nvs_close_Stub(CMOCK_nvs_close_CALLBACK Callback);
#define nvs_close_StubWithCallback nvs_close_Stub
#define nvs_close_IgnoreArg_handle() nvs_close_CMockIgnoreArg_handle(__LINE__)
void nvs_close_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_get_stats_IgnoreAndReturn(cmock_retval) nvs_get_stats_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_get_stats_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_get_stats_StopIgnore() nvs_get_stats_CMockStopIgnore()
void nvs_get_stats_CMockStopIgnore(void);
#define nvs_get_stats_ExpectAndReturn(part_name, nvs_stats, cmock_retval) nvs_get_stats_CMockExpectAndReturn(__LINE__, part_name, nvs_stats, cmock_retval)
void nvs_get_stats_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* part_name, nvs_stats_t* nvs_stats, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_get_stats_CALLBACK)(const char* part_name, nvs_stats_t* nvs_stats, int cmock_num_calls);
void nvs_get_stats_AddCallback(CMOCK_nvs_get_stats_CALLBACK Callback);
void nvs_get_stats_Stub(CMOCK_nvs_get_stats_CALLBACK Callback);
#define nvs_get_stats_StubWithCallback nvs_get_stats_Stub
#define nvs_get_stats_ExpectWithArrayAndReturn(part_name, nvs_stats, nvs_stats_Depth, cmock_retval) nvs_get_stats_CMockExpectWithArrayAndReturn(__LINE__, part_name, nvs_stats, nvs_stats_Depth, cmock_retval)
void nvs_get_stats_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const char* part_name, nvs_stats_t* nvs_stats, int nvs_stats_Depth, esp_err_t cmock_to_return);
#define nvs_get_stats_ReturnThruPtr_nvs_stats(nvs_stats) nvs_get_stats_CMockReturnMemThruPtr_nvs_stats(__LINE__, nvs_stats, sizeof(nvs_stats_t))
#define nvs_get_stats_ReturnArrayThruPtr_nvs_stats(nvs_stats, cmock_len) nvs_get_stats_CMockReturnMemThruPtr_nvs_stats(__LINE__, nvs_stats, cmock_len * sizeof(*nvs_stats))
#define nvs_get_stats_ReturnMemThruPtr_nvs_stats(nvs_stats, cmock_size) nvs_get_stats_CMockReturnMemThruPtr_nvs_stats(__LINE__, nvs_stats, cmock_size)
void nvs_get_stats_CMockReturnMemThruPtr_nvs_stats(UNITY_LINE_TYPE cmock_line, nvs_stats_t* nvs_stats, size_t cmock_size);
#define nvs_get_stats_IgnoreArg_part_name() nvs_get_stats_CMockIgnoreArg_part_name(__LINE__)
void nvs_get_stats_CMockIgnoreArg_part_name(UNITY_LINE_TYPE cmock_line);
#define nvs_get_stats_IgnoreArg_nvs_stats() nvs_get_stats_CMockIgnoreArg_nvs_stats(__LINE__)
void nvs_get_stats_CMockIgnoreArg_nvs_stats(UNITY_LINE_TYPE cmock_line);
#define nvs_get_used_entry_count_IgnoreAndReturn(cmock_retval) nvs_get_used_entry_count_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_get_used_entry_count_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define nvs_get_used_entry_count_StopIgnore() nvs_get_used_entry_count_CMockStopIgnore()
void nvs_get_used_entry_count_CMockStopIgnore(void);
#define nvs_get_used_entry_count_ExpectAndReturn(handle, used_entries, cmock_retval) nvs_get_used_entry_count_CMockExpectAndReturn(__LINE__, handle, used_entries, cmock_retval)
void nvs_get_used_entry_count_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, size_t* used_entries, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_nvs_get_used_entry_count_CALLBACK)(nvs_handle_t handle, size_t* used_entries, int cmock_num_calls);
void nvs_get_used_entry_count_AddCallback(CMOCK_nvs_get_used_entry_count_CALLBACK Callback);
void nvs_get_used_entry_count_Stub(CMOCK_nvs_get_used_entry_count_CALLBACK Callback);
#define nvs_get_used_entry_count_StubWithCallback nvs_get_used_entry_count_Stub
#define nvs_get_used_entry_count_ExpectWithArrayAndReturn(handle, used_entries, used_entries_Depth, cmock_retval) nvs_get_used_entry_count_CMockExpectWithArrayAndReturn(__LINE__, handle, used_entries, used_entries_Depth, cmock_retval)
void nvs_get_used_entry_count_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, nvs_handle_t handle, size_t* used_entries, int used_entries_Depth, esp_err_t cmock_to_return);
#define nvs_get_used_entry_count_ReturnThruPtr_used_entries(used_entries) nvs_get_used_entry_count_CMockReturnMemThruPtr_used_entries(__LINE__, used_entries, sizeof(size_t))
#define nvs_get_used_entry_count_ReturnArrayThruPtr_used_entries(used_entries, cmock_len) nvs_get_used_entry_count_CMockReturnMemThruPtr_used_entries(__LINE__, used_entries, cmock_len * sizeof(*used_entries))
#define nvs_get_used_entry_count_ReturnMemThruPtr_used_entries(used_entries, cmock_size) nvs_get_used_entry_count_CMockReturnMemThruPtr_used_entries(__LINE__, used_entries, cmock_size)
void nvs_get_used_entry_count_CMockReturnMemThruPtr_used_entries(UNITY_LINE_TYPE cmock_line, size_t* used_entries, size_t cmock_size);
#define nvs_get_used_entry_count_IgnoreArg_handle() nvs_get_used_entry_count_CMockIgnoreArg_handle(__LINE__)
void nvs_get_used_entry_count_CMockIgnoreArg_handle(UNITY_LINE_TYPE cmock_line);
#define nvs_get_used_entry_count_IgnoreArg_used_entries() nvs_get_used_entry_count_CMockIgnoreArg_used_entries(__LINE__)
void nvs_get_used_entry_count_CMockIgnoreArg_used_entries(UNITY_LINE_TYPE cmock_line);
#define nvs_entry_find_IgnoreAndReturn(cmock_retval) nvs_entry_find_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_entry_find_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, nvs_iterator_t cmock_to_return);
#define nvs_entry_find_StopIgnore() nvs_entry_find_CMockStopIgnore()
void nvs_entry_find_CMockStopIgnore(void);
#define nvs_entry_find_ExpectAndReturn(part_name, namespace_name, type, cmock_retval) nvs_entry_find_CMockExpectAndReturn(__LINE__, part_name, namespace_name, type, cmock_retval)
void nvs_entry_find_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const char* part_name, const char* namespace_name, nvs_type_t type, nvs_iterator_t cmock_to_return);
typedef nvs_iterator_t (* CMOCK_nvs_entry_find_CALLBACK)(const char* part_name, const char* namespace_name, nvs_type_t type, int cmock_num_calls);
void nvs_entry_find_AddCallback(CMOCK_nvs_entry_find_CALLBACK Callback);
void nvs_entry_find_Stub(CMOCK_nvs_entry_find_CALLBACK Callback);
#define nvs_entry_find_StubWithCallback nvs_entry_find_Stub
#define nvs_entry_find_IgnoreArg_part_name() nvs_entry_find_CMockIgnoreArg_part_name(__LINE__)
void nvs_entry_find_CMockIgnoreArg_part_name(UNITY_LINE_TYPE cmock_line);
#define nvs_entry_find_IgnoreArg_namespace_name() nvs_entry_find_CMockIgnoreArg_namespace_name(__LINE__)
void nvs_entry_find_CMockIgnoreArg_namespace_name(UNITY_LINE_TYPE cmock_line);
#define nvs_entry_find_IgnoreArg_type() nvs_entry_find_CMockIgnoreArg_type(__LINE__)
void nvs_entry_find_CMockIgnoreArg_type(UNITY_LINE_TYPE cmock_line);
#define nvs_entry_next_IgnoreAndReturn(cmock_retval) nvs_entry_next_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void nvs_entry_next_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, nvs_iterator_t cmock_to_return);
#define nvs_entry_next_StopIgnore() nvs_entry_next_CMockStopIgnore()
void nvs_entry_next_CMockStopIgnore(void);
#define nvs_entry_next_ExpectAndReturn(iterator, cmock_retval) nvs_entry_next_CMockExpectAndReturn(__LINE__, iterator, cmock_retval)
void nvs_entry_next_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, nvs_iterator_t iterator, nvs_iterator_t cmock_to_return);
typedef nvs_iterator_t (* CMOCK_nvs_entry_next_CALLBACK)(nvs_iterator_t iterator, int cmock_num_calls);
void nvs_entry_next_AddCallback(CMOCK_nvs_entry_next_CALLBACK Callback);
void nvs_entry_next_Stub(CMOCK_nvs_entry_next_CALLBACK Callback);
#define nvs_entry_next_StubWithCallback nvs_entry_next_Stub
#define nvs_entry_next_IgnoreArg_iterator() nvs_entry_next_CMockIgnoreArg_iterator(__LINE__)
void nvs_entry_next_CMockIgnoreArg_iterator(UNITY_LINE_TYPE cmock_line);
#define nvs_entry_info_Ignore() nvs_entry_info_CMockIgnore()
void nvs_entry_info_CMockIgnore(void);
#define nvs_entry_info_StopIgnore() nvs_entry_info_CMockStopIgnore()
void nvs_entry_info_CMockStopIgnore(void);
#define nvs_entry_info_Expect(iterator, out_info) nvs_entry_info_CMockExpect(__LINE__, iterator, out_info)
void nvs_entry_info_CMockExpect(UNITY_LINE_TYPE cmock_line, nvs_iterator_t iterator, nvs_entry_info_t* out_info);
typedef void (* CMOCK_nvs_entry_info_CALLBACK)(nvs_iterator_t iterator, nvs_entry_info_t* out_info, int cmock_num_calls);
void nvs_entry_info_AddCallback(CMOCK_nvs_entry_info_CALLBACK Callback);
void nvs_entry_info_Stub(CMOCK_nvs_entry_info_CALLBACK Callback);
#define nvs_entry_info_StubWithCallback nvs_entry_info_Stub
#define nvs_entry_info_ExpectWithArray(iterator, out_info, out_info_Depth) nvs_entry_info_CMockExpectWithArray(__LINE__, iterator, out_info, out_info_Depth)
void nvs_entry_info_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, nvs_iterator_t iterator, nvs_entry_info_t* out_info, int out_info_Depth);
#define nvs_entry_info_ReturnThruPtr_out_info(out_info) nvs_entry_info_CMockReturnMemThruPtr_out_info(__LINE__, out_info, sizeof(nvs_entry_info_t))
#define nvs_entry_info_ReturnArrayThruPtr_out_info(out_info, cmock_len) nvs_entry_info_CMockReturnMemThruPtr_out_info(__LINE__, out_info, cmock_len * sizeof(*out_info))
#define nvs_entry_info_ReturnMemThruPtr_out_info(out_info, cmock_size) nvs_entry_info_CMockReturnMemThruPtr_out_info(__LINE__, out_info, cmock_size)
void nvs_entry_info_CMockReturnMemThruPtr_out_info(UNITY_LINE_TYPE cmock_line, nvs_entry_info_t* out_info, size_t cmock_size);
#define nvs_entry_info_IgnoreArg_iterator() nvs_entry_info_CMockIgnoreArg_iterator(__LINE__)
void nvs_entry_info_CMockIgnoreArg_iterator(UNITY_LINE_TYPE cmock_line);
#define nvs_entry_info_IgnoreArg_out_info() nvs_entry_info_CMockIgnoreArg_out_info(__LINE__)
void nvs_entry_info_CMockIgnoreArg_out_info(UNITY_LINE_TYPE cmock_line);
#define nvs_release_iterator_Ignore() nvs_release_iterator_CMockIgnore()
void nvs_release_iterator_CMockIgnore(void);
#define nvs_release_iterator_StopIgnore() nvs_release_iterator_CMockStopIgnore()
void nvs_release_iterator_CMockStopIgnore(void);
#define nvs_release_iterator_Expect(iterator) nvs_release_iterator_CMockExpect(__LINE__, iterator)
void nvs_release_iterator_CMockExpect(UNITY_LINE_TYPE cmock_line, nvs_iterator_t iterator);
typedef void (* CMOCK_nvs_release_iterator_CALLBACK)(nvs_iterator_t iterator, int cmock_num_calls);
void nvs_release_iterator_AddCallback(CMOCK_nvs_release_iterator_CALLBACK Callback);
void nvs_release_iterator_Stub(CMOCK_nvs_release_iterator_CALLBACK Callback);
#define nvs_release_iterator_StubWithCallback nvs_release_iterator_Stub
#define nvs_release_iterator_IgnoreArg_iterator() nvs_release_iterator_CMockIgnoreArg_iterator(__LINE__)
void nvs_release_iterator_CMockIgnoreArg_iterator(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
