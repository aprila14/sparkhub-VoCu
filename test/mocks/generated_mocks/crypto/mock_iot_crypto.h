#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_IOT_CRYPTO_H
#define _MOCK_IOT_CRYPTO_H

#include "unity.h"
#include "iot_crypto.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_iot_crypto_Init(void);
void mock_iot_crypto_Destroy(void);
void mock_iot_crypto_Verify(void);




#define CRYPTO_Init_Ignore() CRYPTO_Init_CMockIgnore()
void CRYPTO_Init_CMockIgnore(void);
#define CRYPTO_Init_StopIgnore() CRYPTO_Init_CMockStopIgnore()
void CRYPTO_Init_CMockStopIgnore(void);
#define CRYPTO_Init_Expect() CRYPTO_Init_CMockExpect(__LINE__)
void CRYPTO_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_CRYPTO_Init_CALLBACK)(int cmock_num_calls);
void CRYPTO_Init_AddCallback(CMOCK_CRYPTO_Init_CALLBACK Callback);
void CRYPTO_Init_Stub(CMOCK_CRYPTO_Init_CALLBACK Callback);
#define CRYPTO_Init_StubWithCallback CRYPTO_Init_Stub
#define CRYPTO_ConfigureThreading_Ignore() CRYPTO_ConfigureThreading_CMockIgnore()
void CRYPTO_ConfigureThreading_CMockIgnore(void);
#define CRYPTO_ConfigureThreading_StopIgnore() CRYPTO_ConfigureThreading_CMockStopIgnore()
void CRYPTO_ConfigureThreading_CMockStopIgnore(void);
#define CRYPTO_ConfigureThreading_Expect() CRYPTO_ConfigureThreading_CMockExpect(__LINE__)
void CRYPTO_ConfigureThreading_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_CRYPTO_ConfigureThreading_CALLBACK)(int cmock_num_calls);
void CRYPTO_ConfigureThreading_AddCallback(CMOCK_CRYPTO_ConfigureThreading_CALLBACK Callback);
void CRYPTO_ConfigureThreading_Stub(CMOCK_CRYPTO_ConfigureThreading_CALLBACK Callback);
#define CRYPTO_ConfigureThreading_StubWithCallback CRYPTO_ConfigureThreading_Stub
#define CRYPTO_SignatureVerificationStart_IgnoreAndReturn(cmock_retval) CRYPTO_SignatureVerificationStart_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void CRYPTO_SignatureVerificationStart_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define CRYPTO_SignatureVerificationStart_StopIgnore() CRYPTO_SignatureVerificationStart_CMockStopIgnore()
void CRYPTO_SignatureVerificationStart_CMockStopIgnore(void);
#define CRYPTO_SignatureVerificationStart_ExpectAndReturn(ppvContext, xAsymmetricAlgorithm, xHashAlgorithm, cmock_retval) CRYPTO_SignatureVerificationStart_CMockExpectAndReturn(__LINE__, ppvContext, xAsymmetricAlgorithm, xHashAlgorithm, cmock_retval)
void CRYPTO_SignatureVerificationStart_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void** ppvContext, BaseType_t xAsymmetricAlgorithm, BaseType_t xHashAlgorithm, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_CRYPTO_SignatureVerificationStart_CALLBACK)(void** ppvContext, BaseType_t xAsymmetricAlgorithm, BaseType_t xHashAlgorithm, int cmock_num_calls);
void CRYPTO_SignatureVerificationStart_AddCallback(CMOCK_CRYPTO_SignatureVerificationStart_CALLBACK Callback);
void CRYPTO_SignatureVerificationStart_Stub(CMOCK_CRYPTO_SignatureVerificationStart_CALLBACK Callback);
#define CRYPTO_SignatureVerificationStart_StubWithCallback CRYPTO_SignatureVerificationStart_Stub
#define CRYPTO_SignatureVerificationStart_ExpectWithArrayAndReturn(ppvContext, ppvContext_Depth, xAsymmetricAlgorithm, xHashAlgorithm, cmock_retval) CRYPTO_SignatureVerificationStart_CMockExpectWithArrayAndReturn(__LINE__, ppvContext, ppvContext_Depth, xAsymmetricAlgorithm, xHashAlgorithm, cmock_retval)
void CRYPTO_SignatureVerificationStart_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, void** ppvContext, int ppvContext_Depth, BaseType_t xAsymmetricAlgorithm, BaseType_t xHashAlgorithm, BaseType_t cmock_to_return);
#define CRYPTO_SignatureVerificationStart_ReturnThruPtr_ppvContext(ppvContext) CRYPTO_SignatureVerificationStart_CMockReturnMemThruPtr_ppvContext(__LINE__, ppvContext, sizeof(void*))
#define CRYPTO_SignatureVerificationStart_ReturnArrayThruPtr_ppvContext(ppvContext, cmock_len) CRYPTO_SignatureVerificationStart_CMockReturnMemThruPtr_ppvContext(__LINE__, ppvContext, cmock_len * sizeof(*ppvContext))
#define CRYPTO_SignatureVerificationStart_ReturnMemThruPtr_ppvContext(ppvContext, cmock_size) CRYPTO_SignatureVerificationStart_CMockReturnMemThruPtr_ppvContext(__LINE__, ppvContext, cmock_size)
void CRYPTO_SignatureVerificationStart_CMockReturnMemThruPtr_ppvContext(UNITY_LINE_TYPE cmock_line, void** ppvContext, size_t cmock_size);
#define CRYPTO_SignatureVerificationStart_IgnoreArg_ppvContext() CRYPTO_SignatureVerificationStart_CMockIgnoreArg_ppvContext(__LINE__)
void CRYPTO_SignatureVerificationStart_CMockIgnoreArg_ppvContext(UNITY_LINE_TYPE cmock_line);
#define CRYPTO_SignatureVerificationStart_IgnoreArg_xAsymmetricAlgorithm() CRYPTO_SignatureVerificationStart_CMockIgnoreArg_xAsymmetricAlgorithm(__LINE__)
void CRYPTO_SignatureVerificationStart_CMockIgnoreArg_xAsymmetricAlgorithm(UNITY_LINE_TYPE cmock_line);
#define CRYPTO_SignatureVerificationStart_IgnoreArg_xHashAlgorithm() CRYPTO_SignatureVerificationStart_CMockIgnoreArg_xHashAlgorithm(__LINE__)
void CRYPTO_SignatureVerificationStart_CMockIgnoreArg_xHashAlgorithm(UNITY_LINE_TYPE cmock_line);
#define CRYPTO_SignatureVerificationUpdate_Ignore() CRYPTO_SignatureVerificationUpdate_CMockIgnore()
void CRYPTO_SignatureVerificationUpdate_CMockIgnore(void);
#define CRYPTO_SignatureVerificationUpdate_StopIgnore() CRYPTO_SignatureVerificationUpdate_CMockStopIgnore()
void CRYPTO_SignatureVerificationUpdate_CMockStopIgnore(void);
#define CRYPTO_SignatureVerificationUpdate_Expect(pvContext, pucData, xDataLength) CRYPTO_SignatureVerificationUpdate_CMockExpect(__LINE__, pvContext, pucData, xDataLength)
void CRYPTO_SignatureVerificationUpdate_CMockExpect(UNITY_LINE_TYPE cmock_line, void* pvContext, const uint8_t* pucData, size_t xDataLength);
typedef void (* CMOCK_CRYPTO_SignatureVerificationUpdate_CALLBACK)(void* pvContext, const uint8_t* pucData, size_t xDataLength, int cmock_num_calls);
void CRYPTO_SignatureVerificationUpdate_AddCallback(CMOCK_CRYPTO_SignatureVerificationUpdate_CALLBACK Callback);
void CRYPTO_SignatureVerificationUpdate_Stub(CMOCK_CRYPTO_SignatureVerificationUpdate_CALLBACK Callback);
#define CRYPTO_SignatureVerificationUpdate_StubWithCallback CRYPTO_SignatureVerificationUpdate_Stub
#define CRYPTO_SignatureVerificationUpdate_ExpectWithArray(pvContext, pvContext_Depth, pucData, pucData_Depth, xDataLength) CRYPTO_SignatureVerificationUpdate_CMockExpectWithArray(__LINE__, pvContext, pvContext_Depth, pucData, pucData_Depth, xDataLength)
void CRYPTO_SignatureVerificationUpdate_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* pvContext, int pvContext_Depth, const uint8_t* pucData, int pucData_Depth, size_t xDataLength);
#define CRYPTO_SignatureVerificationUpdate_ReturnThruPtr_pvContext(pvContext) CRYPTO_SignatureVerificationUpdate_CMockReturnMemThruPtr_pvContext(__LINE__, pvContext, sizeof(void))
#define CRYPTO_SignatureVerificationUpdate_ReturnArrayThruPtr_pvContext(pvContext, cmock_len) CRYPTO_SignatureVerificationUpdate_CMockReturnMemThruPtr_pvContext(__LINE__, pvContext, cmock_len * sizeof(*pvContext))
#define CRYPTO_SignatureVerificationUpdate_ReturnMemThruPtr_pvContext(pvContext, cmock_size) CRYPTO_SignatureVerificationUpdate_CMockReturnMemThruPtr_pvContext(__LINE__, pvContext, cmock_size)
void CRYPTO_SignatureVerificationUpdate_CMockReturnMemThruPtr_pvContext(UNITY_LINE_TYPE cmock_line, void* pvContext, size_t cmock_size);
#define CRYPTO_SignatureVerificationUpdate_IgnoreArg_pvContext() CRYPTO_SignatureVerificationUpdate_CMockIgnoreArg_pvContext(__LINE__)
void CRYPTO_SignatureVerificationUpdate_CMockIgnoreArg_pvContext(UNITY_LINE_TYPE cmock_line);
#define CRYPTO_SignatureVerificationUpdate_IgnoreArg_pucData() CRYPTO_SignatureVerificationUpdate_CMockIgnoreArg_pucData(__LINE__)
void CRYPTO_SignatureVerificationUpdate_CMockIgnoreArg_pucData(UNITY_LINE_TYPE cmock_line);
#define CRYPTO_SignatureVerificationUpdate_IgnoreArg_xDataLength() CRYPTO_SignatureVerificationUpdate_CMockIgnoreArg_xDataLength(__LINE__)
void CRYPTO_SignatureVerificationUpdate_CMockIgnoreArg_xDataLength(UNITY_LINE_TYPE cmock_line);
#define CRYPTO_SignatureVerificationFinal_IgnoreAndReturn(cmock_retval) CRYPTO_SignatureVerificationFinal_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void CRYPTO_SignatureVerificationFinal_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, BaseType_t cmock_to_return);
#define CRYPTO_SignatureVerificationFinal_StopIgnore() CRYPTO_SignatureVerificationFinal_CMockStopIgnore()
void CRYPTO_SignatureVerificationFinal_CMockStopIgnore(void);
#define CRYPTO_SignatureVerificationFinal_ExpectAndReturn(pvContext, pcSignerCertificate, xSignerCertificateLength, pucSignature, xSignatureLength, cmock_retval) CRYPTO_SignatureVerificationFinal_CMockExpectAndReturn(__LINE__, pvContext, pcSignerCertificate, xSignerCertificateLength, pucSignature, xSignatureLength, cmock_retval)
void CRYPTO_SignatureVerificationFinal_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, void* pvContext, char* pcSignerCertificate, size_t xSignerCertificateLength, uint8_t* pucSignature, size_t xSignatureLength, BaseType_t cmock_to_return);
typedef BaseType_t (* CMOCK_CRYPTO_SignatureVerificationFinal_CALLBACK)(void* pvContext, char* pcSignerCertificate, size_t xSignerCertificateLength, uint8_t* pucSignature, size_t xSignatureLength, int cmock_num_calls);
void CRYPTO_SignatureVerificationFinal_AddCallback(CMOCK_CRYPTO_SignatureVerificationFinal_CALLBACK Callback);
void CRYPTO_SignatureVerificationFinal_Stub(CMOCK_CRYPTO_SignatureVerificationFinal_CALLBACK Callback);
#define CRYPTO_SignatureVerificationFinal_StubWithCallback CRYPTO_SignatureVerificationFinal_Stub
#define CRYPTO_SignatureVerificationFinal_ExpectWithArrayAndReturn(pvContext, pvContext_Depth, pcSignerCertificate, xSignerCertificateLength, pucSignature, pucSignature_Depth, xSignatureLength, cmock_retval) CRYPTO_SignatureVerificationFinal_CMockExpectWithArrayAndReturn(__LINE__, pvContext, pvContext_Depth, pcSignerCertificate, xSignerCertificateLength, pucSignature, pucSignature_Depth, xSignatureLength, cmock_retval)
void CRYPTO_SignatureVerificationFinal_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, void* pvContext, int pvContext_Depth, char* pcSignerCertificate, size_t xSignerCertificateLength, uint8_t* pucSignature, int pucSignature_Depth, size_t xSignatureLength, BaseType_t cmock_to_return);
#define CRYPTO_SignatureVerificationFinal_ReturnThruPtr_pvContext(pvContext) CRYPTO_SignatureVerificationFinal_CMockReturnMemThruPtr_pvContext(__LINE__, pvContext, sizeof(void))
#define CRYPTO_SignatureVerificationFinal_ReturnArrayThruPtr_pvContext(pvContext, cmock_len) CRYPTO_SignatureVerificationFinal_CMockReturnMemThruPtr_pvContext(__LINE__, pvContext, cmock_len * sizeof(*pvContext))
#define CRYPTO_SignatureVerificationFinal_ReturnMemThruPtr_pvContext(pvContext, cmock_size) CRYPTO_SignatureVerificationFinal_CMockReturnMemThruPtr_pvContext(__LINE__, pvContext, cmock_size)
void CRYPTO_SignatureVerificationFinal_CMockReturnMemThruPtr_pvContext(UNITY_LINE_TYPE cmock_line, void* pvContext, size_t cmock_size);
#define CRYPTO_SignatureVerificationFinal_ReturnThruPtr_pcSignerCertificate(pcSignerCertificate) CRYPTO_SignatureVerificationFinal_CMockReturnMemThruPtr_pcSignerCertificate(__LINE__, pcSignerCertificate, sizeof(char))
#define CRYPTO_SignatureVerificationFinal_ReturnArrayThruPtr_pcSignerCertificate(pcSignerCertificate, cmock_len) CRYPTO_SignatureVerificationFinal_CMockReturnMemThruPtr_pcSignerCertificate(__LINE__, pcSignerCertificate, cmock_len * sizeof(*pcSignerCertificate))
#define CRYPTO_SignatureVerificationFinal_ReturnMemThruPtr_pcSignerCertificate(pcSignerCertificate, cmock_size) CRYPTO_SignatureVerificationFinal_CMockReturnMemThruPtr_pcSignerCertificate(__LINE__, pcSignerCertificate, cmock_size)
void CRYPTO_SignatureVerificationFinal_CMockReturnMemThruPtr_pcSignerCertificate(UNITY_LINE_TYPE cmock_line, char* pcSignerCertificate, size_t cmock_size);
#define CRYPTO_SignatureVerificationFinal_ReturnThruPtr_pucSignature(pucSignature) CRYPTO_SignatureVerificationFinal_CMockReturnMemThruPtr_pucSignature(__LINE__, pucSignature, sizeof(uint8_t))
#define CRYPTO_SignatureVerificationFinal_ReturnArrayThruPtr_pucSignature(pucSignature, cmock_len) CRYPTO_SignatureVerificationFinal_CMockReturnMemThruPtr_pucSignature(__LINE__, pucSignature, cmock_len * sizeof(*pucSignature))
#define CRYPTO_SignatureVerificationFinal_ReturnMemThruPtr_pucSignature(pucSignature, cmock_size) CRYPTO_SignatureVerificationFinal_CMockReturnMemThruPtr_pucSignature(__LINE__, pucSignature, cmock_size)
void CRYPTO_SignatureVerificationFinal_CMockReturnMemThruPtr_pucSignature(UNITY_LINE_TYPE cmock_line, uint8_t* pucSignature, size_t cmock_size);
#define CRYPTO_SignatureVerificationFinal_IgnoreArg_pvContext() CRYPTO_SignatureVerificationFinal_CMockIgnoreArg_pvContext(__LINE__)
void CRYPTO_SignatureVerificationFinal_CMockIgnoreArg_pvContext(UNITY_LINE_TYPE cmock_line);
#define CRYPTO_SignatureVerificationFinal_IgnoreArg_pcSignerCertificate() CRYPTO_SignatureVerificationFinal_CMockIgnoreArg_pcSignerCertificate(__LINE__)
void CRYPTO_SignatureVerificationFinal_CMockIgnoreArg_pcSignerCertificate(UNITY_LINE_TYPE cmock_line);
#define CRYPTO_SignatureVerificationFinal_IgnoreArg_xSignerCertificateLength() CRYPTO_SignatureVerificationFinal_CMockIgnoreArg_xSignerCertificateLength(__LINE__)
void CRYPTO_SignatureVerificationFinal_CMockIgnoreArg_xSignerCertificateLength(UNITY_LINE_TYPE cmock_line);
#define CRYPTO_SignatureVerificationFinal_IgnoreArg_pucSignature() CRYPTO_SignatureVerificationFinal_CMockIgnoreArg_pucSignature(__LINE__)
void CRYPTO_SignatureVerificationFinal_CMockIgnoreArg_pucSignature(UNITY_LINE_TYPE cmock_line);
#define CRYPTO_SignatureVerificationFinal_IgnoreArg_xSignatureLength() CRYPTO_SignatureVerificationFinal_CMockIgnoreArg_xSignatureLength(__LINE__)
void CRYPTO_SignatureVerificationFinal_CMockIgnoreArg_xSignatureLength(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
