#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_OTA_OS_FREERTOS_H
#define _MOCK_OTA_OS_FREERTOS_H

#include "unity.h"
#include "ota_os_freertos.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_ota_os_freertos_Init(void);
void mock_ota_os_freertos_Destroy(void);
void mock_ota_os_freertos_Verify(void);




#define OtaInitEvent_FreeRTOS_IgnoreAndReturn(cmock_retval) OtaInitEvent_FreeRTOS_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OtaInitEvent_FreeRTOS_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaOsStatus_t cmock_to_return);
#define OtaInitEvent_FreeRTOS_StopIgnore() OtaInitEvent_FreeRTOS_CMockStopIgnore()
void OtaInitEvent_FreeRTOS_CMockStopIgnore(void);
#define OtaInitEvent_FreeRTOS_ExpectAndReturn(pEventCtx, cmock_retval) OtaInitEvent_FreeRTOS_CMockExpectAndReturn(__LINE__, pEventCtx, cmock_retval)
void OtaInitEvent_FreeRTOS_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaEventContext_t* pEventCtx, OtaOsStatus_t cmock_to_return);
typedef OtaOsStatus_t (* CMOCK_OtaInitEvent_FreeRTOS_CALLBACK)(OtaEventContext_t* pEventCtx, int cmock_num_calls);
void OtaInitEvent_FreeRTOS_AddCallback(CMOCK_OtaInitEvent_FreeRTOS_CALLBACK Callback);
void OtaInitEvent_FreeRTOS_Stub(CMOCK_OtaInitEvent_FreeRTOS_CALLBACK Callback);
#define OtaInitEvent_FreeRTOS_StubWithCallback OtaInitEvent_FreeRTOS_Stub
#define OtaInitEvent_FreeRTOS_ExpectWithArrayAndReturn(pEventCtx, pEventCtx_Depth, cmock_retval) OtaInitEvent_FreeRTOS_CMockExpectWithArrayAndReturn(__LINE__, pEventCtx, pEventCtx_Depth, cmock_retval)
void OtaInitEvent_FreeRTOS_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, OtaEventContext_t* pEventCtx, int pEventCtx_Depth, OtaOsStatus_t cmock_to_return);
#define OtaInitEvent_FreeRTOS_ReturnThruPtr_pEventCtx(pEventCtx) OtaInitEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(__LINE__, pEventCtx, sizeof(OtaEventContext_t))
#define OtaInitEvent_FreeRTOS_ReturnArrayThruPtr_pEventCtx(pEventCtx, cmock_len) OtaInitEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(__LINE__, pEventCtx, cmock_len * sizeof(*pEventCtx))
#define OtaInitEvent_FreeRTOS_ReturnMemThruPtr_pEventCtx(pEventCtx, cmock_size) OtaInitEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(__LINE__, pEventCtx, cmock_size)
void OtaInitEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(UNITY_LINE_TYPE cmock_line, OtaEventContext_t* pEventCtx, size_t cmock_size);
#define OtaInitEvent_FreeRTOS_IgnoreArg_pEventCtx() OtaInitEvent_FreeRTOS_CMockIgnoreArg_pEventCtx(__LINE__)
void OtaInitEvent_FreeRTOS_CMockIgnoreArg_pEventCtx(UNITY_LINE_TYPE cmock_line);
#define OtaSendEvent_FreeRTOS_IgnoreAndReturn(cmock_retval) OtaSendEvent_FreeRTOS_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OtaSendEvent_FreeRTOS_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaOsStatus_t cmock_to_return);
#define OtaSendEvent_FreeRTOS_StopIgnore() OtaSendEvent_FreeRTOS_CMockStopIgnore()
void OtaSendEvent_FreeRTOS_CMockStopIgnore(void);
#define OtaSendEvent_FreeRTOS_ExpectAndReturn(pEventCtx, pEventMsg, timeout, cmock_retval) OtaSendEvent_FreeRTOS_CMockExpectAndReturn(__LINE__, pEventCtx, pEventMsg, timeout, cmock_retval)
void OtaSendEvent_FreeRTOS_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaEventContext_t* pEventCtx, const void* pEventMsg, unsigned int timeout, OtaOsStatus_t cmock_to_return);
typedef OtaOsStatus_t (* CMOCK_OtaSendEvent_FreeRTOS_CALLBACK)(OtaEventContext_t* pEventCtx, const void* pEventMsg, unsigned int timeout, int cmock_num_calls);
void OtaSendEvent_FreeRTOS_AddCallback(CMOCK_OtaSendEvent_FreeRTOS_CALLBACK Callback);
void OtaSendEvent_FreeRTOS_Stub(CMOCK_OtaSendEvent_FreeRTOS_CALLBACK Callback);
#define OtaSendEvent_FreeRTOS_StubWithCallback OtaSendEvent_FreeRTOS_Stub
#define OtaSendEvent_FreeRTOS_ExpectWithArrayAndReturn(pEventCtx, pEventCtx_Depth, pEventMsg, pEventMsg_Depth, timeout, cmock_retval) OtaSendEvent_FreeRTOS_CMockExpectWithArrayAndReturn(__LINE__, pEventCtx, pEventCtx_Depth, pEventMsg, pEventMsg_Depth, timeout, cmock_retval)
void OtaSendEvent_FreeRTOS_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, OtaEventContext_t* pEventCtx, int pEventCtx_Depth, const void* pEventMsg, int pEventMsg_Depth, unsigned int timeout, OtaOsStatus_t cmock_to_return);
#define OtaSendEvent_FreeRTOS_ReturnThruPtr_pEventCtx(pEventCtx) OtaSendEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(__LINE__, pEventCtx, sizeof(OtaEventContext_t))
#define OtaSendEvent_FreeRTOS_ReturnArrayThruPtr_pEventCtx(pEventCtx, cmock_len) OtaSendEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(__LINE__, pEventCtx, cmock_len * sizeof(*pEventCtx))
#define OtaSendEvent_FreeRTOS_ReturnMemThruPtr_pEventCtx(pEventCtx, cmock_size) OtaSendEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(__LINE__, pEventCtx, cmock_size)
void OtaSendEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(UNITY_LINE_TYPE cmock_line, OtaEventContext_t* pEventCtx, size_t cmock_size);
#define OtaSendEvent_FreeRTOS_IgnoreArg_pEventCtx() OtaSendEvent_FreeRTOS_CMockIgnoreArg_pEventCtx(__LINE__)
void OtaSendEvent_FreeRTOS_CMockIgnoreArg_pEventCtx(UNITY_LINE_TYPE cmock_line);
#define OtaSendEvent_FreeRTOS_IgnoreArg_pEventMsg() OtaSendEvent_FreeRTOS_CMockIgnoreArg_pEventMsg(__LINE__)
void OtaSendEvent_FreeRTOS_CMockIgnoreArg_pEventMsg(UNITY_LINE_TYPE cmock_line);
#define OtaSendEvent_FreeRTOS_IgnoreArg_timeout() OtaSendEvent_FreeRTOS_CMockIgnoreArg_timeout(__LINE__)
void OtaSendEvent_FreeRTOS_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define OtaReceiveEvent_FreeRTOS_IgnoreAndReturn(cmock_retval) OtaReceiveEvent_FreeRTOS_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OtaReceiveEvent_FreeRTOS_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaOsStatus_t cmock_to_return);
#define OtaReceiveEvent_FreeRTOS_StopIgnore() OtaReceiveEvent_FreeRTOS_CMockStopIgnore()
void OtaReceiveEvent_FreeRTOS_CMockStopIgnore(void);
#define OtaReceiveEvent_FreeRTOS_ExpectAndReturn(pEventCtx, pEventMsg, timeout, cmock_retval) OtaReceiveEvent_FreeRTOS_CMockExpectAndReturn(__LINE__, pEventCtx, pEventMsg, timeout, cmock_retval)
void OtaReceiveEvent_FreeRTOS_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaEventContext_t* pEventCtx, void* pEventMsg, uint32_t timeout, OtaOsStatus_t cmock_to_return);
typedef OtaOsStatus_t (* CMOCK_OtaReceiveEvent_FreeRTOS_CALLBACK)(OtaEventContext_t* pEventCtx, void* pEventMsg, uint32_t timeout, int cmock_num_calls);
void OtaReceiveEvent_FreeRTOS_AddCallback(CMOCK_OtaReceiveEvent_FreeRTOS_CALLBACK Callback);
void OtaReceiveEvent_FreeRTOS_Stub(CMOCK_OtaReceiveEvent_FreeRTOS_CALLBACK Callback);
#define OtaReceiveEvent_FreeRTOS_StubWithCallback OtaReceiveEvent_FreeRTOS_Stub
#define OtaReceiveEvent_FreeRTOS_ExpectWithArrayAndReturn(pEventCtx, pEventCtx_Depth, pEventMsg, pEventMsg_Depth, timeout, cmock_retval) OtaReceiveEvent_FreeRTOS_CMockExpectWithArrayAndReturn(__LINE__, pEventCtx, pEventCtx_Depth, pEventMsg, pEventMsg_Depth, timeout, cmock_retval)
void OtaReceiveEvent_FreeRTOS_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, OtaEventContext_t* pEventCtx, int pEventCtx_Depth, void* pEventMsg, int pEventMsg_Depth, uint32_t timeout, OtaOsStatus_t cmock_to_return);
#define OtaReceiveEvent_FreeRTOS_ReturnThruPtr_pEventCtx(pEventCtx) OtaReceiveEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(__LINE__, pEventCtx, sizeof(OtaEventContext_t))
#define OtaReceiveEvent_FreeRTOS_ReturnArrayThruPtr_pEventCtx(pEventCtx, cmock_len) OtaReceiveEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(__LINE__, pEventCtx, cmock_len * sizeof(*pEventCtx))
#define OtaReceiveEvent_FreeRTOS_ReturnMemThruPtr_pEventCtx(pEventCtx, cmock_size) OtaReceiveEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(__LINE__, pEventCtx, cmock_size)
void OtaReceiveEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(UNITY_LINE_TYPE cmock_line, OtaEventContext_t* pEventCtx, size_t cmock_size);
#define OtaReceiveEvent_FreeRTOS_ReturnThruPtr_pEventMsg(pEventMsg) OtaReceiveEvent_FreeRTOS_CMockReturnMemThruPtr_pEventMsg(__LINE__, pEventMsg, sizeof(void))
#define OtaReceiveEvent_FreeRTOS_ReturnArrayThruPtr_pEventMsg(pEventMsg, cmock_len) OtaReceiveEvent_FreeRTOS_CMockReturnMemThruPtr_pEventMsg(__LINE__, pEventMsg, cmock_len * sizeof(*pEventMsg))
#define OtaReceiveEvent_FreeRTOS_ReturnMemThruPtr_pEventMsg(pEventMsg, cmock_size) OtaReceiveEvent_FreeRTOS_CMockReturnMemThruPtr_pEventMsg(__LINE__, pEventMsg, cmock_size)
void OtaReceiveEvent_FreeRTOS_CMockReturnMemThruPtr_pEventMsg(UNITY_LINE_TYPE cmock_line, void* pEventMsg, size_t cmock_size);
#define OtaReceiveEvent_FreeRTOS_IgnoreArg_pEventCtx() OtaReceiveEvent_FreeRTOS_CMockIgnoreArg_pEventCtx(__LINE__)
void OtaReceiveEvent_FreeRTOS_CMockIgnoreArg_pEventCtx(UNITY_LINE_TYPE cmock_line);
#define OtaReceiveEvent_FreeRTOS_IgnoreArg_pEventMsg() OtaReceiveEvent_FreeRTOS_CMockIgnoreArg_pEventMsg(__LINE__)
void OtaReceiveEvent_FreeRTOS_CMockIgnoreArg_pEventMsg(UNITY_LINE_TYPE cmock_line);
#define OtaReceiveEvent_FreeRTOS_IgnoreArg_timeout() OtaReceiveEvent_FreeRTOS_CMockIgnoreArg_timeout(__LINE__)
void OtaReceiveEvent_FreeRTOS_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define OtaDeinitEvent_FreeRTOS_IgnoreAndReturn(cmock_retval) OtaDeinitEvent_FreeRTOS_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OtaDeinitEvent_FreeRTOS_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaOsStatus_t cmock_to_return);
#define OtaDeinitEvent_FreeRTOS_StopIgnore() OtaDeinitEvent_FreeRTOS_CMockStopIgnore()
void OtaDeinitEvent_FreeRTOS_CMockStopIgnore(void);
#define OtaDeinitEvent_FreeRTOS_ExpectAndReturn(pEventCtx, cmock_retval) OtaDeinitEvent_FreeRTOS_CMockExpectAndReturn(__LINE__, pEventCtx, cmock_retval)
void OtaDeinitEvent_FreeRTOS_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaEventContext_t* pEventCtx, OtaOsStatus_t cmock_to_return);
typedef OtaOsStatus_t (* CMOCK_OtaDeinitEvent_FreeRTOS_CALLBACK)(OtaEventContext_t* pEventCtx, int cmock_num_calls);
void OtaDeinitEvent_FreeRTOS_AddCallback(CMOCK_OtaDeinitEvent_FreeRTOS_CALLBACK Callback);
void OtaDeinitEvent_FreeRTOS_Stub(CMOCK_OtaDeinitEvent_FreeRTOS_CALLBACK Callback);
#define OtaDeinitEvent_FreeRTOS_StubWithCallback OtaDeinitEvent_FreeRTOS_Stub
#define OtaDeinitEvent_FreeRTOS_ExpectWithArrayAndReturn(pEventCtx, pEventCtx_Depth, cmock_retval) OtaDeinitEvent_FreeRTOS_CMockExpectWithArrayAndReturn(__LINE__, pEventCtx, pEventCtx_Depth, cmock_retval)
void OtaDeinitEvent_FreeRTOS_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, OtaEventContext_t* pEventCtx, int pEventCtx_Depth, OtaOsStatus_t cmock_to_return);
#define OtaDeinitEvent_FreeRTOS_ReturnThruPtr_pEventCtx(pEventCtx) OtaDeinitEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(__LINE__, pEventCtx, sizeof(OtaEventContext_t))
#define OtaDeinitEvent_FreeRTOS_ReturnArrayThruPtr_pEventCtx(pEventCtx, cmock_len) OtaDeinitEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(__LINE__, pEventCtx, cmock_len * sizeof(*pEventCtx))
#define OtaDeinitEvent_FreeRTOS_ReturnMemThruPtr_pEventCtx(pEventCtx, cmock_size) OtaDeinitEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(__LINE__, pEventCtx, cmock_size)
void OtaDeinitEvent_FreeRTOS_CMockReturnMemThruPtr_pEventCtx(UNITY_LINE_TYPE cmock_line, OtaEventContext_t* pEventCtx, size_t cmock_size);
#define OtaDeinitEvent_FreeRTOS_IgnoreArg_pEventCtx() OtaDeinitEvent_FreeRTOS_CMockIgnoreArg_pEventCtx(__LINE__)
void OtaDeinitEvent_FreeRTOS_CMockIgnoreArg_pEventCtx(UNITY_LINE_TYPE cmock_line);
#define OtaStartTimer_FreeRTOS_IgnoreAndReturn(cmock_retval) OtaStartTimer_FreeRTOS_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OtaStartTimer_FreeRTOS_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaOsStatus_t cmock_to_return);
#define OtaStartTimer_FreeRTOS_StopIgnore() OtaStartTimer_FreeRTOS_CMockStopIgnore()
void OtaStartTimer_FreeRTOS_CMockStopIgnore(void);
#define OtaStartTimer_FreeRTOS_ExpectAndReturn(otaTimerId, pTimerName, timeout, callback, cmock_retval) OtaStartTimer_FreeRTOS_CMockExpectAndReturn(__LINE__, otaTimerId, pTimerName, timeout, callback, cmock_retval)
void OtaStartTimer_FreeRTOS_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaTimerId_t otaTimerId, const char* const pTimerName, const uint32_t timeout, OtaTimerCallback_t callback, OtaOsStatus_t cmock_to_return);
typedef OtaOsStatus_t (* CMOCK_OtaStartTimer_FreeRTOS_CALLBACK)(OtaTimerId_t otaTimerId, const char* const pTimerName, const uint32_t timeout, OtaTimerCallback_t callback, int cmock_num_calls);
void OtaStartTimer_FreeRTOS_AddCallback(CMOCK_OtaStartTimer_FreeRTOS_CALLBACK Callback);
void OtaStartTimer_FreeRTOS_Stub(CMOCK_OtaStartTimer_FreeRTOS_CALLBACK Callback);
#define OtaStartTimer_FreeRTOS_StubWithCallback OtaStartTimer_FreeRTOS_Stub
#define OtaStartTimer_FreeRTOS_IgnoreArg_otaTimerId() OtaStartTimer_FreeRTOS_CMockIgnoreArg_otaTimerId(__LINE__)
void OtaStartTimer_FreeRTOS_CMockIgnoreArg_otaTimerId(UNITY_LINE_TYPE cmock_line);
#define OtaStartTimer_FreeRTOS_IgnoreArg_pTimerName() OtaStartTimer_FreeRTOS_CMockIgnoreArg_pTimerName(__LINE__)
void OtaStartTimer_FreeRTOS_CMockIgnoreArg_pTimerName(UNITY_LINE_TYPE cmock_line);
#define OtaStartTimer_FreeRTOS_IgnoreArg_timeout() OtaStartTimer_FreeRTOS_CMockIgnoreArg_timeout(__LINE__)
void OtaStartTimer_FreeRTOS_CMockIgnoreArg_timeout(UNITY_LINE_TYPE cmock_line);
#define OtaStartTimer_FreeRTOS_IgnoreArg_callback() OtaStartTimer_FreeRTOS_CMockIgnoreArg_callback(__LINE__)
void OtaStartTimer_FreeRTOS_CMockIgnoreArg_callback(UNITY_LINE_TYPE cmock_line);
#define OtaStopTimer_FreeRTOS_IgnoreAndReturn(cmock_retval) OtaStopTimer_FreeRTOS_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OtaStopTimer_FreeRTOS_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaOsStatus_t cmock_to_return);
#define OtaStopTimer_FreeRTOS_StopIgnore() OtaStopTimer_FreeRTOS_CMockStopIgnore()
void OtaStopTimer_FreeRTOS_CMockStopIgnore(void);
#define OtaStopTimer_FreeRTOS_ExpectAndReturn(otaTimerId, cmock_retval) OtaStopTimer_FreeRTOS_CMockExpectAndReturn(__LINE__, otaTimerId, cmock_retval)
void OtaStopTimer_FreeRTOS_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaTimerId_t otaTimerId, OtaOsStatus_t cmock_to_return);
typedef OtaOsStatus_t (* CMOCK_OtaStopTimer_FreeRTOS_CALLBACK)(OtaTimerId_t otaTimerId, int cmock_num_calls);
void OtaStopTimer_FreeRTOS_AddCallback(CMOCK_OtaStopTimer_FreeRTOS_CALLBACK Callback);
void OtaStopTimer_FreeRTOS_Stub(CMOCK_OtaStopTimer_FreeRTOS_CALLBACK Callback);
#define OtaStopTimer_FreeRTOS_StubWithCallback OtaStopTimer_FreeRTOS_Stub
#define OtaStopTimer_FreeRTOS_IgnoreArg_otaTimerId() OtaStopTimer_FreeRTOS_CMockIgnoreArg_otaTimerId(__LINE__)
void OtaStopTimer_FreeRTOS_CMockIgnoreArg_otaTimerId(UNITY_LINE_TYPE cmock_line);
#define OtaDeleteTimer_FreeRTOS_IgnoreAndReturn(cmock_retval) OtaDeleteTimer_FreeRTOS_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OtaDeleteTimer_FreeRTOS_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaOsStatus_t cmock_to_return);
#define OtaDeleteTimer_FreeRTOS_StopIgnore() OtaDeleteTimer_FreeRTOS_CMockStopIgnore()
void OtaDeleteTimer_FreeRTOS_CMockStopIgnore(void);
#define OtaDeleteTimer_FreeRTOS_ExpectAndReturn(otaTimerId, cmock_retval) OtaDeleteTimer_FreeRTOS_CMockExpectAndReturn(__LINE__, otaTimerId, cmock_retval)
void OtaDeleteTimer_FreeRTOS_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaTimerId_t otaTimerId, OtaOsStatus_t cmock_to_return);
typedef OtaOsStatus_t (* CMOCK_OtaDeleteTimer_FreeRTOS_CALLBACK)(OtaTimerId_t otaTimerId, int cmock_num_calls);
void OtaDeleteTimer_FreeRTOS_AddCallback(CMOCK_OtaDeleteTimer_FreeRTOS_CALLBACK Callback);
void OtaDeleteTimer_FreeRTOS_Stub(CMOCK_OtaDeleteTimer_FreeRTOS_CALLBACK Callback);
#define OtaDeleteTimer_FreeRTOS_StubWithCallback OtaDeleteTimer_FreeRTOS_Stub
#define OtaDeleteTimer_FreeRTOS_IgnoreArg_otaTimerId() OtaDeleteTimer_FreeRTOS_CMockIgnoreArg_otaTimerId(__LINE__)
void OtaDeleteTimer_FreeRTOS_CMockIgnoreArg_otaTimerId(UNITY_LINE_TYPE cmock_line);
#define Malloc_FreeRTOS_IgnoreAndReturn(cmock_retval) Malloc_FreeRTOS_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Malloc_FreeRTOS_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define Malloc_FreeRTOS_StopIgnore() Malloc_FreeRTOS_CMockStopIgnore()
void Malloc_FreeRTOS_CMockStopIgnore(void);
#define Malloc_FreeRTOS_ExpectAndReturn(size, cmock_retval) Malloc_FreeRTOS_CMockExpectAndReturn(__LINE__, size, cmock_retval)
void Malloc_FreeRTOS_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, size_t size, void* cmock_to_return);
typedef void* (* CMOCK_Malloc_FreeRTOS_CALLBACK)(size_t size, int cmock_num_calls);
void Malloc_FreeRTOS_AddCallback(CMOCK_Malloc_FreeRTOS_CALLBACK Callback);
void Malloc_FreeRTOS_Stub(CMOCK_Malloc_FreeRTOS_CALLBACK Callback);
#define Malloc_FreeRTOS_StubWithCallback Malloc_FreeRTOS_Stub
#define Malloc_FreeRTOS_IgnoreArg_size() Malloc_FreeRTOS_CMockIgnoreArg_size(__LINE__)
void Malloc_FreeRTOS_CMockIgnoreArg_size(UNITY_LINE_TYPE cmock_line);
#define Free_FreeRTOS_Ignore() Free_FreeRTOS_CMockIgnore()
void Free_FreeRTOS_CMockIgnore(void);
#define Free_FreeRTOS_StopIgnore() Free_FreeRTOS_CMockStopIgnore()
void Free_FreeRTOS_CMockStopIgnore(void);
#define Free_FreeRTOS_Expect(ptr) Free_FreeRTOS_CMockExpect(__LINE__, ptr)
void Free_FreeRTOS_CMockExpect(UNITY_LINE_TYPE cmock_line, void* ptr);
typedef void (* CMOCK_Free_FreeRTOS_CALLBACK)(void* ptr, int cmock_num_calls);
void Free_FreeRTOS_AddCallback(CMOCK_Free_FreeRTOS_CALLBACK Callback);
void Free_FreeRTOS_Stub(CMOCK_Free_FreeRTOS_CALLBACK Callback);
#define Free_FreeRTOS_StubWithCallback Free_FreeRTOS_Stub
#define Free_FreeRTOS_ExpectWithArray(ptr, ptr_Depth) Free_FreeRTOS_CMockExpectWithArray(__LINE__, ptr, ptr_Depth)
void Free_FreeRTOS_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* ptr, int ptr_Depth);
#define Free_FreeRTOS_ReturnThruPtr_ptr(ptr) Free_FreeRTOS_CMockReturnMemThruPtr_ptr(__LINE__, ptr, sizeof(void))
#define Free_FreeRTOS_ReturnArrayThruPtr_ptr(ptr, cmock_len) Free_FreeRTOS_CMockReturnMemThruPtr_ptr(__LINE__, ptr, cmock_len * sizeof(*ptr))
#define Free_FreeRTOS_ReturnMemThruPtr_ptr(ptr, cmock_size) Free_FreeRTOS_CMockReturnMemThruPtr_ptr(__LINE__, ptr, cmock_size)
void Free_FreeRTOS_CMockReturnMemThruPtr_ptr(UNITY_LINE_TYPE cmock_line, void* ptr, size_t cmock_size);
#define Free_FreeRTOS_IgnoreArg_ptr() Free_FreeRTOS_CMockIgnoreArg_ptr(__LINE__)
void Free_FreeRTOS_CMockIgnoreArg_ptr(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
