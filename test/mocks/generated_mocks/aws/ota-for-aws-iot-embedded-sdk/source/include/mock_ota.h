#ifdef __cplusplus
extern "C" {
#endif

/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_OTA_H
#define _MOCK_OTA_H

#include "unity.h"
#include "ota.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_ota_Init(void);
void mock_ota_Destroy(void);
void mock_ota_Verify(void);




#define OTA_Init_IgnoreAndReturn(cmock_retval) OTA_Init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_Init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaErr_t cmock_to_return);
#define OTA_Init_StopIgnore() OTA_Init_CMockStopIgnore()
void OTA_Init_CMockStopIgnore(void);
#define OTA_Init_ExpectAndReturn(pOtaBuffer, pOtaInterfaces, pThingName, OtaAppCallback, cmock_retval) OTA_Init_CMockExpectAndReturn(__LINE__, pOtaBuffer, pOtaInterfaces, pThingName, OtaAppCallback, cmock_retval)
void OTA_Init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaAppBuffer_t* pOtaBuffer, OtaInterfaces_t* pOtaInterfaces, const uint8_t* pThingName, OtaAppCallback_t OtaAppCallback, OtaErr_t cmock_to_return);
typedef OtaErr_t (* CMOCK_OTA_Init_CALLBACK)(OtaAppBuffer_t* pOtaBuffer, OtaInterfaces_t* pOtaInterfaces, const uint8_t* pThingName, OtaAppCallback_t OtaAppCallback, int cmock_num_calls);
void OTA_Init_AddCallback(CMOCK_OTA_Init_CALLBACK Callback);
void OTA_Init_Stub(CMOCK_OTA_Init_CALLBACK Callback);
#define OTA_Init_StubWithCallback OTA_Init_Stub
#define OTA_Init_ExpectWithArrayAndReturn(pOtaBuffer, pOtaBuffer_Depth, pOtaInterfaces, pOtaInterfaces_Depth, pThingName, pThingName_Depth, OtaAppCallback, cmock_retval) OTA_Init_CMockExpectWithArrayAndReturn(__LINE__, pOtaBuffer, pOtaBuffer_Depth, pOtaInterfaces, pOtaInterfaces_Depth, pThingName, pThingName_Depth, OtaAppCallback, cmock_retval)
void OTA_Init_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, OtaAppBuffer_t* pOtaBuffer, int pOtaBuffer_Depth, OtaInterfaces_t* pOtaInterfaces, int pOtaInterfaces_Depth, const uint8_t* pThingName, int pThingName_Depth, OtaAppCallback_t OtaAppCallback, OtaErr_t cmock_to_return);
#define OTA_Init_ReturnThruPtr_pOtaBuffer(pOtaBuffer) OTA_Init_CMockReturnMemThruPtr_pOtaBuffer(__LINE__, pOtaBuffer, sizeof(OtaAppBuffer_t))
#define OTA_Init_ReturnArrayThruPtr_pOtaBuffer(pOtaBuffer, cmock_len) OTA_Init_CMockReturnMemThruPtr_pOtaBuffer(__LINE__, pOtaBuffer, cmock_len * sizeof(*pOtaBuffer))
#define OTA_Init_ReturnMemThruPtr_pOtaBuffer(pOtaBuffer, cmock_size) OTA_Init_CMockReturnMemThruPtr_pOtaBuffer(__LINE__, pOtaBuffer, cmock_size)
void OTA_Init_CMockReturnMemThruPtr_pOtaBuffer(UNITY_LINE_TYPE cmock_line, OtaAppBuffer_t* pOtaBuffer, size_t cmock_size);
#define OTA_Init_ReturnThruPtr_pOtaInterfaces(pOtaInterfaces) OTA_Init_CMockReturnMemThruPtr_pOtaInterfaces(__LINE__, pOtaInterfaces, sizeof(OtaInterfaces_t))
#define OTA_Init_ReturnArrayThruPtr_pOtaInterfaces(pOtaInterfaces, cmock_len) OTA_Init_CMockReturnMemThruPtr_pOtaInterfaces(__LINE__, pOtaInterfaces, cmock_len * sizeof(*pOtaInterfaces))
#define OTA_Init_ReturnMemThruPtr_pOtaInterfaces(pOtaInterfaces, cmock_size) OTA_Init_CMockReturnMemThruPtr_pOtaInterfaces(__LINE__, pOtaInterfaces, cmock_size)
void OTA_Init_CMockReturnMemThruPtr_pOtaInterfaces(UNITY_LINE_TYPE cmock_line, OtaInterfaces_t* pOtaInterfaces, size_t cmock_size);
#define OTA_Init_IgnoreArg_pOtaBuffer() OTA_Init_CMockIgnoreArg_pOtaBuffer(__LINE__)
void OTA_Init_CMockIgnoreArg_pOtaBuffer(UNITY_LINE_TYPE cmock_line);
#define OTA_Init_IgnoreArg_pOtaInterfaces() OTA_Init_CMockIgnoreArg_pOtaInterfaces(__LINE__)
void OTA_Init_CMockIgnoreArg_pOtaInterfaces(UNITY_LINE_TYPE cmock_line);
#define OTA_Init_IgnoreArg_pThingName() OTA_Init_CMockIgnoreArg_pThingName(__LINE__)
void OTA_Init_CMockIgnoreArg_pThingName(UNITY_LINE_TYPE cmock_line);
#define OTA_Init_IgnoreArg_OtaAppCallback() OTA_Init_CMockIgnoreArg_OtaAppCallback(__LINE__)
void OTA_Init_CMockIgnoreArg_OtaAppCallback(UNITY_LINE_TYPE cmock_line);
#define OTA_Shutdown_IgnoreAndReturn(cmock_retval) OTA_Shutdown_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_Shutdown_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaState_t cmock_to_return);
#define OTA_Shutdown_StopIgnore() OTA_Shutdown_CMockStopIgnore()
void OTA_Shutdown_CMockStopIgnore(void);
#define OTA_Shutdown_ExpectAndReturn(ticksToWait, unsubscribeFlag, cmock_retval) OTA_Shutdown_CMockExpectAndReturn(__LINE__, ticksToWait, unsubscribeFlag, cmock_retval)
void OTA_Shutdown_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ticksToWait, uint8_t unsubscribeFlag, OtaState_t cmock_to_return);
typedef OtaState_t (* CMOCK_OTA_Shutdown_CALLBACK)(uint32_t ticksToWait, uint8_t unsubscribeFlag, int cmock_num_calls);
void OTA_Shutdown_AddCallback(CMOCK_OTA_Shutdown_CALLBACK Callback);
void OTA_Shutdown_Stub(CMOCK_OTA_Shutdown_CALLBACK Callback);
#define OTA_Shutdown_StubWithCallback OTA_Shutdown_Stub
#define OTA_Shutdown_IgnoreArg_ticksToWait() OTA_Shutdown_CMockIgnoreArg_ticksToWait(__LINE__)
void OTA_Shutdown_CMockIgnoreArg_ticksToWait(UNITY_LINE_TYPE cmock_line);
#define OTA_Shutdown_IgnoreArg_unsubscribeFlag() OTA_Shutdown_CMockIgnoreArg_unsubscribeFlag(__LINE__)
void OTA_Shutdown_CMockIgnoreArg_unsubscribeFlag(UNITY_LINE_TYPE cmock_line);
#define OTA_GetState_IgnoreAndReturn(cmock_retval) OTA_GetState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_GetState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaState_t cmock_to_return);
#define OTA_GetState_StopIgnore() OTA_GetState_CMockStopIgnore()
void OTA_GetState_CMockStopIgnore(void);
#define OTA_GetState_ExpectAndReturn(cmock_retval) OTA_GetState_CMockExpectAndReturn(__LINE__, cmock_retval)
void OTA_GetState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaState_t cmock_to_return);
typedef OtaState_t (* CMOCK_OTA_GetState_CALLBACK)(int cmock_num_calls);
void OTA_GetState_AddCallback(CMOCK_OTA_GetState_CALLBACK Callback);
void OTA_GetState_Stub(CMOCK_OTA_GetState_CALLBACK Callback);
#define OTA_GetState_StubWithCallback OTA_GetState_Stub
#define OTA_ActivateNewImage_IgnoreAndReturn(cmock_retval) OTA_ActivateNewImage_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_ActivateNewImage_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaErr_t cmock_to_return);
#define OTA_ActivateNewImage_StopIgnore() OTA_ActivateNewImage_CMockStopIgnore()
void OTA_ActivateNewImage_CMockStopIgnore(void);
#define OTA_ActivateNewImage_ExpectAndReturn(cmock_retval) OTA_ActivateNewImage_CMockExpectAndReturn(__LINE__, cmock_retval)
void OTA_ActivateNewImage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaErr_t cmock_to_return);
typedef OtaErr_t (* CMOCK_OTA_ActivateNewImage_CALLBACK)(int cmock_num_calls);
void OTA_ActivateNewImage_AddCallback(CMOCK_OTA_ActivateNewImage_CALLBACK Callback);
void OTA_ActivateNewImage_Stub(CMOCK_OTA_ActivateNewImage_CALLBACK Callback);
#define OTA_ActivateNewImage_StubWithCallback OTA_ActivateNewImage_Stub
#define OTA_SetImageState_IgnoreAndReturn(cmock_retval) OTA_SetImageState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_SetImageState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaErr_t cmock_to_return);
#define OTA_SetImageState_StopIgnore() OTA_SetImageState_CMockStopIgnore()
void OTA_SetImageState_CMockStopIgnore(void);
#define OTA_SetImageState_ExpectAndReturn(state, cmock_retval) OTA_SetImageState_CMockExpectAndReturn(__LINE__, state, cmock_retval)
void OTA_SetImageState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaImageState_t state, OtaErr_t cmock_to_return);
typedef OtaErr_t (* CMOCK_OTA_SetImageState_CALLBACK)(OtaImageState_t state, int cmock_num_calls);
void OTA_SetImageState_AddCallback(CMOCK_OTA_SetImageState_CALLBACK Callback);
void OTA_SetImageState_Stub(CMOCK_OTA_SetImageState_CALLBACK Callback);
#define OTA_SetImageState_StubWithCallback OTA_SetImageState_Stub
#define OTA_SetImageState_IgnoreArg_state() OTA_SetImageState_CMockIgnoreArg_state(__LINE__)
void OTA_SetImageState_CMockIgnoreArg_state(UNITY_LINE_TYPE cmock_line);
#define OTA_GetImageState_IgnoreAndReturn(cmock_retval) OTA_GetImageState_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_GetImageState_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaImageState_t cmock_to_return);
#define OTA_GetImageState_StopIgnore() OTA_GetImageState_CMockStopIgnore()
void OTA_GetImageState_CMockStopIgnore(void);
#define OTA_GetImageState_ExpectAndReturn(cmock_retval) OTA_GetImageState_CMockExpectAndReturn(__LINE__, cmock_retval)
void OTA_GetImageState_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaImageState_t cmock_to_return);
typedef OtaImageState_t (* CMOCK_OTA_GetImageState_CALLBACK)(int cmock_num_calls);
void OTA_GetImageState_AddCallback(CMOCK_OTA_GetImageState_CALLBACK Callback);
void OTA_GetImageState_Stub(CMOCK_OTA_GetImageState_CALLBACK Callback);
#define OTA_GetImageState_StubWithCallback OTA_GetImageState_Stub
#define OTA_CheckForUpdate_IgnoreAndReturn(cmock_retval) OTA_CheckForUpdate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_CheckForUpdate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaErr_t cmock_to_return);
#define OTA_CheckForUpdate_StopIgnore() OTA_CheckForUpdate_CMockStopIgnore()
void OTA_CheckForUpdate_CMockStopIgnore(void);
#define OTA_CheckForUpdate_ExpectAndReturn(cmock_retval) OTA_CheckForUpdate_CMockExpectAndReturn(__LINE__, cmock_retval)
void OTA_CheckForUpdate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaErr_t cmock_to_return);
typedef OtaErr_t (* CMOCK_OTA_CheckForUpdate_CALLBACK)(int cmock_num_calls);
void OTA_CheckForUpdate_AddCallback(CMOCK_OTA_CheckForUpdate_CALLBACK Callback);
void OTA_CheckForUpdate_Stub(CMOCK_OTA_CheckForUpdate_CALLBACK Callback);
#define OTA_CheckForUpdate_StubWithCallback OTA_CheckForUpdate_Stub
#define OTA_Suspend_IgnoreAndReturn(cmock_retval) OTA_Suspend_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_Suspend_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaErr_t cmock_to_return);
#define OTA_Suspend_StopIgnore() OTA_Suspend_CMockStopIgnore()
void OTA_Suspend_CMockStopIgnore(void);
#define OTA_Suspend_ExpectAndReturn(cmock_retval) OTA_Suspend_CMockExpectAndReturn(__LINE__, cmock_retval)
void OTA_Suspend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaErr_t cmock_to_return);
typedef OtaErr_t (* CMOCK_OTA_Suspend_CALLBACK)(int cmock_num_calls);
void OTA_Suspend_AddCallback(CMOCK_OTA_Suspend_CALLBACK Callback);
void OTA_Suspend_Stub(CMOCK_OTA_Suspend_CALLBACK Callback);
#define OTA_Suspend_StubWithCallback OTA_Suspend_Stub
#define OTA_Resume_IgnoreAndReturn(cmock_retval) OTA_Resume_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_Resume_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaErr_t cmock_to_return);
#define OTA_Resume_StopIgnore() OTA_Resume_CMockStopIgnore()
void OTA_Resume_CMockStopIgnore(void);
#define OTA_Resume_ExpectAndReturn(cmock_retval) OTA_Resume_CMockExpectAndReturn(__LINE__, cmock_retval)
void OTA_Resume_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaErr_t cmock_to_return);
typedef OtaErr_t (* CMOCK_OTA_Resume_CALLBACK)(int cmock_num_calls);
void OTA_Resume_AddCallback(CMOCK_OTA_Resume_CALLBACK Callback);
void OTA_Resume_Stub(CMOCK_OTA_Resume_CALLBACK Callback);
#define OTA_Resume_StubWithCallback OTA_Resume_Stub
#define OTA_EventProcessingTask_Ignore() OTA_EventProcessingTask_CMockIgnore()
void OTA_EventProcessingTask_CMockIgnore(void);
#define OTA_EventProcessingTask_StopIgnore() OTA_EventProcessingTask_CMockStopIgnore()
void OTA_EventProcessingTask_CMockStopIgnore(void);
#define OTA_EventProcessingTask_Expect(pUnused) OTA_EventProcessingTask_CMockExpect(__LINE__, pUnused)
void OTA_EventProcessingTask_CMockExpect(UNITY_LINE_TYPE cmock_line, void* pUnused);
typedef void (* CMOCK_OTA_EventProcessingTask_CALLBACK)(void* pUnused, int cmock_num_calls);
void OTA_EventProcessingTask_AddCallback(CMOCK_OTA_EventProcessingTask_CALLBACK Callback);
void OTA_EventProcessingTask_Stub(CMOCK_OTA_EventProcessingTask_CALLBACK Callback);
#define OTA_EventProcessingTask_StubWithCallback OTA_EventProcessingTask_Stub
#define OTA_EventProcessingTask_ExpectWithArray(pUnused, pUnused_Depth) OTA_EventProcessingTask_CMockExpectWithArray(__LINE__, pUnused, pUnused_Depth)
void OTA_EventProcessingTask_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, void* pUnused, int pUnused_Depth);
#define OTA_EventProcessingTask_ReturnThruPtr_pUnused(pUnused) OTA_EventProcessingTask_CMockReturnMemThruPtr_pUnused(__LINE__, pUnused, sizeof(void))
#define OTA_EventProcessingTask_ReturnArrayThruPtr_pUnused(pUnused, cmock_len) OTA_EventProcessingTask_CMockReturnMemThruPtr_pUnused(__LINE__, pUnused, cmock_len * sizeof(*pUnused))
#define OTA_EventProcessingTask_ReturnMemThruPtr_pUnused(pUnused, cmock_size) OTA_EventProcessingTask_CMockReturnMemThruPtr_pUnused(__LINE__, pUnused, cmock_size)
void OTA_EventProcessingTask_CMockReturnMemThruPtr_pUnused(UNITY_LINE_TYPE cmock_line, void* pUnused, size_t cmock_size);
#define OTA_EventProcessingTask_IgnoreArg_pUnused() OTA_EventProcessingTask_CMockIgnoreArg_pUnused(__LINE__)
void OTA_EventProcessingTask_CMockIgnoreArg_pUnused(UNITY_LINE_TYPE cmock_line);
#define OTA_SignalEvent_IgnoreAndReturn(cmock_retval) OTA_SignalEvent_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_SignalEvent_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define OTA_SignalEvent_StopIgnore() OTA_SignalEvent_CMockStopIgnore()
void OTA_SignalEvent_CMockStopIgnore(void);
#define OTA_SignalEvent_ExpectAndReturn(pEventMsg, cmock_retval) OTA_SignalEvent_CMockExpectAndReturn(__LINE__, pEventMsg, cmock_retval)
void OTA_SignalEvent_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const OtaEventMsg_t* const pEventMsg, bool cmock_to_return);
typedef bool (* CMOCK_OTA_SignalEvent_CALLBACK)(const OtaEventMsg_t* const pEventMsg, int cmock_num_calls);
void OTA_SignalEvent_AddCallback(CMOCK_OTA_SignalEvent_CALLBACK Callback);
void OTA_SignalEvent_Stub(CMOCK_OTA_SignalEvent_CALLBACK Callback);
#define OTA_SignalEvent_StubWithCallback OTA_SignalEvent_Stub
#define OTA_SignalEvent_ExpectWithArrayAndReturn(pEventMsg, pEventMsg_Depth, cmock_retval) OTA_SignalEvent_CMockExpectWithArrayAndReturn(__LINE__, pEventMsg, pEventMsg_Depth, cmock_retval)
void OTA_SignalEvent_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, const OtaEventMsg_t* const pEventMsg, int pEventMsg_Depth, bool cmock_to_return);
#define OTA_SignalEvent_IgnoreArg_pEventMsg() OTA_SignalEvent_CMockIgnoreArg_pEventMsg(__LINE__)
void OTA_SignalEvent_CMockIgnoreArg_pEventMsg(UNITY_LINE_TYPE cmock_line);
#define OTA_GetStatistics_IgnoreAndReturn(cmock_retval) OTA_GetStatistics_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_GetStatistics_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, OtaErr_t cmock_to_return);
#define OTA_GetStatistics_StopIgnore() OTA_GetStatistics_CMockStopIgnore()
void OTA_GetStatistics_CMockStopIgnore(void);
#define OTA_GetStatistics_ExpectAndReturn(pStatistics, cmock_retval) OTA_GetStatistics_CMockExpectAndReturn(__LINE__, pStatistics, cmock_retval)
void OTA_GetStatistics_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaAgentStatistics_t* pStatistics, OtaErr_t cmock_to_return);
typedef OtaErr_t (* CMOCK_OTA_GetStatistics_CALLBACK)(OtaAgentStatistics_t* pStatistics, int cmock_num_calls);
void OTA_GetStatistics_AddCallback(CMOCK_OTA_GetStatistics_CALLBACK Callback);
void OTA_GetStatistics_Stub(CMOCK_OTA_GetStatistics_CALLBACK Callback);
#define OTA_GetStatistics_StubWithCallback OTA_GetStatistics_Stub
#define OTA_GetStatistics_ExpectWithArrayAndReturn(pStatistics, pStatistics_Depth, cmock_retval) OTA_GetStatistics_CMockExpectWithArrayAndReturn(__LINE__, pStatistics, pStatistics_Depth, cmock_retval)
void OTA_GetStatistics_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, OtaAgentStatistics_t* pStatistics, int pStatistics_Depth, OtaErr_t cmock_to_return);
#define OTA_GetStatistics_ReturnThruPtr_pStatistics(pStatistics) OTA_GetStatistics_CMockReturnMemThruPtr_pStatistics(__LINE__, pStatistics, sizeof(OtaAgentStatistics_t))
#define OTA_GetStatistics_ReturnArrayThruPtr_pStatistics(pStatistics, cmock_len) OTA_GetStatistics_CMockReturnMemThruPtr_pStatistics(__LINE__, pStatistics, cmock_len * sizeof(*pStatistics))
#define OTA_GetStatistics_ReturnMemThruPtr_pStatistics(pStatistics, cmock_size) OTA_GetStatistics_CMockReturnMemThruPtr_pStatistics(__LINE__, pStatistics, cmock_size)
void OTA_GetStatistics_CMockReturnMemThruPtr_pStatistics(UNITY_LINE_TYPE cmock_line, OtaAgentStatistics_t* pStatistics, size_t cmock_size);
#define OTA_GetStatistics_IgnoreArg_pStatistics() OTA_GetStatistics_CMockIgnoreArg_pStatistics(__LINE__)
void OTA_GetStatistics_CMockIgnoreArg_pStatistics(UNITY_LINE_TYPE cmock_line);
#define OTA_Err_strerror_IgnoreAndReturn(cmock_retval) OTA_Err_strerror_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_Err_strerror_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define OTA_Err_strerror_StopIgnore() OTA_Err_strerror_CMockStopIgnore()
void OTA_Err_strerror_CMockStopIgnore(void);
#define OTA_Err_strerror_ExpectAndReturn(err, cmock_retval) OTA_Err_strerror_CMockExpectAndReturn(__LINE__, err, cmock_retval)
void OTA_Err_strerror_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaErr_t err, const char* cmock_to_return);
typedef const char* (* CMOCK_OTA_Err_strerror_CALLBACK)(OtaErr_t err, int cmock_num_calls);
void OTA_Err_strerror_AddCallback(CMOCK_OTA_Err_strerror_CALLBACK Callback);
void OTA_Err_strerror_Stub(CMOCK_OTA_Err_strerror_CALLBACK Callback);
#define OTA_Err_strerror_StubWithCallback OTA_Err_strerror_Stub
#define OTA_Err_strerror_IgnoreArg_err() OTA_Err_strerror_CMockIgnoreArg_err(__LINE__)
void OTA_Err_strerror_CMockIgnoreArg_err(UNITY_LINE_TYPE cmock_line);
#define OTA_JobParse_strerror_IgnoreAndReturn(cmock_retval) OTA_JobParse_strerror_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_JobParse_strerror_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define OTA_JobParse_strerror_StopIgnore() OTA_JobParse_strerror_CMockStopIgnore()
void OTA_JobParse_strerror_CMockStopIgnore(void);
#define OTA_JobParse_strerror_ExpectAndReturn(err, cmock_retval) OTA_JobParse_strerror_CMockExpectAndReturn(__LINE__, err, cmock_retval)
void OTA_JobParse_strerror_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaJobParseErr_t err, const char* cmock_to_return);
typedef const char* (* CMOCK_OTA_JobParse_strerror_CALLBACK)(OtaJobParseErr_t err, int cmock_num_calls);
void OTA_JobParse_strerror_AddCallback(CMOCK_OTA_JobParse_strerror_CALLBACK Callback);
void OTA_JobParse_strerror_Stub(CMOCK_OTA_JobParse_strerror_CALLBACK Callback);
#define OTA_JobParse_strerror_StubWithCallback OTA_JobParse_strerror_Stub
#define OTA_JobParse_strerror_IgnoreArg_err() OTA_JobParse_strerror_CMockIgnoreArg_err(__LINE__)
void OTA_JobParse_strerror_CMockIgnoreArg_err(UNITY_LINE_TYPE cmock_line);
#define OTA_PalStatus_strerror_IgnoreAndReturn(cmock_retval) OTA_PalStatus_strerror_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_PalStatus_strerror_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define OTA_PalStatus_strerror_StopIgnore() OTA_PalStatus_strerror_CMockStopIgnore()
void OTA_PalStatus_strerror_CMockStopIgnore(void);
#define OTA_PalStatus_strerror_ExpectAndReturn(status, cmock_retval) OTA_PalStatus_strerror_CMockExpectAndReturn(__LINE__, status, cmock_retval)
void OTA_PalStatus_strerror_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaPalMainStatus_t status, const char* cmock_to_return);
typedef const char* (* CMOCK_OTA_PalStatus_strerror_CALLBACK)(OtaPalMainStatus_t status, int cmock_num_calls);
void OTA_PalStatus_strerror_AddCallback(CMOCK_OTA_PalStatus_strerror_CALLBACK Callback);
void OTA_PalStatus_strerror_Stub(CMOCK_OTA_PalStatus_strerror_CALLBACK Callback);
#define OTA_PalStatus_strerror_StubWithCallback OTA_PalStatus_strerror_Stub
#define OTA_PalStatus_strerror_IgnoreArg_status() OTA_PalStatus_strerror_CMockIgnoreArg_status(__LINE__)
void OTA_PalStatus_strerror_CMockIgnoreArg_status(UNITY_LINE_TYPE cmock_line);
#define OTA_OsStatus_strerror_IgnoreAndReturn(cmock_retval) OTA_OsStatus_strerror_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void OTA_OsStatus_strerror_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, const char* cmock_to_return);
#define OTA_OsStatus_strerror_StopIgnore() OTA_OsStatus_strerror_CMockStopIgnore()
void OTA_OsStatus_strerror_CMockStopIgnore(void);
#define OTA_OsStatus_strerror_ExpectAndReturn(status, cmock_retval) OTA_OsStatus_strerror_CMockExpectAndReturn(__LINE__, status, cmock_retval)
void OTA_OsStatus_strerror_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, OtaOsStatus_t status, const char* cmock_to_return);
typedef const char* (* CMOCK_OTA_OsStatus_strerror_CALLBACK)(OtaOsStatus_t status, int cmock_num_calls);
void OTA_OsStatus_strerror_AddCallback(CMOCK_OTA_OsStatus_strerror_CALLBACK Callback);
void OTA_OsStatus_strerror_Stub(CMOCK_OTA_OsStatus_strerror_CALLBACK Callback);
#define OTA_OsStatus_strerror_StubWithCallback OTA_OsStatus_strerror_Stub
#define OTA_OsStatus_strerror_IgnoreArg_status() OTA_OsStatus_strerror_CMockIgnoreArg_status(__LINE__)
void OTA_OsStatus_strerror_CMockIgnoreArg_status(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif


#ifdef __cplusplus
}
#endif
